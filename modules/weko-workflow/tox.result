GLOB sdist-make: /code/modules/weko-workflow/setup.py
c1 inst-nodeps: /code/modules/weko-workflow/.tox/.tmp/package/1/weko-workflow-0.1.0.dev20170000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.1,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.7,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==8.0.4,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==5.0,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,Flask==1.0.4,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.3.3,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.11.0,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,Flask-OAuthlib==0.9.5,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.1.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.5,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,iniconfig==1.1.1,intervals==0.8.0,invenio-access==1.1.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_s3&subdirectory=modules/invenio-s3,invenio-search==1.1.0,invenio-search-ui==1.0.0a9,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,kombu==4.6.10,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==3.0.5,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.0.9,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==6.1.2,pytest-cov==4.0.0,pytest-mock==3.6.1,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.12.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,testpath==0.3.1,toml==0.10.2,tomli==1.2.3,tornado==4.5.3,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,validators==0.12.0,vine==1.3.0,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_records&subdirectory=modules/weko-records,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,weko-workflow @ file:///code/modules/weko-workflow/.tox/.tmp/package/1/weko-workflow-0.1.0.dev20170000.zip,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='3404312602'
c1 run-test: commands[0] | pytest --cov=weko_workflow tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-config=tox.ini --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-6.1.2, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-workflow/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-workflow
plugins: cov-4.0.0, celery-4.4.7, mock-3.6.1
collecting ... collected 441 items

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest /admin/flowsetting/
PASSED
tests/test_admin.py::TestFlowSettingView::test_index_acl[0-403] /admin/flowsetting/
PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl_guest /admin/flowsetting/
PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl[1-200] /admin/workflowsetting/0
/admin/workflowsetting/0
FAILED
tests/test_admin.py::TestFlowSettingView::test_get_specified_properties PASSED
tests/test_admin.py::TestFlowSettingView::test_update_flow FAILED
tests/test_admin.py::TestFlowSettingView::test_new_flow FAILED
tests/test_admin.py::TestFlowSettingView::test_del_flow FAILED
tests/test_admin.py::TestFlowSettingView::test_get_actions FAILED
tests/test_admin.py::TestFlowSettingView::test_upt_flow_action FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_index_acl_guest /admin/workflowsetting/
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_index_acl[1-200] /admin/workflowsetting/
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl_guest /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl[1-200] /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl_guest /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl[1-200] /admin/workflowsetting/0
FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_delete_workflow_acl_guest /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_delete_workflow_acl[1-200] /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_get_name_display_hide PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_get_displays PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_save_workflow_role FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_get_language_workflows FAILED
tests/test_api.py::test_Flow_action PASSED
tests/test_api.py::test_WorkActivity_filter_by_date PASSED
tests/test_api.py::test_WorkActivity_get_all_activity_list PASSED
tests/test_api.py::test_WorkActivity_get_activity_index_search PASSED
tests/test_api.py::test_WorkActivity_upt_activity_detail PASSED
tests/test_api.py::test_WorkActivity_get_corresponding_usage_activities PASSED
tests/test_cli.py::test_workflow PASSED
tests/test_cli.py::test_init_workflow_tables FAILED
tests/test_romeo.py::test_search_romeo_jtitles PASSED
tests/test_romeo.py::test_search_romeo_issn PASSED
tests/test_romeo.py::test_search_romeo_jtitle PASSED
tests/test_sessions.py::test_upt_activity_item PASSED
tests/test_tasks.py::test_cancel_expired_usage_report_activities PASSED
tests/test_utils.py::test_get_current_language PASSED
tests/test_utils.py::test_get_term_and_condition_content test data:['this is test data.']
PASSED
tests/test_utils.py::test_get_identifier_setting PASSED
tests/test_utils.py::test_saving_doi_pidstore PASSED
tests/test_utils.py::test_register_hdl PASSED
tests/test_utils.py::test_item_metadata_validation FAILED
tests/test_utils.py::test_merge_doi_error_list PASSED
tests/test_utils.py::test_validation_item_property PASSED
tests/test_utils.py::test_handle_check_required_data PASSED
tests/test_utils.py::test_check_required_data PASSED
tests/test_utils.py::test_get_activity_id_of_record_without_version PASSED
tests/test_utils.py::test_check_suffix_identifier PASSED
tests/test_utils.py::test_get_sub_item_value PASSED
tests/test_utils.py::test_get_item_value_in_deep PASSED
tests/test_utils.py::test_delete_bucket FAILED
tests/test_utils.py::test_merge_buckets_by_records[True] PASSED
tests/test_utils.py::test_merge_buckets_by_records[False] PASSED
tests/test_utils.py::test_merge_buckets_by_records_error PASSED
tests/test_utils.py::test_set_bucket_default_size FAILED
tests/test_utils.py::test_is_show_autofill_metadata PASSED
tests/test_utils.py::test_is_hidden_pubdate PASSED
tests/test_utils.py::test_get_parent_pid_with_type FAILED
tests/test_utils.py::test_filter_all_condition MultiDict([('createdfrom_0', 'createdfrom_0'), ('createdto_0', 'createdto_0'), ('workflow_0', 'workflow_0'), ('user_0', 'user_0'), ('item_0', 'item_0'), ('status_0', 'status_0'), ('tab_0', 'tab_0'), ('sizewait_0', 'sizewait_0'), ('sizetodo_0', 'sizetodo_0'), ('sizeall_0', 'sizeall_0'), ('pagesall_0', 'pagesall_0'), ('pagestodo_0', 'pagestodo_0'), ('pageswait_0', 'pageswait_0'), ('createdfrom_1', 'createdfrom_1'), ('createdto_1', 'createdto_1'), ('workflow_1', 'workflow_1'), ('user_1', 'user_1'), ('item_1', 'item_1'), ('status_1', 'status_1'), ('tab_1', 'tab_1'), ('sizewait_1', 'sizewait_1'), ('sizetodo_1', 'sizetodo_1'), ('sizeall_1', 'sizeall_1'), ('pagesall_1', 'pagesall_1'), ('pagestodo_1', 'pagestodo_1'), ('pageswait_1', 'pageswait_1'), ('dummy_0', 'dummy2')])
PASSED
tests/test_utils.py::test_filter_condition PASSED
tests/test_utils.py::test_get_actionid PASSED
tests/test_utils.py::test_convert_record_to_item_metadata PASSED
tests/test_utils.py::test_prepare_edit_workflow FAILED
tests/test_utils.py::test_handle_finish_workflow FAILED
tests/test_utils.py::test_delete_cache_data PASSED
tests/test_utils.py::test_update_cache_data PASSED
tests/test_utils.py::test_get_cache_data PASSED
tests/test_utils.py::test_check_an_item_is_locked PASSED
tests/test_utils.py::test_get_accoutn_info PASSED
tests/test_utils.py::test_check_existed_doi PASSED
tests/test_utils.py::test_get_url_root PASSED
tests/test_utils.py::test_get_record_by_root_ver PASSED
tests/test_utils.py::test_get_disptype_and_ver_in_metainfo record:{'_oai': {'id': 'oai:weko3.example.org:00000001', 'sets': ['1']}, 'path': ['1'], 'owner': '1', 'recid': '1', 'title': ['title'], 'pubdate': {'attribute_name': 'PubDate', 'attribute_value': '2022-08-20'}, '_buckets': {'deposit': '3e99cfca-098b-42ed-b8a0-20ddd09b3e02'}, '_deposit': {'id': '1', 'pid': {'type': 'depid', 'value': '1', 'revision_id': 0}, 'owner': '1', 'owners': [1], 'status': 'published', 'created_by': 1, 'owners_ext': {'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': ''}}, 'item_title': 'title', 'author_link': [], 'item_type_id': '1', 'publish_date': '2022-08-20', 'publish_status': '0', 'weko_shared_id': -1, 'item_1617186331708': {'attribute_name': 'Title', 'attribute_value_mlt': [{'subitem_1551255647225': 'title', 'subitem_1551255648112': 'ja', 'subitem_stop/continue': 'Continue'}]}, 'item_1617258105262': {'attribute_name': 'Resource Type', 'attribute_value_mlt': [{'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper'}]}, 'item_1617186819068': {'attribute_name': 'Identifier Registration', 'attribute_value_mlt': [{'subitem_identifier_reg_text': 'test/0000000001', 'subitem_identifier_reg_type': 'JaLC'}]}, 'item_1617605131499': {'attribute_name': 'File', 'attribute_type': 'file', 'attribute_value_mlt': [{'url': {'url': 'https://localhost/record/1/files/test.txt'}, 'date': [{'dateType': 'Available', 'dateValue': '2022-10-03'}], 'format': 'text/tab-separated-values', 'filename': 'check_2022-03-10.tsv', 'filesize': [{'value': '460 B'}], 'accessrole': 'open_access', 'version_id': '29dd361d-dc7f-49bc-b471-bdb5752afef5', 'displaytype': 'detail', 'licensetype': 'license_12', 'is_thumbnail': True}]}, 'item_1664947259584': {'attribute_name': 'サムネイル', 'attribute_value_mlt': [{'subitem_thumbnail': [{'thumbnail_url': '/api/files/29ad484d-4ed1-4caf-8b21-ab348ae7bf28/test.png?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}]}, 'relation_version_is_last': True}
result:{'29dd361d-dc7f-49bc-b471-bdb5752afef5': {'displaytype': 'detail', 'licensetype': 'license_12'}}
file:{'url': {'url': 'https://localhost/record/1/files/test.txt'}, 'date': [{'dateType': 'Available', 'dateValue': '2022-10-03'}], 'format': 'text/tab-separated-values', 'filename': 'check_2022-03-10.tsv', 'filesize': [{'value': '460 B'}], 'accessrole': 'open_access', 'version_id': '29dd361d-dc7f-49bc-b471-bdb5752afef5', 'displaytype': 'detail', 'licensetype': 'license_12', 'is_thumbnail': True}
PASSED
tests/test_utils.py::test_set_files_display_type PASSED
tests/test_utils.py::test_get_thumbnails PASSED
tests/test_utils.py::test_get_allow_multi_thumbnail result:False
PASSED
tests/test_utils.py::test_is_usage_application_item_type PASSED
tests/test_utils.py::test_is_usage_application PASSED
tests/test_utils.py::test_send_mail_reminder PASSED
tests/test_utils.py::test_send_mail_approval_done PASSED
tests/test_utils.py::test_send_mail_registration_done PASSED
tests/test_utils.py::test_send_mail_request_approval PASSED
tests/test_utils.py::test_send_mail PASSED
tests/test_utils.py::test_email_pattern_registration_done PASSED
tests/test_utils.py::test_email_pattern_request_approval PASSED
tests/test_utils.py::test_email_pattern_approval_done PASSED
tests/test_utils.py::test_get_mail_data PASSED
tests/test_utils.py::test_get_subject_and_content PASSED
tests/test_utils.py::test_get_file_path PASSED
tests/test_utils.py::test_replace_characters PASSED
tests/test_utils.py::test_register_info PASSED
tests/test_utils.py::test_get_approval_dates PASSED
tests/test_utils.py::test_get_item_info reslt:{'type': 'depid', 'value': '1', 'revision_id': 0, 'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': '', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper', 'subitem_thumbnail': [{'thumbnail_url': '/api/files/29ad484d-4ed1-4caf-8b21-ab348ae7bf28/test.png?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}
FAILED
tests/test_utils.py::test_get_site_info_name PASSED
tests/test_utils.py::test_get_default_mail_sender PASSED
tests/test_utils.py::test_set_mail_info PASSED
tests/test_utils.py::test_process_send_reminder_mail PASSED
tests/test_utils.py::test_process_send_notification_mail PASSED
tests/test_utils.py::test_get_application_and_approval_date PASSED
tests/test_utils.py::test_get_workflow_item_type_names PASSED
tests/test_utils.py::test_create_usage_report PASSED
tests/test_utils.py::test_create_record_metadata PASSED
tests/test_utils.py::test_modify_item_metadata PASSED
tests/test_utils.py::test_replace_title_subitem PASSED
tests/test_utils.py::test_get_schema_dict PASSED
tests/test_utils.py::test_create_deposit PASSED
tests/test_utils.py::test_update_activity_action PASSED
tests/test_utils.py::test_check_continue PASSED
tests/test_utils.py::test_autofill_title PASSED
tests/test_utils.py::test_exclude_admin_workflow PASSED
tests/test_utils.py::test_is_enable_item_name_link PASSED
tests/test_utils.py::test_save_activity_data PASSED
tests/test_utils.py::test_send_mail_url_guest_user PASSED
tests/test_utils.py::test_generate_guest_activity_token_value PASSED
tests/test_utils.py::test_init_activity_for_guest_user PASSED
tests/test_utils.py::test_send_usage_application_mail_for_guest_user PASSED
tests/test_utils.py::test_validate_guest_activity_token PASSED
tests/test_utils.py::test_validate_guest_activity_expired PASSED
tests/test_utils.py::test_create_onetime_download_url_to_guest PASSED
tests/test_utils.py::test_delete_guest_activity PASSED
tests/test_utils.py::test_get_activity_display_info PASSED
tests/test_utils.py::test___init_activity_detail_data_for_guest PASSED
tests/test_utils.py::test_prepare_data_for_guest_activity PASSED
tests/test_utils.py::test_recursive_get_specified_properties PASSED
tests/test_utils.py::test_get_approval_keys result:['parentkey.subitem_restricted_access_guarantor_mail_address']
PASSED
tests/test_utils.py::test_process_send_mail PASSED
tests/test_utils.py::test_cancel_expired_usage_reports PASSED
tests/test_utils.py::test_process_send_approval_mails PASSED
tests/test_utils.py::test_get_usage_data PASSED
tests/test_utils.py::test_update_approval_date PASSED
tests/test_utils.py::test_create_record_metadata_for_user PASSED
tests/test_utils.py::test_get_current_date PASSED
tests/test_utils.py::test_get_sub_key_by_system_property_key PASSED
tests/test_utils.py::test_update_system_data_for_item_metadata PASSED
tests/test_utils.py::test_update_approval_date_for_deposit PASSED
tests/test_utils.py::test_update_system_data_for_activity FAILED
tests/test_utils.py::test_get_record_first_version PASSED
tests/test_utils.py::test_get_index_id FAILED
tests/test_utils.py::test_make_activitylog_tsv FAILED
tests/test_views.py::test_index_acl_nologin /workflow/
PASSED
tests/test_views.py::test_index_acl[0-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[1-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[2-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[3-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[4-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[5-200] /workflow/
PASSED
tests/test_views.py::test_index_acl[6-200] /workflow/
PASSED
tests/test_views.py::test_iframe_success /workflow/iframe/success
FAILED
tests/test_views.py::test_init_activity_acl_nologin /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[0-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity_acl[1-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity_acl[2-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity_acl[3-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity_acl[4-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity_acl[5-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity_acl[6-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[0-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[1-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[2-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[3-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[4-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[5-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity[6-200] /workflow/activity/init
FAILED
tests/test_views.py::test_init_activity_guest_nologin /workflow/activity/init-guest
PASSED
tests/test_views.py::test_init_activity_guest_users[0-200] /workflow/activity/init-guest
PASSED
tests/test_views.py::test_init_activity_guest_users[1-200] /workflow/activity/init-guest
PASSED
tests/test_views.py::test_init_activity_guest_users[2-200] /workflow/activity/init-guest
PASSED
tests/test_views.py::test_init_activity_guest_users[3-200] /workflow/activity/init-guest
PASSED
tests/test_views.py::test_init_activity_guest_users[4-200] /workflow/activity/init-guest
PASSED
tests/test_views.py::test_init_activity_guest_users[5-200] /workflow/activity/init-guest
PASSED
tests/test_views.py::test_init_activity_guest_users[6-200] /workflow/activity/init-guest
PASSED
tests/test_views.py::test_find_doi_nologin /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[0-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[1-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[2-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[3-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[4-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[5-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[6-200] /workflow/findDOI
PASSED
tests/test_views.py::test_save_feedback_maillist_users[0-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[1-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[2-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[3-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[4-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[5-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[6-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_previous_action_acl_nologin /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[0-403-False] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[1-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[2-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[3-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[4-403-False] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[5-403-False] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[6-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action[0-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[1-200] /workflow/activity/action/2/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action[2-200] /workflow/activity/action/2/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action[3-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[4-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[5-200] /workflow/activity/action/2/1/rejectOrReturn/1
FAILED
tests/test_views.py::test_previous_action[6-200] /workflow/activity/action/2/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_next_action_acl_nologin /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[0-403-False] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[1-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[2-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[3-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[4-403-False] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[5-403-False] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[6-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_guestlogin /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action[0-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[1-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[2-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[3-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[4-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[5-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[6-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_cancel_action_acl_nologin /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[0-403-False] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[1-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[2-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[3-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[4-403-False] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[5-403-False] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[6-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_guestlogin /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[0-200] /workflow/activity/action/1/1/cancel
FAILED
tests/test_views.py::test_cancel_action[1-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[2-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action[3-200] /workflow/activity/action/1/1/cancel
FAILED
tests/test_views.py::test_cancel_action[4-200] /workflow/activity/action/1/1/cancel
FAILED
tests/test_views.py::test_cancel_action[5-200] /workflow/activity/action/1/1/cancel
FAILED
tests/test_views.py::test_cancel_action[6-200] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_guest /workflow/activity/action/99/1/cancel
PASSED
tests/test_views.py::test_send_mail_nologin /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[0-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[1-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[2-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[3-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[4-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[5-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[6-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_lock_activity_nologin /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[0-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[1-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[2-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[3-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[4-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[5-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[6-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity[0-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[1-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[2-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[3-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[4-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[5-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[6-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_unlock_activity_acl_nologin /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[0-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[1-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[2-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[3-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[4-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[5-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[6-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[0-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[1-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[2-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[3-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[4-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[5-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[6-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_check_approval_acl_nologin /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[0-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[1-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[2-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[3-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[4-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[5-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[6-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[0-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[1-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[2-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[3-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[4-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[5-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[6-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_nologin /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[0-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[1-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[2-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[3-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[4-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[5-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[6-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist[0-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[1-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[2-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[3-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[4-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[5-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[6-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_save_activity_acl_nologin /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[0-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[1-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[2-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[3-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[4-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[5-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[6-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_guestlogin /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[0-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[1-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[2-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[3-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[4-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[5-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[6-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_guestlogin /workflow/save_activity_data
PASSED
tests/test_views.py::test_display_activity_nologin /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_users[0-200] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_users[1-200] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_users[2-200] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_users[3-200] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_users[4-200] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_users[5-200] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_users[6-200] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity[0-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[1-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[2-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[3-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[4-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[5-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_display_activity[6-200] /workflow/activity/detail/A-00000001-10001
FAILED
tests/test_views.py::test_withdraw_confirm_nologin /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[0-403-False] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[1-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[2-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[3-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[4-403-False] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[5-403-False] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[6-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_guestlogin /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[0] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[1] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[2] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[3] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[4] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[5] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[6] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1_guestlogin /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[0-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[1-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[2-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[3-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[4-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[5-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[6-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete_guestlogin[success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_download_activitylog_nologin /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[0-403] /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[1-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_1[2-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_1[3-403] /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[4-403] /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[5-403] /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[6-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_2[1-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_2[2-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_2[6-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_clear_activitylog_nologin /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[0-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[3-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[4-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[5-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_2[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_2[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_2[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_3[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_3[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_3[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_4[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_4[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_4[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[0-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[3-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[4-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[5-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_6[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_6[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_6[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_7[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_7[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_7[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_8[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_8[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_8[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[0-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[3-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[4-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[5-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[6-200] /workflow/clear_activitylog/
PASSED

=================================== FAILURES ===================================
_______________ TestFlowSettingView.test_flow_detail_acl[1-200] ________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f556771eb00>
client = <FlaskClient <Flask 'testapp'>>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_register2 = None
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 403),
        (1, 200),
        # (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        # (6, 200),
    ])
    def test_flow_detail_acl(self,client,workflow,db_register2,users,users_index,status_code):
        flow_define = workflow['flow']
        login(client=client, email=users[users_index]['email'])
        url = '/admin/workflowsetting/{}'.format(0)
        print(url)
        with patch("flask.templating._render", return_value=""):
            res =  client.get(url)
            assert res.status_code == status_code
    
    
        url = '/admin/workflowsetting/{}'.format(flow_define.flow_id)
        with patch("flask.templating._render", return_value=""):
>           res =  client.get(url)

tests/test_admin.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:69: in inner
    return self._run_view(f, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:368: in _run_view
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_admin.views.protected_adminview_factory.<locals>.ProtectedAdminView object at 0x7f55676bacc0>
workflow_id = 'f5ed883f-fc77-4db1-ac6a-5c806c669273'

    @expose('/<string:workflow_id>', methods=['GET'])
    def workflow_detail(self, workflow_id='0'):
        """Get workflow info.
    
        :return:
        """
        if WEKO_WORKFLOW_SHOW_HARVESTING_ITEMS:
            itemtype_list = ItemTypes.get_latest()
        else:
            itemtype_list = ItemTypes.get_latest_custorm_harvesting()
        flow_api = Flow()
        flow_list = flow_api.get_flow_list()
        index_list = Index().get_all()
        location_list = Location.query.order_by(Location.id.asc()).all()
        hide = []
        role = Role.query.all()
        display_label = self.get_language_workflows("display")
        hide_label = self.get_language_workflows("hide")
        display_hide = self.get_language_workflows("display_hide")
    
        if '0' == workflow_id:
            """Create new workflow"""
            return self.render(
                'weko_workflow/admin/workflow_detail.html',
                workflow=None,
                itemtype_list=itemtype_list,
                flow_list=flow_list,
                index_list=index_list,
                location_list=location_list,
                hide_list=hide,
                display_list=role,
                display_label=display_label,
                hide_label=hide_label,
                display_hide_label=display_hide,
            )
    
        """Update the workflow info"""
        workflow = WorkFlow()
        workflows = workflow.get_workflow_detail(workflow_id)
        hide = Role.query.outerjoin(WorkflowRole) \
>           .filter(WorkflowRole.workflow_id == workflows.id) \
            .filter(WorkflowRole.role_id == Role.id) \
            .all()
E       AttributeError: 'NoneType' object has no attribute 'id'

weko_workflow/admin.py:294: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________ TestFlowSettingView.test_update_flow _____________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f556804b9e8>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_update_flow(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.update_flow(0)==""

tests/test_admin.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/admin.py:122: in update_flow
    workflow.upt_flow(flow_id, post_data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <weko_workflow.api.Flow object at 0x7f5566d70940>, flow_id = 0
flow = None

    def upt_flow(self, flow_id, flow):
        """Update flow info.
    
        :param flow_id:
        :param flow:
        :return:
        """
        try:
>           flow_name = flow.get('flow_name')
E           AttributeError: 'NoneType' object has no attribute 'get'

weko_workflow/api.py:118: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:api.py:141 'NoneType' object has no attribute 'get'
Traceback (most recent call last):
  File "/code/modules/weko-workflow/weko_workflow/api.py", line 118, in upt_flow
    flow_name = flow.get('flow_name')
AttributeError: 'NoneType' object has no attribute 'get'
______________________ TestFlowSettingView.test_new_flow _______________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f5566fc14a8>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_new_flow(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.new_flow(0)==""

tests/test_admin.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0, args = (), kwargs = {}

    @wraps(f)
    def inner(self, *args, **kwargs):
        # Store current admin view
        h.set_current_view(self)
    
        # Check if administrative piece is accessible
>       abort = self._handle_view(f.__name__, **kwargs)
E       AttributeError: 'int' object has no attribute '_handle_view'

.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:65: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ TestFlowSettingView.test_del_flow _______________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f5567705278>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_del_flow(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.del_flow(0)==""

tests/test_admin.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0, args = (), kwargs = {}

    @wraps(f)
    def inner(self, *args, **kwargs):
        # Store current admin view
        h.set_current_view(self)
    
        # Check if administrative piece is accessible
>       abort = self._handle_view(f.__name__, **kwargs)
E       AttributeError: 'int' object has no attribute '_handle_view'

.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:65: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________ TestFlowSettingView.test_get_actions _____________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f5566893d68>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_get_actions(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.get_actions()==""
E           AssertionError: assert [<Action 1>, <Action 2>, <Action 3>, <Action 4>, <Action 5>, <Action 7>] == ''
E             +[<Action 1>, <Action 2>, <Action 3>, <Action 4>, <Action 5>, <Action 7>]
E             -''

tests/test_admin.py:97: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
___________________ TestFlowSettingView.test_upt_flow_action ___________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f55663bef98>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_upt_flow_action(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.upt_flow_action(0)==""

tests/test_admin.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0, args = (), kwargs = {}

    @wraps(f)
    def inner(self, *args, **kwargs):
        # Store current admin view
        h.set_current_view(self)
    
        # Check if administrative piece is accessible
>       abort = self._handle_view(f.__name__, **kwargs)
E       AttributeError: 'int' object has no attribute '_handle_view'

.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:65: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
___________ TestWorkFlowSettingView.test_update_workflow_acl[1-200] ____________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f5568a72940>
client = <FlaskClient <Flask 'testapp'>>, db_register2 = None
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 403),
        (1, 200),
        # (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        # (6, 200),
    ])
    def test_update_workflow_acl(self,client,db_register2,users,users_index,status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('workflowsetting.update_workflow',workflow_id='0',_external=True)
        with patch("flask.templating._render", return_value=""):
>           res =  client.post(url)

tests/test_admin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:69: in inner
    return self._run_view(f, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:368: in _run_view
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_admin.views.protected_adminview_factory.<locals>.ProtectedAdminView object at 0x7f5568cddf28>
workflow_id = '0'

    @expose('/<string:workflow_id>', methods=['POST', 'PUT'])
    def update_workflow(self, workflow_id='0'):
        """Update workflow info.
    
        :return:
        """
        json_data = request.get_json()
>       list_hide = json_data.get('list_hide', [])
E       AttributeError: 'NoneType' object has no attribute 'get'

weko_workflow/admin.py:324: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________ TestWorkFlowSettingView.test_save_workflow_role ________________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f5564e037f0>
app = <Flask 'testapp'>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_save_workflow_role(self,app,users,workflow):
        role0 = (users[0]['obj']).roles[0]
        role1 = (users[1]['obj']).roles[0]
        role2 = (users[2]['obj']).roles[0]
        role3 = (users[3]['obj']).roles[0]
        role4 = (users[4]['obj']).roles[0]
    
        wf = workflow['workflow']
    
        with app.test_request_context():
>           assert WorkFlowSettingView.save_workflow_role(wf.id,[role0.id,role1.id,role2.id,role3.id,role4.id])
E           AssertionError: assert None
E            +  where None = <bound method WorkFlowSettingView.save_workflow_role of <class 'weko_workflow.admin.WorkFlowSettingView'>>(1, [])
E            +    where <bound method WorkFlowSettingView.save_workflow_role of <class 'weko_workflow.admin.WorkFlowSettingView'>> = WorkFlowSettingView.save_workflow_role
E            +    and   1 = <WorkFlow 1>.id

tests/test_admin.py:249: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:admin.py:433 wf_id:1
ERROR    flask.app:admin.py:435 list_hide:[3, 2, 1, 4, 5]
_____________ TestWorkFlowSettingView.test_get_language_workflows ______________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f55646fdfd0>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_get_language_workflows(self,users):
>       with self.test_request_context():
E       AttributeError: 'TestWorkFlowSettingView' object has no attribute 'test_request_context'

tests/test_admin.py:254: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_init_workflow_tables ___________________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_init_workflow_tables(app,db,users):
        runner = app.test_cli_runner()
        result = runner.invoke(init_workflow_tables,["Action,action_status"])
        assert result.output ==  'workflow db has been initialised.\n'
        assert result.exit_code == 0
    
        result = runner.invoke(init_workflow_tables,["gakuninrdm_data"])
>       assert result.output == ""
E       assert ("(sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO "\n 'workflow_workflow (status, created, updated, id, flows_id, flows_name, '\n 'itemtype_id, flow_id, is_deleted, open_restricted, is_gakuninrdm) VALUES (?, '\n "?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-03-25 "\n "13:26:57.182650', '2023-03-25 13:26:57.182657', -1, <memory at "\n "0x7f5568336588>, 'GRDM_デフォルトワークフロー', 15, -1, 0, 0, 1)] (Background on this "\n 'error at: http://sqlalche.me/e/gkpj)\n'\n 'workflow db init failed.\n') == ''
E         + (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_workflow (status, created, updated, id, flows_id, flows_name, itemtype_id, flow_id, is_deleted, open_restricted, is_gakuninrdm) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-03-25 13:26:57.182650', '2023-03-25 13:26:57.182657', -1, <memory at 0x7f5568336588>, 'GRDM_デフォルトワークフロー', 15, -1, 0, 0, 1)] (Background on this error at: http://sqlalche.me/e/gkpj)
E         + workflow db init failed.

tests/test_cli.py:27: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_item_metadata_validation _________________________

self = <sqlalchemy.engine.base.Connection object at 0x7f55617bf320>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f556185c710>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f556181ada0>
parameters = [immutabledict({})]
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f556181ada0>, [immutabledict({})])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f55618113c8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
>           context = constructor(dialect, self, conn, *args)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f556185c710>
connection = <sqlalchemy.engine.base.Connection object at 0x7f55617bf320>
dbapi_connection = <sqlalchemy.pool._ConnectionFairy object at 0x7f55618113c8>
compiled = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f556181ada0>
parameters = []

    @classmethod
    def _init_compiled(
        cls, dialect, connection, dbapi_connection, compiled, parameters
    ):
        """Initialize execution context for a Compiled construct."""
    
        self = cls.__new__(cls)
        self.root_connection = connection
        self._dbapi_connection = dbapi_connection
        self.dialect = connection.dialect
    
        self.compiled = compiled
    
        # this should be caught in the engine before
        # we get here
        assert compiled.can_execute
    
        self.execution_options = compiled.execution_options.union(
            connection._execution_options
        )
    
        self.result_column_struct = (
            compiled._result_columns,
            compiled._ordered_columns,
            compiled._textual_ordered_columns,
        )
    
        self.unicode_statement = util.text_type(compiled)
        if not dialect.supports_unicode_statements:
            self.statement = self.unicode_statement.encode(
                self.dialect.encoding
            )
        else:
            self.statement = self.unicode_statement
    
        self.isinsert = compiled.isinsert
        self.isupdate = compiled.isupdate
        self.isdelete = compiled.isdelete
        self.is_text = compiled.isplaintext
    
        if not parameters:
            self.compiled_parameters = [compiled.construct_params()]
        else:
            self.compiled_parameters = [
                compiled.construct_params(m, _group_number=grp)
                for grp, m in enumerate(parameters)
            ]
    
            self.executemany = len(parameters) > 1
    
        self.cursor = self.create_cursor()
    
        if self.isinsert or self.isupdate or self.isdelete:
            self.is_crud = True
            self._is_explicit_returning = bool(compiled.statement._returning)
            self._is_implicit_returning = bool(
                compiled.returning and not compiled.statement._returning
            )
    
        if self.compiled.insert_prefetch or self.compiled.update_prefetch:
            if self.executemany:
                self._process_executemany_defaults()
            else:
                self._process_executesingle_defaults()
    
        processors = compiled._bind_processors
    
        if compiled.contains_expanding_parameters:
            positiontup = self._expand_in_parameters(compiled, processors)
        elif compiled.positional:
            positiontup = self.compiled.positiontup
    
        # Convert the dictionary of bind parameter values
        # into a dict or list to be sent to the DBAPI's
        # execute() or executemany() method.
        parameters = []
        if compiled.positional:
            for compiled_params in self.compiled_parameters:
                param = []
                for key in positiontup:
                    if key in processors:
>                       param.append(processors[key](compiled_params[key]))

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = 1

    def process(value):
>       return impl_processor(process_param(value, dialect))

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/type_api.py:1189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = UUIDType(length=16), value = 1
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f556185c710>

    def process_bind_param(self, value, dialect):
        if value is None:
            return value
    
        if not isinstance(value, uuid.UUID):
>           value = self._coerce(value)

.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = 1

    @staticmethod
    def _coerce(value):
        if value and not isinstance(value, uuid.UUID):
            try:
>               value = uuid.UUID(value)

.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'UUID' object has no attribute 'int'",) raised in repr()] UUID object at 0x7f55617dbba8>
hex = 1, bytes = None, bytes_le = None, fields = None, int = None
version = None

    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,
                       int=None, version=None):
        r"""Create a UUID from either a string of 32 hexadecimal digits,
        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
        in little-endian order as the 'bytes_le' argument, a tuple of six
        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
        the 'fields' argument, or a single 128-bit integer as the 'int'
        argument.  When a string of hex digits is given, curly braces,
        hyphens, and a URN prefix are all optional.  For example, these
        expressions all yield the same UUID:
    
        UUID('{12345678-1234-5678-1234-567812345678}')
        UUID('12345678123456781234567812345678')
        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
        UUID(bytes='\x12\x34\x56\x78'*4)
        UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                      '\x12\x34\x56\x78\x12\x34\x56\x78')
        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
        UUID(int=0x12345678123456781234567812345678)
    
        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
        be given.  The 'version' argument is optional; if given, the resulting
        UUID will have its variant and version set according to RFC 4122,
        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
        """
    
        if [hex, bytes, bytes_le, fields, int].count(None) != 4:
            raise TypeError('one of the hex, bytes, bytes_le, fields, '
                            'or int arguments must be given')
        if hex is not None:
>           hex = hex.replace('urn:', '').replace('uuid:', '')
E           AttributeError: 'int' object has no attribute 'replace'

/usr/local/lib/python3.6/uuid.py:137: AttributeError

The above exception was the direct cause of the following exception:

db_records = [(<PersistentIdentifier recid:1 / rec:8cbe19fa-06aa-43fa-8e52-7bc970c74907 (R)>, <PersistentIdentifier depid:1 / rec:8...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:ff118048-8d2e-4433-ab10-7f48a8ca79b0 (R)>, None, ...)]

    def test_item_metadata_validation(db_records):
        recid, depid, record, item, parent, doi, deposit = db_records[0]
>       result = item_metadata_validation(recid.id,"hdl")

tests/test_utils.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:349: in item_metadata_validation
    item_id) if item_id else MappingData(record=record)
weko_workflow/utils.py:810: in __init__
    self.record = WekoRecord.get_record(item_id) if item_id else record
../invenio-records/invenio_records/api.py:206: in get_record
    obj = query.one()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3039: in one
    ret = self.one_or_none()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3008: in one_or_none
    ret = list(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3081: in __iter__
    return self._execute_and_instances(context)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3106: in _execute_and_instances
    result = conn.execute(querycontext.statement, self._params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1174: in _execute_context
    e, util.text_type(statement), parameters, None, None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: in _execute_context
    context = constructor(dialect, self, conn, *args)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: in _init_compiled
    param.append(processors[key](compiled_params[key]))
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/type_api.py:1189: in process
    return impl_processor(process_param(value, dialect))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:68: in process_bind_param
    value = self._coerce(value)
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:56: in _coerce
    value = uuid.UUID(value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'UUID' object has no attribute 'int'",) raised in repr()] UUID object at 0x7f55617dbba8>
hex = 1, bytes = None, bytes_le = None, fields = None, int = None
version = None

    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,
                       int=None, version=None):
        r"""Create a UUID from either a string of 32 hexadecimal digits,
        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
        in little-endian order as the 'bytes_le' argument, a tuple of six
        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
        the 'fields' argument, or a single 128-bit integer as the 'int'
        argument.  When a string of hex digits is given, curly braces,
        hyphens, and a URN prefix are all optional.  For example, these
        expressions all yield the same UUID:
    
        UUID('{12345678-1234-5678-1234-567812345678}')
        UUID('12345678123456781234567812345678')
        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
        UUID(bytes='\x12\x34\x56\x78'*4)
        UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                      '\x12\x34\x56\x78\x12\x34\x56\x78')
        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
        UUID(int=0x12345678123456781234567812345678)
    
        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
        be given.  The 'version' argument is optional; if given, the resulting
        UUID will have its variant and version set according to RFC 4122,
        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
        """
    
        if [hex, bytes, bytes_le, fields, int].count(None) != 4:
            raise TypeError('one of the hex, bytes, bytes_le, fields, '
                            'or int arguments must be given')
        if hex is not None:
>           hex = hex.replace('urn:', '').replace('uuid:', '')
E           sqlalchemy.exc.StatementError: (builtins.AttributeError) 'int' object has no attribute 'replace' [SQL: 'SELECT records_metadata.created AS records_metadata_created, records_metadata.updated AS records_metadata_updated, records_metadata.id AS records_metadata_id, records_metadata.json AS records_metadata_json, records_metadata.version_id AS records_metadata_version_id \nFROM records_metadata \nWHERE records_metadata.id = ? AND records_metadata.json IS NOT NULL'] [parameters: [{}]]

/usr/local/lib/python3.6/uuid.py:137: StatementError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_delete_bucket ______________________________

self = <sqlalchemy.engine.base.Connection object at 0x7f556223ff28>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f55611d4668>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = ?'
parameters = (<memory at 0x7f55616fae88>,)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f55611909b0>, [{}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f556223fbe0>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5561190080>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f55611d4668>
cursor = <sqlite3.Cursor object at 0x7f5561756260>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = ?'
parameters = (<memory at 0x7f55616fae88>,)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5561190080>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: FOREIGN KEY constraint failed

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db_records = [(<PersistentIdentifier recid:1 / rec:3d3a5ba1-15e1-4fe1-9be9-d7b65478f795 (R)>, <PersistentIdentifier depid:1 / rec:3...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:515bd535-49b8-4f5b-ae19-e85c264d1eda (R)>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f55611cdc80>

    def test_delete_bucket(db_records, add_file):
        bucket,_ = add_file(db_records[2][2])
        bucket_id = bucket.id
>       delete_bucket(bucket_id)

tests/test_utils.py:448: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:1150: in delete_bucket
    bucket.remove()
../invenio-files-rest/invenio_files_rest/models.py:151: in inner
    return f(self, *args, **kwargs)
../invenio-files-rest/invenio_files_rest/models.py:588: in remove
    self.query.filter_by(id=self.id).delete()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3440: in delete
    delete_op.exec_()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1636: in exec_
    self._do_exec()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1866: in _do_exec
    self._execute_stmt(delete_stmt)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1642: in _execute_stmt
    stmt, params=self.query._params, mapper=self.mapper
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1263: in execute
    clause, params or {}
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f55611d4668>
cursor = <sqlite3.Cursor object at 0x7f5561756260>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = ?'
parameters = (<memory at 0x7f55616fae88>,)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5561190080>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'DELETE FROM files_bucket WHERE files_bucket.id = ?'] [parameters: (<memory at 0x7f55616fae88>,)] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_set_bucket_default_size _________________________

db_records = [(<PersistentIdentifier recid:1 / rec:048eca27-c3bc-489a-ba7c-6ad1581f27cb (R)>, <PersistentIdentifier depid:1 / rec:0...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:2354f2f4-6122-4090-9909-176d6667df7e (R)>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f5560eb8158>

    def test_set_bucket_default_size(db_records, add_file):
        bucket_10, rbucket_10 = add_file(db_records[2][2])
>       set_bucket_default_size(rbucket_10.id)
E       AttributeError: 'RecordsBuckets' object has no attribute 'id'

tests/test_utils.py:480: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_get_parent_pid_with_type _________________________

db_records = [(<PersistentIdentifier recid:1 / rec:095553c2-0ffb-4d7d-a04a-9a2fa5f8deb6 (R)>, <PersistentIdentifier depid:1 / rec:0...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:23b1d171-a91e-4346-aa16-60b7ecc16d8b (R)>, None, ...)]

    def test_get_parent_pid_with_type(db_records):
        result = get_parent_pid_with_type("doi",db_records[0][2].id)
        assert result == db_records[0][5]
    
>       result = get_parent_pid_with_type("hdl",db_records[4][2].id)

tests/test_utils.py:518: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

pid_type = 'hdl', object_uuid = UUID('470f78a7-f31c-4b54-ac80-8c8b8a58b745')

    def get_parent_pid_with_type(pid_type, object_uuid):
        """Get Persistent Identifier Object by pid_value or item_uuid.
    
        Arguments:
            pid_type     -- {string} 'doi' (default) or 'hdl'
            object_uuid  -- {uuid} assigned object's uuid
    
        Returns:
            pid_object   -- PID object or None
    
        """
        try:
            record = WekoRecord.get_record(object_uuid)
            with db.session.no_autoflush:
                pid_object = PersistentIdentifier.query.filter_by(
                    pid_type=pid_type,
>                   object_uuid=record.pid_parent.object_uuid
                ).order_by(PersistentIdentifier.created.desc()).first()
E               AttributeError: 'NoneType' object has no attribute 'object_uuid'

weko_workflow/utils.py:1302: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_prepare_edit_workflow __________________________

self = <sqlalchemy.engine.base.Connection object at 0x7f555f57f588>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f555f94af60>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f555f57f5c0>
parameters = [{'activity_count': 1, 'date': '2023-03-25'}]
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f555f57f5c0>, [{'activity_count': 1, 'date': '2023-03-25'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f555f6e4f28>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
>           context = constructor(dialect, self, conn, *args)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f555f94af60>
connection = <sqlalchemy.engine.base.Connection object at 0x7f555f57f588>
dbapi_connection = <sqlalchemy.pool._ConnectionFairy object at 0x7f555f6e4f28>
compiled = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f555f57f5c0>
parameters = []

    @classmethod
    def _init_compiled(
        cls, dialect, connection, dbapi_connection, compiled, parameters
    ):
        """Initialize execution context for a Compiled construct."""
    
        self = cls.__new__(cls)
        self.root_connection = connection
        self._dbapi_connection = dbapi_connection
        self.dialect = connection.dialect
    
        self.compiled = compiled
    
        # this should be caught in the engine before
        # we get here
        assert compiled.can_execute
    
        self.execution_options = compiled.execution_options.union(
            connection._execution_options
        )
    
        self.result_column_struct = (
            compiled._result_columns,
            compiled._ordered_columns,
            compiled._textual_ordered_columns,
        )
    
        self.unicode_statement = util.text_type(compiled)
        if not dialect.supports_unicode_statements:
            self.statement = self.unicode_statement.encode(
                self.dialect.encoding
            )
        else:
            self.statement = self.unicode_statement
    
        self.isinsert = compiled.isinsert
        self.isupdate = compiled.isupdate
        self.isdelete = compiled.isdelete
        self.is_text = compiled.isplaintext
    
        if not parameters:
            self.compiled_parameters = [compiled.construct_params()]
        else:
            self.compiled_parameters = [
                compiled.construct_params(m, _group_number=grp)
                for grp, m in enumerate(parameters)
            ]
    
            self.executemany = len(parameters) > 1
    
        self.cursor = self.create_cursor()
    
        if self.isinsert or self.isupdate or self.isdelete:
            self.is_crud = True
            self._is_explicit_returning = bool(compiled.statement._returning)
            self._is_implicit_returning = bool(
                compiled.returning and not compiled.statement._returning
            )
    
        if self.compiled.insert_prefetch or self.compiled.update_prefetch:
            if self.executemany:
                self._process_executemany_defaults()
            else:
                self._process_executesingle_defaults()
    
        processors = compiled._bind_processors
    
        if compiled.contains_expanding_parameters:
            positiontup = self._expand_in_parameters(compiled, processors)
        elif compiled.positional:
            positiontup = self.compiled.positiontup
    
        # Convert the dictionary of bind parameter values
        # into a dict or list to be sent to the DBAPI's
        # execute() or executemany() method.
        parameters = []
        if compiled.positional:
            for compiled_params in self.compiled_parameters:
                param = []
                for key in positiontup:
                    if key in processors:
>                       param.append(processors[key](compiled_params[key]))

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = '2023-03-25'

    def process(value):
        if value is None:
            return None
        elif isinstance(value, datetime_date):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
            }
        else:
            raise TypeError(
>               "SQLite Date type only accepts Python "
                "date objects as input."
            )
E           TypeError: SQLite Date type only accepts Python date objects as input.

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:698: TypeError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_records = [(<[InvalidRequestError("This Session's transaction has been rolled back due to a previous exception during flush. To ...: '2023-03-25', 'activity_count': 1}]]",) raised in repr()] PersistentIdentifier object at 0x7f555f922240>, None, ...)]
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f555f671400>

    def test_prepare_edit_workflow(app, workflow, db_records,users,mocker):
        #login(client=client, email=users[2]["email"])
        with app.test_request_context():
            login_user(users[2]["obj"])
            mocker.patch("weko_workflow.utils.WekoDeposit.update")
            mocker.patch("weko_workflow.utils.WekoDeposit.commit")
            data = {
                "flow_id":workflow["flow"].id,
                "workflow_id":workflow["workflow"].id,
                "community":1,
                "itemtype_id":1,
                "activity_login_user":1,
                "activity_update_user":1
            }
            recid = db_records[0][0]
            deposit = db_records[0][6]
>           result = prepare_edit_workflow(data,recid,deposit)

tests/test_utils.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:1462: in prepare_edit_workflow
    draft_pid.object_uuid)
weko_workflow/api.py:734: in init_activity
    raise ex
weko_workflow/api.py:716: in init_activity
    activity_id=self.get_new_activity_id(),
weko_workflow/api.py:815: in get_new_activity_id
    raise ex
weko_workflow/api.py:810: in get_new_activity_id
    prev_counts = ActivityCount.query.filter(ActivityCount.date<current_date).all()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:2925: in all
    return list(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3080: in __iter__
    self.session._autoflush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1582: in _autoflush
    util.raise_from_cause(e)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1571: in _autoflush
    self.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1174: in _execute_context
    e, util.text_type(statement), parameters, None, None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: in _execute_context
    context = constructor(dialect, self, conn, *args)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: in _init_compiled
    param.append(processors[key](compiled_params[key]))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = '2023-03-25'

    def process(value):
        if value is None:
            return None
        elif isinstance(value, datetime_date):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
            }
        else:
            raise TypeError(
>               "SQLite Date type only accepts Python "
                "date objects as input."
            )
E           sqlalchemy.exc.StatementError: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:698: StatementError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_handle_finish_workflow __________________________

workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_records = [(<PersistentIdentifier recid:1 / rec:06ed6946-3334-44ae-83c9-60f3d59c6b9a (R)>, <PersistentIdentifier depid:1 / rec:0...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:74e8aef1-0209-46b9-a414-8e0c77406dcf (R)>, None, ...)]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f55622e1630>

    def test_handle_finish_workflow(workflow, db_records, mocker):
        result = handle_finish_workflow(None, None, None)
        assert result == None
        mocker.patch("weko_deposit.api.WekoDeposit.publish")
        mocker.patch("weko_deposit.api.WekoDeposit.commit")
>       mocker.patch("weko_workflow.utils.update_records_sets.delay")

tests/test_utils.py:609: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:384: in __call__
    **kwargs
.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:183: in _start_patch
    mocked = p.start()  # type: unittest.mock.MagicMock
/usr/local/lib/python3.6/unittest/mock.py:1378: in start
    result = self.__enter__()
/usr/local/lib/python3.6/unittest/mock.py:1231: in __enter__
    self.target = self.getter()
/usr/local/lib/python3.6/unittest/mock.py:1401: in <lambda>
    getter = lambda: _importer(target)
/usr/local/lib/python3.6/unittest/mock.py:1088: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'weko_workflow.utils' from '/code/modules/weko-workflow/weko_workflow/utils.py'>
comp = 'update_records_sets'
import_path = 'weko_workflow.utils.update_records_sets'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'weko_workflow.utils.update_records_sets'; 'weko_workflow.utils' is not a package

/usr/local/lib/python3.6/unittest/mock.py:1077: ModuleNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_get_item_info ______________________________

item_id = 'item_id'

    def get_item_info(item_id):
        """Get item info.
    
        :item_id: item id
        """
        if not item_id:
            return dict()
        try:
>           item = ItemsMetadata.get_record(id_=item_id)

weko_workflow/utils.py:2175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='get_record' id='140004631712096'>, args = ()
kwargs = {'id_': 'item_id'}

    def __call__(_mock_self, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        _mock_self._mock_check_sig(*args, **kwargs)
>       return _mock_self._mock_call(*args, **kwargs)

.tox/c1/lib/python3.6/site-packages/mock/mock.py:1092: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='get_record' id='140004631712096'>, args = ()
kwargs = {'id_': 'item_id'}
self = <MagicMock name='get_record' id='140004631712096'>
_call = call(id_='item_id'), do_method_calls = False
method_call_name = 'get_record', mock_call_name = '', is_a_call = False
_new_parent = None, effect = Exception('test error',)

    def _mock_call(_mock_self, *args, **kwargs):
        self = _mock_self
        self.called = True
        self.call_count += 1
    
        # handle call_args
        _call = _Call((args, kwargs), two=True)
        self.call_args = _call
        self.call_args_list.append(_call)
    
        # initial stuff for method_calls:
        do_method_calls = self._mock_parent is not None
        method_call_name = self._mock_name
    
        # initial stuff for mock_calls:
        mock_call_name = self._mock_new_name
        is_a_call = mock_call_name == '()'
        self.mock_calls.append(_Call(('', args, kwargs)))
    
        # follow up the chain of mocks:
        _new_parent = self._mock_new_parent
        while _new_parent is not None:
    
            # handle method_calls:
            if do_method_calls:
                _new_parent.method_calls.append(_Call((method_call_name, args, kwargs)))
                do_method_calls = _new_parent._mock_parent is not None
                if do_method_calls:
                    method_call_name = _new_parent._mock_name + '.' + method_call_name
    
            # handle mock_calls:
            this_mock_call = _Call((mock_call_name, args, kwargs))
            _new_parent.mock_calls.append(this_mock_call)
    
            if _new_parent._mock_new_name:
                if is_a_call:
                    dot = ''
                else:
                    dot = '.'
                is_a_call = _new_parent._mock_new_name == '()'
                mock_call_name = _new_parent._mock_new_name + dot + mock_call_name
    
            # follow the parental chain:
            _new_parent = _new_parent._mock_new_parent
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: test error

.tox/c1/lib/python3.6/site-packages/mock/mock.py:1143: Exception

During handling of the above exception, another exception occurred:

db_records = [(<PersistentIdentifier recid:1 / rec:04fc9339-977e-4db9-9984-653e695a72e8 (R)>, <PersistentIdentifier depid:1 / rec:0...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:fbabd716-5400-4729-b3c9-0afe60bcbae8 (R)>, None, ...)]

    def test_get_item_info(db_records):
        result = get_item_info(db_records[0][3].id)
        assert result == {'type': 'depid', 'value': '1', 'revision_id': 0, 'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': '', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper', 'subitem_thumbnail': [{'thumbnail_url': '/api/files/29ad484d-4ed1-4caf-8b21-ab348ae7bf28/test.png?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}
        print("reslt:{}".format(result))
    
        with patch("weko_workflow.utils.ItemsMetadata.get_record",side_effect=Exception("test error")):
>           result = get_item_info("item_id")

tests/test_utils.py:1145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:2177: in get_item_info
    current_app.logger.exception('Cannot get item data:', ex)
/usr/local/lib/python3.6/logging/__init__.py:1343: in exception
    self.error(msg, *args, exc_info=exc_info, **kwargs)
/usr/local/lib/python3.6/logging/__init__.py:1337: in error
    self._log(ERROR, msg, args, **kwargs)
/usr/local/lib/python3.6/logging/__init__.py:1444: in _log
    self.handle(record)
/usr/local/lib/python3.6/logging/__init__.py:1454: in handle
    self.callHandlers(record)
/usr/local/lib/python3.6/logging/__init__.py:1516: in callHandlers
    hdlr.handle(record)
/usr/local/lib/python3.6/logging/__init__.py:865: in handle
    self.emit(record)
.tox/c1/lib/python3.6/site-packages/_pytest/logging.py:328: in emit
    super().emit(record)
/usr/local/lib/python3.6/logging/__init__.py:1000: in emit
    self.handleError(record)
/usr/local/lib/python3.6/logging/__init__.py:994: in emit
    msg = self.format(record)
/usr/local/lib/python3.6/logging/__init__.py:840: in format
    return fmt.format(record)
.tox/c1/lib/python3.6/site-packages/_pytest/logging.py:89: in format
    return super().format(record)
/usr/local/lib/python3.6/logging/__init__.py:577: in format
    record.message = record.getMessage()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <LogRecord: flask.app, 40, /code/modules/weko-workflow/weko_workflow/utils.py, 2177, "Cannot get item data:">

    def getMessage(self):
        """
        Return the message for this LogRecord.
    
        Return the message for this LogRecord after merging any user-supplied
        arguments with the message.
        """
        msg = str(self.msg)
        if self.args:
>           msg = msg % self.args
E           TypeError: not all arguments converted during string formatting

/usr/local/lib/python3.6/logging/__init__.py:338: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________ test_update_system_data_for_activity _____________________

db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    def test_update_system_data_for_activity(db_register):
        update_system_data_for_activity(None,None,None)
    
        key = "temp_key"
        value = {"data_key":"data_value"}
        activity = db_register["activities"][1]
        update_system_data_for_activity(activity,key,value)
>       assert activity.temp_data == {"metainfo":{key:value}}
E       assert '{"metainfo": {"temp_key": {"data_key": "data_value"}}}' == {'metainfo': {'temp_key': {'data_key': 'data_value'}}}
E         +'{"metainfo": {"temp_key": {"data_key": "data_value"}}}'
E         -{'metainfo': {'temp_key': {'data_key': 'data_value'}}}

tests/test_utils.py:2593: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_get_index_id _______________________________

    def test_get_index_id():
        """Get index ID base on activity id"""
        # from weko_workflow.api import WorkActivity, WorkFlow
    
        # activity = WorkActivity()
        # activity_detail = activity.get_activity_detail(activity_id)
    
        # workflow = WorkFlow()
        # workflow_detail = workflow.get_workflow_by_id(
        #     activity_detail.workflow_id)
    
        # index_tree_id = workflow_detail.index_tree_id
    
        # if index_tree_id:
        #     from .api import Indexes
        #     index_result = Indexes.get_index(index_tree_id)
        #     if not index_result:
        #         index_tree_id = None
        # else:
        #     index_tree_id = None
>       raise BaseException
E       BaseException

tests/test_utils.py:2655: BaseException
__________________________ test_make_activitylog_tsv ___________________________

db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<PersistentIdentifier recid:1 / rec:80a5448c-81e3-454b-a8aa-8322f03b9388 (R)>, <PersistentIdentifier depid:1 / rec:8...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:32b09cb2-0189-4d82-a8a0-7c6f3518ca75 (R)>, None, ...)]

    def test_make_activitylog_tsv(db_register,db_records):
        """test make_activitylog_tsv"""
        activity = Activity()
        activities = []
        activities.append(activity.query.filter_by(activity_id='2'))
        activities.append(activity.query.filter_by(activity_id='3'))
    
    
>       output_tsv = make_activitylog_tsv(activities)

tests/test_utils.py:2665: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<flask_sqlalchemy.BaseQuery object at 0x7f5557c7b9b0>, <flask_sqlalchemy.BaseQuery object at 0x7f555b40cda0>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'BaseQuery' object has no attribute 'activity_start'

weko_workflow/utils.py:4012: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________________ test_iframe_success ______________________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f55546905f8> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f5554664400>, None, ...)]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f5554658cf8>

    def test_iframe_success(client, db_register,users, db_records,mocker):
        mock_render_template = MagicMock(return_value=jsonify({}))
        item = db_records[0][3]
        session = {
            "itemlogin_id":"1",
            "itemlogin_activity":db_register["activities"][1],
            "itemlogin_item":item,
            "itemlogin_steps":"test steps",
            "itemlogin_action_id":3,
            "itemlogin_cur_step":"item_login",
            "itemlogin_record":"test approval_record",
            "itemlogin_histories":"test histories",
            "itemlogin_res_check":0,
            "itemlogin_pid":db_records[0][0],
            "itemlogin_community_id":"comm01"
        }
        mocker.patch("weko_workflow.views.session",session)
        with patch("weko_workflow.views.render_template", mock_render_template):
            url = url_for("weko_workflow.iframe_success")
            res = client.get(url)
            mock_render_template.assert_called()
    
        session = {
            "itemlogin_id":"1",
            "itemlogin_activity":db_register["activities"][1],
            "itemlogin_item":{},
            "itemlogin_steps":"test steps",
            "itemlogin_action_id":3,
            "itemlogin_cur_step":"item_login",
            "itemlogin_record":"test approval_record",
            "itemlogin_histories":"test histories",
            "itemlogin_res_check":0,
            "itemlogin_pid":db_records[0][0],
        }
        mocker.patch("weko_workflow.views.session",session)
        with patch("weko_workflow.views.render_template", mock_render_template):
            url = url_for("weko_workflow.iframe_success")
>           res = client.get(url)

tests/test_views.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:342: in iframe_success
    activity.activity_id, action_id, activity.action_order)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f55546a6470>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f55546a69b0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_init_activity_acl[0-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 0, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(client, users, users_index, status_code,db_register):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:332: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
________________________ test_init_activity_acl[1-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(client, users, users_index, status_code,db_register):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:332: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
________________________ test_init_activity_acl[2-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(client, users, users_index, status_code,db_register):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:332: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
________________________ test_init_activity_acl[3-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 3, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(client, users, users_index, status_code,db_register):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:332: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
________________________ test_init_activity_acl[4-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 4, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(client, users, users_index, status_code,db_register):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:332: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
________________________ test_init_activity_acl[5-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 5, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(client, users, users_index, status_code,db_register):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:332: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
________________________ test_init_activity_acl[6-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(client, users, users_index, status_code,db_register):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:332: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
__________________________ test_init_activity[0-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 0, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:348: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
__________________________ test_init_activity[1-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:348: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
__________________________ test_init_activity[2-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:348: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
__________________________ test_init_activity[3-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 3, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:348: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
__________________________ test_init_activity[4-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 4, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:348: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
__________________________ test_init_activity[5-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 5, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:348: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
__________________________ test_init_activity[6-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity(client, users,users_index, status_code,db_register):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': db_register['workflow'].id, 'flow_id': db_register['flow_define'].id}
        res = client.post(url, json=input)
>       assert res.status_code == status_code
E       assert 500 == 200
E         +500
E         -200

tests/test_views.py:348: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:528 sqlalchemy error: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'date': '2023-03-25', 'activity_count': 1}]]
_________________________ test_previous_action[0-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=0
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=-1
        res = previous_action(activity_id="2", action_id=1, req=-1)
        data = response_data(res[0])
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # not pre_action
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        with patch("weko_workflow.views.Flow.get_previous_flow_action", return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        # not exist activity_detail
        url = url_for('weko_workflow.previous_action',
                      activity_id='1', action_id=1, req=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:731: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1069: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554d42db70>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f554d42d940> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1743 previous_action: argument error
ERROR    flask.app:views.py:1749 previous_action: test error
_________________________ test_previous_action[3-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=0
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=-1
        res = previous_action(activity_id="2", action_id=1, req=-1)
        data = response_data(res[0])
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # not pre_action
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        with patch("weko_workflow.views.Flow.get_previous_flow_action", return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        # not exist activity_detail
        url = url_for('weko_workflow.previous_action',
                      activity_id='1', action_id=1, req=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:731: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1063: in decorated_function
    if check_authority_by_admin(activity_detail):
weko_workflow/utils.py:3675: in check_authority_by_admin
    if activity.activity_login_user in community_user_ids:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f5554aa9278>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f5555405518> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1743 previous_action: argument error
ERROR    flask.app:views.py:1749 previous_action: test error
_________________________ test_previous_action[4-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=0
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=-1
        res = previous_action(activity_id="2", action_id=1, req=-1)
        data = response_data(res[0])
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # not pre_action
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        with patch("weko_workflow.views.Flow.get_previous_flow_action", return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        # not exist activity_detail
        url = url_for('weko_workflow.previous_action',
                      activity_id='1', action_id=1, req=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:731: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1069: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554f1fdf98>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f5550fee160> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1743 previous_action: argument error
ERROR    flask.app:views.py:1749 previous_action: test error
_________________________ test_previous_action[5-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=0
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=-1
        res = previous_action(activity_id="2", action_id=1, req=-1)
        data = response_data(res[0])
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # not pre_action
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        with patch("weko_workflow.views.Flow.get_previous_flow_action", return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        # not exist activity_detail
        url = url_for('weko_workflow.previous_action',
                      activity_id='1', action_id=1, req=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:731: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1069: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f555057d6d8>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f555057dc18> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1743 previous_action: argument error
ERROR    flask.app:views.py:1749 previous_action: test error
___________________________ test_next_action[0-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f554acccd68> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f554ace17f0>, None, ...)]
users_index = 0, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f554acedd68>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:912: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1069: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554aa213c8>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f554aa215c0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1216 next_action: argument error
___________________________ test_next_action[1-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f554aa3dfd0> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f554aa7cb38>, None, ...)]
users_index = 1, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f554aa859e8>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7)
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # action: item register
        ## not exist pid_without_ver
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=3)
        update_activity_order("1",3,2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 500
        assert data["code"] == -1
        assert data["msg"] == "can not get pid_without_ver"
        ## not exist record
        with patch("weko_workflow.views.WekoRecord.get_record_by_pid",return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get record"
    
        with patch("weko_workflow.views.PersistentIdentifier.get_by_object",side_effect=PIDDoesNotExistError("recid","wrong value")):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get PersistentIdentifier"
        with patch("weko_workflow.views.WekoDeposit.get_record", return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get pid_without_ver"
        ## template_save = 1
        ### not in journal
        update_activity_order("2",3,2)
        input = {"temporary_save":1}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=3)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save=0
        ###x activity action update faild
        with patch("weko_workflow.views.WorkActivity.upt_activity_action",return_value=False):
            update_activity_order("2",3,2)
            input = {"temporary_save":0}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == ""
    
        # action: oa policy
        ## temporary_save = 1
        ### in journal
        update_activity_order("2",6,3)
        input = {"temporary_save":1,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save = 0
        update_activity_order("2",6,3)
        input = {"temporary_save":0,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: item link
        ## temporary_save = 0
        ### exist pid_without_ver, exist link_data
        update_activity_order("2",5,4)
        input = {
            "temporary_save":0,
            "link_data":[
                {"item_id":"1","item_title":"test item1","sele_id":"relateTo"}
            ]
        }
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ####x raise except
        update_activity_order("2",5,4)
        err_msg = "test update error"
        with patch("weko_workflow.views.ItemLink.update",return_value=err_msg):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == err_msg
        ## temporary_save = 1
        update_activity_order("2",5,4)
        input = {
            "temporary_save":1,
            "link_data":[]
        }
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: identifier grant
        ## exist identifier_select
        ###x temporary_save = 1
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ### temporary_save = 0
        #### select NotGrant
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        update_activity_order("2",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _old_v
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None, None)):
            update_activity_order("2",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="2", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        ###### _old_v & _old_v = _new_v
        update_activity_order("7",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="7", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ##### item_id == pid_without_ver
        ###### _value
        update_activity_order("6",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="6", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _value
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None,None)):
            update_activity_order("6",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="6", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        #### select not Not_Grant
        #####x error_list is str
        input = {
            "temporary_save":0,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        test_msg = _('Cannot register selected DOI for current Item Type of this '
                     'item.')
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == test_msg
    
        #####x error_list
        mock_previous_action = mocker.patch("weko_workflow.views.previous_action",return_value=make_response())
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        ##### error_list is not str and error_list=False
        url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ###### item_id
        ####### deposit and pid_without_ver and not recid
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ####### not (deposit and pid_without_ver and not recid)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
    
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        ## not exist identifier_select & not temporary_save
        input = {
            "temporary_save":0,
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        ### _value and _type
        ####x error_list is str
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] ==-1
            assert data["msg"] == test_msg
        ####x error_list is not str & error_list = True
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        #### error_list is not str & error_list = False
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ### not (_value and _type)
        url = url_for("weko_workflow.next_action",
                      activity_id="3", action_id=7)
        update_activity_order("3",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"]==0
        assert data["msg"] == "success"
    
        ## next_action_handler is None
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=None
        db.session.merge(activity_action)
        db.session.commit()
        url = url_for("weko_workflow.next_action",
                      activity_id="2",action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data=response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get next_action_handler"
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=-1
        db.session.merge(activity_action)
        db.session.commit()
    
        ## exist next_flow_action.action_roles
        flow_action_role = FlowActionRole(
>           flow_action_id=db_register_fullaction["flow_actions"][5].id,
            action_role=None,
            action_user=1
        )

tests/test_views.py:1325: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae45be0; FlowAction>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554aaabef0>
attribute_names = {'action_condition', 'action_date', 'action_id', 'action_order', 'action_status', 'action_version', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <FlowAction at 0x7f554aaab080> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1216 next_action: argument error
ERROR    flask.app:views.py:1224 next_action: can not get activity_detail
ERROR    flask.app:views.py:1232 next_action: can not get schema by action_id
ERROR    flask.app:views.py:1237 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    flask.app:views.py:1298 next_action: can not get pid_without_ver
ERROR    flask.app:views.py:1306 next_action: can not get record
ERROR    flask.app:views.py:1290 can not get PersistentIdentifier
ERROR    flask.app:views.py:1298 next_action: can not get pid_without_ver
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:views.py:1375 next_action: can not get next_action_handler
___________________________ test_next_action[2-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f554c62ffd0> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f554c54c9b0>, None, ...)]
users_index = 2, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f554c9d30f0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7)
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # action: item register
        ## not exist pid_without_ver
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=3)
        update_activity_order("1",3,2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 500
        assert data["code"] == -1
        assert data["msg"] == "can not get pid_without_ver"
        ## not exist record
        with patch("weko_workflow.views.WekoRecord.get_record_by_pid",return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get record"
    
        with patch("weko_workflow.views.PersistentIdentifier.get_by_object",side_effect=PIDDoesNotExistError("recid","wrong value")):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get PersistentIdentifier"
        with patch("weko_workflow.views.WekoDeposit.get_record", return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get pid_without_ver"
        ## template_save = 1
        ### not in journal
        update_activity_order("2",3,2)
        input = {"temporary_save":1}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=3)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save=0
        ###x activity action update faild
        with patch("weko_workflow.views.WorkActivity.upt_activity_action",return_value=False):
            update_activity_order("2",3,2)
            input = {"temporary_save":0}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == ""
    
        # action: oa policy
        ## temporary_save = 1
        ### in journal
        update_activity_order("2",6,3)
        input = {"temporary_save":1,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save = 0
        update_activity_order("2",6,3)
        input = {"temporary_save":0,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: item link
        ## temporary_save = 0
        ### exist pid_without_ver, exist link_data
        update_activity_order("2",5,4)
        input = {
            "temporary_save":0,
            "link_data":[
                {"item_id":"1","item_title":"test item1","sele_id":"relateTo"}
            ]
        }
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ####x raise except
        update_activity_order("2",5,4)
        err_msg = "test update error"
        with patch("weko_workflow.views.ItemLink.update",return_value=err_msg):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == err_msg
        ## temporary_save = 1
        update_activity_order("2",5,4)
        input = {
            "temporary_save":1,
            "link_data":[]
        }
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: identifier grant
        ## exist identifier_select
        ###x temporary_save = 1
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ### temporary_save = 0
        #### select NotGrant
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        update_activity_order("2",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _old_v
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None, None)):
            update_activity_order("2",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="2", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        ###### _old_v & _old_v = _new_v
        update_activity_order("7",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="7", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ##### item_id == pid_without_ver
        ###### _value
        update_activity_order("6",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="6", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _value
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None,None)):
            update_activity_order("6",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="6", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        #### select not Not_Grant
        #####x error_list is str
        input = {
            "temporary_save":0,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        test_msg = _('Cannot register selected DOI for current Item Type of this '
                     'item.')
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == test_msg
    
        #####x error_list
        mock_previous_action = mocker.patch("weko_workflow.views.previous_action",return_value=make_response())
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        ##### error_list is not str and error_list=False
        url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ###### item_id
        ####### deposit and pid_without_ver and not recid
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ####### not (deposit and pid_without_ver and not recid)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
    
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        ## not exist identifier_select & not temporary_save
        input = {
            "temporary_save":0,
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        ### _value and _type
        ####x error_list is str
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] ==-1
            assert data["msg"] == test_msg
        ####x error_list is not str & error_list = True
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        #### error_list is not str & error_list = False
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ### not (_value and _type)
        url = url_for("weko_workflow.next_action",
                      activity_id="3", action_id=7)
        update_activity_order("3",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"]==0
        assert data["msg"] == "success"
    
        ## next_action_handler is None
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=None
        db.session.merge(activity_action)
        db.session.commit()
        url = url_for("weko_workflow.next_action",
                      activity_id="2",action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data=response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get next_action_handler"
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=-1
        db.session.merge(activity_action)
        db.session.commit()
    
        ## exist next_flow_action.action_roles
        flow_action_role = FlowActionRole(
>           flow_action_id=db_register_fullaction["flow_actions"][5].id,
            action_role=None,
            action_user=1
        )

tests/test_views.py:1325: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae45be0; FlowAction>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554b5bb5c0>
attribute_names = {'action_condition', 'action_date', 'action_id', 'action_order', 'action_status', 'action_version', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <FlowAction at 0x7f554b5bb358> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1216 next_action: argument error
ERROR    flask.app:views.py:1224 next_action: can not get activity_detail
ERROR    flask.app:views.py:1232 next_action: can not get schema by action_id
ERROR    flask.app:views.py:1237 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    flask.app:views.py:1298 next_action: can not get pid_without_ver
ERROR    flask.app:views.py:1306 next_action: can not get record
ERROR    flask.app:views.py:1290 can not get PersistentIdentifier
ERROR    flask.app:views.py:1298 next_action: can not get pid_without_ver
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:views.py:1375 next_action: can not get next_action_handler
___________________________ test_next_action[3-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f554d64dd68> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f5555880668>, None, ...)]
users_index = 3, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f554cd75390>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:912: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1063: in decorated_function
    if check_authority_by_admin(activity_detail):
weko_workflow/utils.py:3675: in check_authority_by_admin
    if activity.activity_login_user in community_user_ids:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f5555498ef0>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f554d3513c8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1216 next_action: argument error
___________________________ test_next_action[4-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f554e2c61d0> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f554d46f9e8>, None, ...)]
users_index = 4, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f554c000be0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:912: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1069: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554e914c18>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f554e9147b8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1216 next_action: argument error
___________________________ test_next_action[5-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f55564b7c18> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f555106ca58>, None, ...)]
users_index = 5, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f555617fd30>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:912: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1069: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554e85db70>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f554e85d160> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1216 next_action: argument error
___________________________ test_next_action[6-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f554aab3dd8> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f554b74b5c0>, None, ...)]
users_index = 6, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f554b756630>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7)
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # action: item register
        ## not exist pid_without_ver
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=3)
        update_activity_order("1",3,2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 500
        assert data["code"] == -1
        assert data["msg"] == "can not get pid_without_ver"
        ## not exist record
        with patch("weko_workflow.views.WekoRecord.get_record_by_pid",return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get record"
    
        with patch("weko_workflow.views.PersistentIdentifier.get_by_object",side_effect=PIDDoesNotExistError("recid","wrong value")):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get PersistentIdentifier"
        with patch("weko_workflow.views.WekoDeposit.get_record", return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get pid_without_ver"
        ## template_save = 1
        ### not in journal
        update_activity_order("2",3,2)
        input = {"temporary_save":1}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=3)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save=0
        ###x activity action update faild
        with patch("weko_workflow.views.WorkActivity.upt_activity_action",return_value=False):
            update_activity_order("2",3,2)
            input = {"temporary_save":0}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == ""
    
        # action: oa policy
        ## temporary_save = 1
        ### in journal
        update_activity_order("2",6,3)
        input = {"temporary_save":1,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save = 0
        update_activity_order("2",6,3)
        input = {"temporary_save":0,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: item link
        ## temporary_save = 0
        ### exist pid_without_ver, exist link_data
        update_activity_order("2",5,4)
        input = {
            "temporary_save":0,
            "link_data":[
                {"item_id":"1","item_title":"test item1","sele_id":"relateTo"}
            ]
        }
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ####x raise except
        update_activity_order("2",5,4)
        err_msg = "test update error"
        with patch("weko_workflow.views.ItemLink.update",return_value=err_msg):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == err_msg
        ## temporary_save = 1
        update_activity_order("2",5,4)
        input = {
            "temporary_save":1,
            "link_data":[]
        }
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: identifier grant
        ## exist identifier_select
        ###x temporary_save = 1
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ### temporary_save = 0
        #### select NotGrant
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        update_activity_order("2",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _old_v
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None, None)):
            update_activity_order("2",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="2", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        ###### _old_v & _old_v = _new_v
        update_activity_order("7",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="7", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ##### item_id == pid_without_ver
        ###### _value
        update_activity_order("6",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="6", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _value
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None,None)):
            update_activity_order("6",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="6", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        #### select not Not_Grant
        #####x error_list is str
        input = {
            "temporary_save":0,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        test_msg = _('Cannot register selected DOI for current Item Type of this '
                     'item.')
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == test_msg
    
        #####x error_list
        mock_previous_action = mocker.patch("weko_workflow.views.previous_action",return_value=make_response())
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        ##### error_list is not str and error_list=False
        url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ###### item_id
        ####### deposit and pid_without_ver and not recid
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ####### not (deposit and pid_without_ver and not recid)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
    
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        ## not exist identifier_select & not temporary_save
        input = {
            "temporary_save":0,
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        ### _value and _type
        ####x error_list is str
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] ==-1
            assert data["msg"] == test_msg
        ####x error_list is not str & error_list = True
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        #### error_list is not str & error_list = False
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ### not (_value and _type)
        url = url_for("weko_workflow.next_action",
                      activity_id="3", action_id=7)
        update_activity_order("3",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"]==0
        assert data["msg"] == "success"
    
        ## next_action_handler is None
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=None
        db.session.merge(activity_action)
        db.session.commit()
        url = url_for("weko_workflow.next_action",
                      activity_id="2",action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data=response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get next_action_handler"
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=-1
        db.session.merge(activity_action)
        db.session.commit()
    
        ## exist next_flow_action.action_roles
        flow_action_role = FlowActionRole(
>           flow_action_id=db_register_fullaction["flow_actions"][5].id,
            action_role=None,
            action_user=1
        )

tests/test_views.py:1325: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae45be0; FlowAction>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554b9dbb70>
attribute_names = {'action_condition', 'action_date', 'action_id', 'action_order', 'action_status', 'action_version', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <FlowAction at 0x7f554b9db8d0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1216 next_action: argument error
ERROR    flask.app:views.py:1224 next_action: can not get activity_detail
ERROR    flask.app:views.py:1232 next_action: can not get schema by action_id
ERROR    flask.app:views.py:1237 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    flask.app:views.py:1298 next_action: can not get pid_without_ver
ERROR    flask.app:views.py:1306 next_action: can not get record
ERROR    flask.app:views.py:1290 can not get PersistentIdentifier
ERROR    flask.app:views.py:1298 next_action: can not get pid_without_ver
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:views.py:1375 next_action: can not get next_action_handler
__________________________ test_cancel_action[0-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f555b464080> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f554b5179b0>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f554a5cd1e0>
users_index = 0, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f5555c9ae48>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action(client, users, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        #mocker.patch("weko_workflow.views.remove_file_cancel_action")
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        url = url_for('weko_workflow.cancel_action',
                  activity_id='1', action_id=1)
        with patch("weko_workflow.views.CancelSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
>           res = client.post(url, json=input)

tests/test_views.py:1681: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1069: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554f5affd0>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f554f5af6a0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1982 cancel_action: argument error
ERROR    flask.app:views.py:1989 cancel_action: test error
__________________________ test_cancel_action[3-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f5548998cf8> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f55489411d0>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f55489720d0>
users_index = 3, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f55489ab550>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action(client, users, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        #mocker.patch("weko_workflow.views.remove_file_cancel_action")
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        url = url_for('weko_workflow.cancel_action',
                  activity_id='1', action_id=1)
        with patch("weko_workflow.views.CancelSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
>           res = client.post(url, json=input)

tests/test_views.py:1681: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1063: in decorated_function
    if check_authority_by_admin(activity_detail):
weko_workflow/utils.py:3675: in check_authority_by_admin
    if activity.activity_login_user in community_user_ids:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f55489ec438>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f55489ec828> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1982 cancel_action: argument error
ERROR    flask.app:views.py:1989 cancel_action: test error
__________________________ test_cancel_action[4-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f55488dd9b0> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f55488b5dd8>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f55488d7378>
users_index = 4, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f55487e1438>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action(client, users, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        #mocker.patch("weko_workflow.views.remove_file_cancel_action")
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        url = url_for('weko_workflow.cancel_action',
                  activity_id='1', action_id=1)
        with patch("weko_workflow.views.CancelSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
>           res = client.post(url, json=input)

tests/test_views.py:1681: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1069: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f55487e4b70>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f55487e4240> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1982 cancel_action: argument error
ERROR    flask.app:views.py:1989 cancel_action: test error
__________________________ test_cancel_action[5-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f5548997cc0> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f554d6abf60>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f55497d18c8>
users_index = 5, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f554f514668>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action(client, users, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        #mocker.patch("weko_workflow.views.remove_file_cancel_action")
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        url = url_for('weko_workflow.cancel_action',
                  activity_id='1', action_id=1)
        with patch("weko_workflow.views.CancelSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
>           res = client.post(url, json=input)

tests/test_views.py:1681: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1069: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae075c0; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554ba457b8>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f554ba45550> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1982 cancel_action: argument error
ERROR    flask.app:views.py:1989 cancel_action: test error
__________________________ test_lock_activity[0-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1878: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[1-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1878: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[2-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1878: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[3-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1878: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[4-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1878: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[5-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1878: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_lock_activity[6-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:1878: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_get_feedback_maillist[0-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556adc36d8; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f553e8a15f8>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f553e8a15c0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2291 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[1-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556adc36d8; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f553e2aa5c0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f553e2aabe0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2291 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[2-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556adc36d8; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f553dd97be0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f553dd978d0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2291 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[3-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556adc36d8; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f553d847048>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f553d847a90> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2291 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[4-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556adc36d8; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f553d4ade48>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f553d4ade10> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2291 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[5-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556adc36d8; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f553e2ed048>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f553e2ed780> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2291 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[6-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556adc36d8; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f554a97e438>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f554a97ea58> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2291 get_feedback_maillist: argument error
_________________________ test_display_activity[0-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f5554a8ed68>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7f553d7e3ef0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_id": -1, "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
                                    res = client.post(url, query_string=input)
                                    mock_render_template.assert_called()
    
        #activity_id is not String
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.type_null_check',return_value=False):
                with patch('weko_workflow.views.item_login',return_value=(template_url,
                        need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                        files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                    with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                        with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                            with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                                with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                    with patch('weko_workflow.views.render_template', mock_render_template):
                                        res = client.post(url, query_string=input)
                                        mock_render_template.assert_called()
    
        #activity_id is include "?"
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-?10001')
        input = {}
>       action_endpoint = cur_action.action_endpoint

tests/test_views.py:2525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae34198; Action>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f5548695390>
attribute_names = {'action_desc', 'action_endpoint', 'action_is_need_agree', 'action_lastdate', 'action_makedate', 'action_name', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Action at 0x7f555d4f5898> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:744 display_activity: argument error
_________________________ test_display_activity[1-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f553f8e84a8>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7f5545904358>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_id": -1, "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
                                    res = client.post(url, query_string=input)
                                    mock_render_template.assert_called()
    
        #activity_id is not String
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.type_null_check',return_value=False):
                with patch('weko_workflow.views.item_login',return_value=(template_url,
                        need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                        files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                    with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                        with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                            with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                                with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                    with patch('weko_workflow.views.render_template', mock_render_template):
                                        res = client.post(url, query_string=input)
                                        mock_render_template.assert_called()
    
        #activity_id is include "?"
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-?10001')
        input = {}
>       action_endpoint = cur_action.action_endpoint

tests/test_views.py:2525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae34198; Action>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f553d0cf9e8>
attribute_names = {'action_desc', 'action_endpoint', 'action_is_need_agree', 'action_lastdate', 'action_makedate', 'action_name', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Action at 0x7f553d0cfcf8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:744 display_activity: argument error
_________________________ test_display_activity[2-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f553d3dad30>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7f5551439438>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_id": -1, "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
                                    res = client.post(url, query_string=input)
                                    mock_render_template.assert_called()
    
        #activity_id is not String
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.type_null_check',return_value=False):
                with patch('weko_workflow.views.item_login',return_value=(template_url,
                        need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                        files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                    with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                        with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                            with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                                with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                    with patch('weko_workflow.views.render_template', mock_render_template):
                                        res = client.post(url, query_string=input)
                                        mock_render_template.assert_called()
    
        #activity_id is include "?"
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-?10001')
        input = {}
>       action_endpoint = cur_action.action_endpoint

tests/test_views.py:2525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae34198; Action>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f553e2ac940>
attribute_names = {'action_desc', 'action_endpoint', 'action_is_need_agree', 'action_lastdate', 'action_makedate', 'action_name', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Action at 0x7f553e2ace10> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:744 display_activity: argument error
_________________________ test_display_activity[3-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f55399ffda0>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7f5539a01ac8>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_id": -1, "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
                                    res = client.post(url, query_string=input)
                                    mock_render_template.assert_called()
    
        #activity_id is not String
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.type_null_check',return_value=False):
                with patch('weko_workflow.views.item_login',return_value=(template_url,
                        need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                        files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                    with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                        with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                            with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                                with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                    with patch('weko_workflow.views.render_template', mock_render_template):
                                        res = client.post(url, query_string=input)
                                        mock_render_template.assert_called()
    
        #activity_id is include "?"
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-?10001')
        input = {}
>       action_endpoint = cur_action.action_endpoint

tests/test_views.py:2525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae34198; Action>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f55399ff2b0>
attribute_names = {'action_desc', 'action_endpoint', 'action_is_need_agree', 'action_lastdate', 'action_makedate', 'action_name', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Action at 0x7f55399ff4a8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:744 display_activity: argument error
_________________________ test_display_activity[4-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f55395e2c18>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7f5539666be0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_id": -1, "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
                                    res = client.post(url, query_string=input)
                                    mock_render_template.assert_called()
    
        #activity_id is not String
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.type_null_check',return_value=False):
                with patch('weko_workflow.views.item_login',return_value=(template_url,
                        need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                        files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                    with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                        with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                            with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                                with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                    with patch('weko_workflow.views.render_template', mock_render_template):
                                        res = client.post(url, query_string=input)
                                        mock_render_template.assert_called()
    
        #activity_id is include "?"
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-?10001')
        input = {}
>       action_endpoint = cur_action.action_endpoint

tests/test_views.py:2525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae34198; Action>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f55395aa8d0>
attribute_names = {'action_desc', 'action_endpoint', 'action_is_need_agree', 'action_lastdate', 'action_makedate', 'action_name', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Action at 0x7f55395aada0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:744 display_activity: argument error
_________________________ test_display_activity[5-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f5538fb5780>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7f5538fdbb38>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_id": -1, "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
                                    res = client.post(url, query_string=input)
                                    mock_render_template.assert_called()
    
        #activity_id is not String
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.type_null_check',return_value=False):
                with patch('weko_workflow.views.item_login',return_value=(template_url,
                        need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                        files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                    with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                        with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                            with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                                with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                    with patch('weko_workflow.views.render_template', mock_render_template):
                                        res = client.post(url, query_string=input)
                                        mock_render_template.assert_called()
    
        #activity_id is include "?"
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-?10001')
        input = {}
>       action_endpoint = cur_action.action_endpoint

tests/test_views.py:2525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae34198; Action>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f5538f07828>
attribute_names = {'action_desc', 'action_endpoint', 'action_is_need_agree', 'action_lastdate', 'action_makedate', 'action_name', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Action at 0x7f5538f07b00> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:744 display_activity: argument error
_________________________ test_display_activity[6-200] _________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f55618ca5c0>
redis_connect = <simplekv.memory.redisstore.RedisStore object at 0x7f5539201128>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_display_activity(client, users, db_register, users_index, status_code,mocker,redis_connect):
        login(client=client, email=users[users_index]['email'])
    
        workflow_detail = WorkFlow.query.filter_by(id=1).one_or_none()
        mock_render_template = MagicMock(return_value=jsonify({}))
    
        activity_detail = Activity.query.filter_by(activity_id='A-00000001-10001').one_or_none()
        #activity_detail = Activity.query.filter_by(activity_id='1').one_or_none()
        cur_action = activity_detail.action
        action_endpoint = 'item_login'
        #action_endpoint = cur_action.action_endpoint
        action_id = cur_action.id
        histories = 1
        item_metadata = ItemMetadata()
        item_metadata.id = '37075580-8442-4402-beee-05f62e6e1dc2'
        # item_metadata = {'created':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),'updated':datetime.strptime("2022-09-22 05:09:54.677307", "%Y-%m-%d %H:%M:%S.%f"),
        #                 'id':'37075580-8442-4402-beee-05f62e6e1dc2','item_type_id':15,'json': {"id": "1", "pid": {"type": "depid", "value": "1", "revision_id": 0}, "lang": "ja", "owner": "1", "title": "title", "owners": [1], "status": "published", "$schema": "/items/jsonschema/15", "pubdate": "2022-08-20", "created_by": 1, "owners_ext": {"email": "wekosoftware@nii.ac.jp", "username": "", "displayname": ""}, "shared_user_id": -1, "item_1617186331708": [{"subitem_1551255647225": "ff", "subitem_1551255648112": "ja"}], "item_1617258105262": {"resourceuri": "http://purl.org/coar/resource_type/c_5794", "resourcetype": "conference paper"}}
        #                 ,'version_id':3}
        item = None
        steps = 1
        temporary_comment = 1
    
    
        test_pid = PersistentIdentifier()
        test_pid.pid_value = '1'
        # test_pid= dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id=3, pid_type='recid',pid_value='1',pid_provider='',status='R',object_type='rec',object_uuid='37075580-8442-4402-beee-05f62e6e1dc2')
        test_comm= Community()
        test_comm.id = 'test'
        # test_comm=  dict(created=datetime.strptime("2022-09-22 05:09:48.085724", "%Y-%m-%d %H:%M:%S.%f"),updated=datetime.strptime("2022-09-22 05:09:48.085747", "%Y-%m-%d %H:%M:%S.%f"),
        #             id='test',id_role=1,id_user=1,title='test',description='',page='',curation_policy='',community_header='',community_footer='',last_record_accepted=datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S"),
        #             logo_ext='',ranking=0,fixed_points=0,deleted_at=None,root_node_id=1557819733276)
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        identifier = {'action_identifier_select': '',
                    'action_identifier_jalc_doi': '',
                    'action_identifier_jalc_cr_doi': '',
                    'action_identifier_jalc_dc_doi': '',
                    'action_identifier_ndl_jalc_doi': ''
                    }
    
    
        template_url = "weko_items_ui/iframe/item_edit.html"
        need_file = False
        need_billing_file = False
        record = {}
        json_schema = "test"
        schema_form = "test"
        item_save_uri = ""
        files = []
        endpoints = {}
        need_thumbnail = False
        files_thumbnail = []
        allow_multi_thumbnail = False
    
        license_list = []
        record_detail_alt = dict(
            record=None,
            files=None,
            files_thumbnail=None,
            pid=None)
    
        mocker.patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                    return_value=(roles, action_users))
        mocker.patch('weko_workflow.views.WorkActivity.get_action_identifier_grant',return_value=identifier)
        mocker.patch('weko_workflow.views.check_authority_action',return_value=1)
        mocker.patch('weko_workflow.views.set_files_display_type',return_value=[])
        mocker.patch('weko_workflow.views.WorkActivity.get_action_journal')
        mocker.patch('weko_workflow.views.get_files_and_thumbnail',return_value=(["test1","test2"],files_thumbnail))
        mocker.patch('weko_workflow.views.get_usage_data')
        mocker.patch('weko_workflow.views.is_usage_application_item_type')
        mocker.patch('weko_theme.views.get_design_layout',return_value=(None,True))
        mocker.patch('weko_workflow.views.RedisConnection.connection',return_value=redis_connect)
    
        #regular
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                   return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                   steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.item_login',return_value=(template_url,
                    need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                    files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                    with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                        with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                            with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                with patch('weko_workflow.views.render_template', mock_render_template):
                                    res = client.post(url, query_string=input)
                                    mock_render_template.assert_called()
    
        #activity_id is not String
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-10001')
        input = {}
        action_endpoint = cur_action.action_endpoint
        item = None
    
        with patch('weko_workflow.views.get_activity_display_info',
                return_value=(action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)):
            with patch('weko_workflow.views.type_null_check',return_value=False):
                with patch('weko_workflow.views.item_login',return_value=(template_url,
                        need_file,need_billing_file,record,json_schema,schema_form,item_save_uri,
                        files,endpoints,need_thumbnail,files_thumbnail,allow_multi_thumbnail)):
                    with patch('weko_workflow.views.get_pid_and_record',return_value=(test_pid,None)):
                        with patch('weko_workflow.views.GetCommunity.get_community_by_id',return_value=test_comm):
                            with patch('weko_records_ui.utils.get_list_licence',return_value=license_list):
                                with patch('weko_workflow.views.get_main_record_detail',return_value=record_detail_alt):
                                    with patch('weko_workflow.views.render_template', mock_render_template):
                                        res = client.post(url, query_string=input)
                                        mock_render_template.assert_called()
    
        #activity_id is include "?"
        url = url_for('weko_workflow.display_activity', activity_id='A-00000001-?10001')
        input = {}
>       action_endpoint = cur_action.action_endpoint

tests/test_views.py:2525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f556ae34198; Action>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f553922b8d0>
attribute_names = {'action_desc', 'action_endpoint', 'action_is_need_agree', 'action_lastdate', 'action_makedate', 'action_name', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Action at 0x7f55391632b0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:744 display_activity: argument error
__ test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 0, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1084: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2193: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 1, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1064: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2193: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 2, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1064: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2193: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 3, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1084: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2193: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 4, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1084: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2193: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 5, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1084: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2193: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 6, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1064: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2193: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_ test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data] _

guest = <FlaskClient <Flask 'testapp'>>
client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
input_data = {'passwd': 'DELETE'}, status_code = 500, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    def test_withdraw_confirm_exception2_guestlogin(guest, client, users, db_register_fullaction, input_data, status_code, code, msg):
        """Test of withdraw confirm."""
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                return_value=(roles, action_users)):
>               res = guest.post(url, json=input)

tests/test_views.py:3168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:146: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1084: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2193: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_1[1-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 403),
        (1, 200),
        (2, 200),
        (3, 403),
        (4, 403),
        (5, 403),
        (6, 200),
    ])
    def test_download_activitylog_1(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #1
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2739: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_1[2-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 403),
        (1, 200),
        (2, 200),
        (3, 403),
        (4, 403),
        (5, 403),
        (6, 200),
    ])
    def test_download_activitylog_1(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #1
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2739: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_1[6-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 403),
        (1, 200),
        (2, 200),
        (3, 403),
        (4, 403),
        (5, 403),
        (6, 200),
    ])
    def test_download_activitylog_1(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #1
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2739: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_2[1-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (1, 200),
        (2, 200),
        (6, 200),
    ])
    def test_download_activitylog_2(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #4
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2739: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_2[2-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (1, 200),
        (2, 200),
        (6, 200),
    ])
    def test_download_activitylog_2(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #4
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2739: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_2[6-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (1, 200),
        (2, 200),
        (6, 200),
    ])
    def test_download_activitylog_2(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #4
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2739: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  flask.app:ext.py:255 JSONSCHEMAS_HOST is set to localhost
=============================== warnings summary ===============================
../invenio-indexer/invenio_indexer/cli.py:108
  /code/modules/invenio-indexer/invenio_indexer/cli.py:108: DeprecationWarning: 'resultcallback' has been renamed to 'result_callback'. The old name will be removed in Click 8.1.
    @queue.resultcallback()

.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3: DeprecationWarning: 'werkzeug.contrib.cache' is deprecated as of version 0.15 and will be removed in version 1.0. It has moved to https://github.com/pallets/cachelib.
    from werkzeug.contrib.cache import NullCache, SimpleCache, FileSystemCache

.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

tests/test_admin.py: 572 warnings
tests/test_api.py: 156 warnings
tests/test_cli.py: 52 warnings
tests/test_romeo.py: 78 warnings
tests/test_sessions.py: 26 warnings
tests/test_tasks.py: 26 warnings
tests/test_utils.py: 2158 warnings
tests/test_views.py: 7878 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/invenio_admin/ext.py:73: PendingDeprecationWarning: Usage of model and modelview kwargs are deprecated in favor of view_class, args and kwargs.
    PendingDeprecationWarning

tests/test_admin.py: 22 warnings
tests/test_api.py: 6 warnings
tests/test_cli.py: 2 warnings
tests/test_romeo.py: 3 warnings
tests/test_sessions.py: 1 warning
tests/test_tasks.py: 1 warning
tests/test_utils.py: 83 warnings
tests/test_views.py: 303 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/flask_admin/model/base.py:1416: UserWarning: Fields missing from ruleset: created_userId,created_date,updated_userId,updated_date
    warnings.warn(text)

-- Docs: https://docs.pytest.org/en/stable/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                  Stmts   Miss Branch BrPart  Cover
-----------------------------------------------------------------------
weko_workflow/__init__.py                 4      0      0      0   100%
weko_workflow/admin.py                  223    101     72      8    52%
weko_workflow/api.py                   1215    402    414     86    64%
weko_workflow/bundles.py                 14      0      0      0   100%
weko_workflow/cli.py                    109     22     42     15    74%
weko_workflow/config.py                  90      0      0      0   100%
weko_workflow/errors.py                  18      0     10      0   100%
weko_workflow/ext.py                     21      1     10      2    90%
weko_workflow/models.py                 310     16     76      9    93%
weko_workflow/romeo.py                   22      0      0      0   100%
weko_workflow/schema/marshmallow.py      87      0     56      0   100%
weko_workflow/schema/utils.py            22      3     14      3    83%
weko_workflow/scopes.py                   6      0      0      0   100%
weko_workflow/sessions.py                13      5      4      1    53%
weko_workflow/tasks.py                    7      0      0      0   100%
weko_workflow/utils.py                 1855    557    812     65    67%
weko_workflow/version.py                  2      0      0      0   100%
weko_workflow/views.py                 1300    452    472     54    63%
-----------------------------------------------------------------------
TOTAL                                  5318   1559   1982    243    68%
Coverage XML written to file coverage.xml

=========================== short test summary info ============================
FAILED tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl[1-200]
FAILED tests/test_admin.py::TestFlowSettingView::test_update_flow - Attribute...
FAILED tests/test_admin.py::TestFlowSettingView::test_new_flow - AttributeErr...
FAILED tests/test_admin.py::TestFlowSettingView::test_del_flow - AttributeErr...
FAILED tests/test_admin.py::TestFlowSettingView::test_get_actions - Assertion...
FAILED tests/test_admin.py::TestFlowSettingView::test_upt_flow_action - Attri...
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl[1-200]
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_save_workflow_role
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_get_language_workflows
FAILED tests/test_cli.py::test_init_workflow_tables - assert ("(sqlite3.Integ...
FAILED tests/test_utils.py::test_item_metadata_validation - sqlalchemy.exc.St...
FAILED tests/test_utils.py::test_delete_bucket - sqlalchemy.exc.IntegrityErro...
FAILED tests/test_utils.py::test_set_bucket_default_size - AttributeError: 'R...
FAILED tests/test_utils.py::test_get_parent_pid_with_type - AttributeError: '...
FAILED tests/test_utils.py::test_prepare_edit_workflow - sqlalchemy.exc.State...
FAILED tests/test_utils.py::test_handle_finish_workflow - ModuleNotFoundError...
FAILED tests/test_utils.py::test_get_item_info - TypeError: not all arguments...
FAILED tests/test_utils.py::test_update_system_data_for_activity - assert '{"...
FAILED tests/test_utils.py::test_get_index_id - BaseException
FAILED tests/test_utils.py::test_make_activitylog_tsv - AttributeError: 'Base...
FAILED tests/test_views.py::test_iframe_success - sqlalchemy.orm.exc.Detached...
FAILED tests/test_views.py::test_init_activity_acl[0-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity_acl[1-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity_acl[2-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity_acl[3-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity_acl[4-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity_acl[5-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity_acl[6-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity[0-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity[1-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity[2-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity[3-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity[4-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity[5-200] - assert 500 == 200
FAILED tests/test_views.py::test_init_activity[6-200] - assert 500 == 200
FAILED tests/test_views.py::test_previous_action[0-200] - sqlalchemy.orm.exc....
FAILED tests/test_views.py::test_previous_action[3-200] - sqlalchemy.orm.exc....
FAILED tests/test_views.py::test_previous_action[4-200] - sqlalchemy.orm.exc....
FAILED tests/test_views.py::test_previous_action[5-200] - sqlalchemy.orm.exc....
FAILED tests/test_views.py::test_next_action[0-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[1-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[2-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[3-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[4-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[5-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[6-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_cancel_action[0-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_cancel_action[3-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_cancel_action[4-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_cancel_action[5-200] - sqlalchemy.orm.exc.De...
FAILED tests/test_views.py::test_lock_activity[0-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[1-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[2-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[3-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[4-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[5-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[6-200] - assert 400 == 200
FAILED tests/test_views.py::test_get_feedback_maillist[0-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[1-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[2-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[3-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[4-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[5-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[6-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_display_activity[0-200] - sqlalchemy.orm.exc...
FAILED tests/test_views.py::test_display_activity[1-200] - sqlalchemy.orm.exc...
FAILED tests/test_views.py::test_display_activity[2-200] - sqlalchemy.orm.exc...
FAILED tests/test_views.py::test_display_activity[3-200] - sqlalchemy.orm.exc...
FAILED tests/test_views.py::test_display_activity[4-200] - sqlalchemy.orm.exc...
FAILED tests/test_views.py::test_display_activity[5-200] - sqlalchemy.orm.exc...
FAILED tests/test_views.py::test_display_activity[6-200] - sqlalchemy.orm.exc...
FAILED tests/test_views.py::test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_download_activitylog_1[1-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_1[2-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_1[6-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_2[1-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_2[2-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_2[6-200] - AttributeErr...
========= 85 failed, 356 passed, 11370 warnings in 7324.42s (2:02:04) ==========
ERROR: InvocationError for command /code/modules/weko-workflow/.tox/c1/bin/pytest --cov=weko_workflow tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-config=tox.ini --basetemp=/code/modules/weko-workflow/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
