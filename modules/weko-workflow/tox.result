GLOB sdist-make: /code/modules/weko-workflow/setup.py
c1 inst-nodeps: /code/modules/weko-workflow/.tox/.tmp/package/1/weko-workflow-0.1.0.dev20170000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@98eb36e1dfc66256fa7ea62237e9879acb906e9d#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,iniconfig==1.1.1,intervals==0.8.0,invenio-access==1.1.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==6.1.2,pytest-cov==4.0.0,pytest-flask==0.15.1,pytest-invenio==1.3.1,pytest-mock==3.6.1,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,tika==2.6.0,toml==0.10.2,tomli==1.2.3,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_records&subdirectory=modules/weko-records,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://github.com/RCOSDP/weko.git@84633f34226891a4a701dee9c8eec64294b0446c#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,weko-workflow @ file:///code/modules/weko-workflow/.tox/.tmp/package/1/weko-workflow-0.1.0.dev20170000.zip,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='2585018988'
c1 run-test: commands[0] | pytest --cov=weko_workflow tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-report=html --cov-config=tox.ini --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-6.1.2, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-workflow/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-workflow
plugins: celery-4.4.4, flask-0.15.1, cov-4.0.0, mock-3.6.1, invenio-1.3.1
collecting ... collected 460 items

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest PASSED
tests/test_admin.py::TestFlowSettingView::test_index_acl[0-403] PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl_guest PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl[1-200] PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_update_delete PASSED
tests/test_admin.py::TestFlowSettingView::test_get_specified_properties PASSED
tests/test_admin.py::TestFlowSettingView::test_new_flow PASSED
tests/test_admin.py::TestFlowSettingView::test_del_flow PASSED
tests/test_admin.py::TestFlowSettingView::test_get_actions FAILED
tests/test_admin.py::TestFlowSettingView::test_upt_flow_action PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_index_acl_guest PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_index_acl[1-200] FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl_guest PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl[1-200] PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl[2-200] PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl_guest PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl[1-200] FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_delete_workflow_acl_guest PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_delete_workflow_acl[1-200] PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_get_name_display_hide PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_get_displays PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_save_workflow_role FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_get_language_workflows FAILED
tests/test_api.py::test_Flow_action PASSED
tests/test_api.py::test_Flow_get_flow_action_list PASSED
tests/test_api.py::test_WorkActivity_filter_by_date PASSED
tests/test_api.py::test_WorkActivity_get_all_activity_list PASSED
tests/test_api.py::test_WorkActivity_get_activity_index_search FAILED
tests/test_api.py::test_WorkActivity_upt_activity_detail FAILED
tests/test_api.py::test_WorkActivity_get_corresponding_usage_activities PASSED
tests/test_cli.py::test_workflow PASSED
tests/test_cli.py::test_init_workflow_tables FAILED
tests/test_romeo.py::test_search_romeo_jtitles PASSED
tests/test_romeo.py::test_search_romeo_issn PASSED
tests/test_romeo.py::test_search_romeo_jtitle PASSED
tests/test_sessions.py::test_upt_activity_item PASSED
tests/test_tasks.py::test_cancel_expired_usage_report_activities FAILED
tests/test_utils.py::test_get_current_language PASSED
tests/test_utils.py::test_get_term_and_condition_content PASSED
tests/test_utils.py::test_get_identifier_setting PASSED
tests/test_utils.py::test_saving_doi_pidstore PASSED
tests/test_utils.py::test_register_hdl PASSED
tests/test_utils.py::test_item_metadata_validation PASSED
tests/test_utils.py::test_item_metadata_validation_2 FAILED
tests/test_utils.py::test_merge_doi_error_list PASSED
tests/test_utils.py::test_validation_item_property PASSED
tests/test_utils.py::test_handle_check_required_data PASSED
tests/test_utils.py::test_handle_check_required_pattern_and_either FAILED
tests/test_utils.py::test_check_required_data PASSED
tests/test_utils.py::test_get_activity_id_of_record_without_version PASSED
tests/test_utils.py::test_check_suffix_identifier PASSED
tests/test_utils.py::test_get_sub_item_value PASSED
tests/test_utils.py::test_get_item_value_in_deep PASSED
tests/test_utils.py::test_delete_bucket FAILED
tests/test_utils.py::test_merge_buckets_by_records[True] PASSED
tests/test_utils.py::test_merge_buckets_by_records[False] PASSED
tests/test_utils.py::test_merge_buckets_by_records_error PASSED
tests/test_utils.py::test_set_bucket_default_size FAILED
tests/test_utils.py::test_is_show_autofill_metadata PASSED
tests/test_utils.py::test_is_hidden_pubdate PASSED
tests/test_utils.py::test_get_parent_pid_with_type FAILED
tests/test_utils.py::test_filter_all_condition PASSED
tests/test_utils.py::test_filter_condition PASSED
tests/test_utils.py::test_get_actionid PASSED
tests/test_utils.py::test_convert_record_to_item_metadata PASSED
tests/test_utils.py::test_prepare_edit_workflow FAILED
tests/test_utils.py::test_handle_finish_workflow FAILED
tests/test_utils.py::test_delete_cache_data PASSED
tests/test_utils.py::test_update_cache_data PASSED
tests/test_utils.py::test_get_cache_data PASSED
tests/test_utils.py::test_check_an_item_is_locked PASSED
tests/test_utils.py::test_get_accoutn_info PASSED
tests/test_utils.py::test_check_existed_doi PASSED
tests/test_utils.py::test_get_url_root FAILED
tests/test_utils.py::test_get_record_by_root_ver PASSED
tests/test_utils.py::test_get_disptype_and_ver_in_metainfo PASSED
tests/test_utils.py::test_set_files_display_type PASSED
tests/test_utils.py::test_get_thumbnails PASSED
tests/test_utils.py::test_get_allow_multi_thumbnail PASSED
tests/test_utils.py::test_is_usage_application_item_type PASSED
tests/test_utils.py::test_is_usage_application PASSED
tests/test_utils.py::test_send_mail_reminder PASSED
tests/test_utils.py::test_send_mail_approval_done PASSED
tests/test_utils.py::test_send_mail_registration_done PASSED
tests/test_utils.py::test_send_mail_request_approval PASSED
tests/test_utils.py::test_send_mail PASSED
tests/test_utils.py::test_email_pattern_registration_done PASSED
tests/test_utils.py::test_email_pattern_request_approval PASSED
tests/test_utils.py::test_email_pattern_approval_done PASSED
tests/test_utils.py::test_get_mail_data PASSED
tests/test_utils.py::test_get_subject_and_content PASSED
tests/test_utils.py::test_get_file_path PASSED
tests/test_utils.py::test_replace_characters PASSED
tests/test_utils.py::test_register_info PASSED
tests/test_utils.py::test_get_approval_dates PASSED
tests/test_utils.py::test_get_item_info FAILED
tests/test_utils.py::test_get_site_info_name PASSED
tests/test_utils.py::test_get_default_mail_sender PASSED
tests/test_utils.py::test_set_mail_info PASSED
tests/test_utils.py::test_process_send_reminder_mail PASSED
tests/test_utils.py::test_process_send_notification_mail PASSED
tests/test_utils.py::test_get_application_and_approval_date PASSED
tests/test_utils.py::test_get_workflow_item_type_names PASSED
tests/test_utils.py::test_create_usage_report PASSED
tests/test_utils.py::test_create_record_metadata PASSED
tests/test_utils.py::test_modify_item_metadata PASSED
tests/test_utils.py::test_replace_title_subitem PASSED
tests/test_utils.py::test_get_schema_dict PASSED
tests/test_utils.py::test_create_deposit PASSED
tests/test_utils.py::test_update_activity_action PASSED
tests/test_utils.py::test_check_continue PASSED
tests/test_utils.py::test_autofill_title PASSED
tests/test_utils.py::test_exclude_admin_workflow PASSED
tests/test_utils.py::test_is_enable_item_name_link PASSED
tests/test_utils.py::test_save_activity_data PASSED
tests/test_utils.py::test_send_mail_url_guest_user PASSED
tests/test_utils.py::test_generate_guest_activity_token_value PASSED
tests/test_utils.py::test_init_activity_for_guest_user PASSED
tests/test_utils.py::test_send_usage_application_mail_for_guest_user PASSED
tests/test_utils.py::test_validate_guest_activity_token PASSED
tests/test_utils.py::test_validate_guest_activity_expired PASSED
tests/test_utils.py::test_create_onetime_download_url_to_guest PASSED
tests/test_utils.py::test_delete_guest_activity FAILED
tests/test_utils.py::test_get_activity_display_info PASSED
tests/test_utils.py::test___init_activity_detail_data_for_guest FAILED
tests/test_utils.py::test_prepare_data_for_guest_activity PASSED
tests/test_utils.py::test_recursive_get_specified_properties PASSED
tests/test_utils.py::test_get_approval_keys PASSED
tests/test_utils.py::test_process_send_mail PASSED
tests/test_utils.py::test_cancel_expired_usage_reports PASSED
tests/test_utils.py::test_process_send_approval_mails PASSED
tests/test_utils.py::test_get_usage_data PASSED
tests/test_utils.py::test_update_approval_date PASSED
tests/test_utils.py::test_create_record_metadata_for_user PASSED
tests/test_utils.py::test_get_current_date PASSED
tests/test_utils.py::test_get_sub_key_by_system_property_key PASSED
tests/test_utils.py::test_update_system_data_for_item_metadata PASSED
tests/test_utils.py::test_update_approval_date_for_deposit PASSED
tests/test_utils.py::test_update_system_data_for_activity FAILED
tests/test_utils.py::test_get_record_first_version PASSED
tests/test_utils.py::test_prepare_doi_link_workflow FAILED
tests/test_utils.py::test_get_index_id FAILED
tests/test_utils.py::test_make_activitylog_tsv FAILED
tests/test_utils.py::test_is_terms_of_use_only FAILED
tests/test_utils.py::test_grant_access_rights_to_all_open_restricted_files FAILED
tests/test_views.py::test_index_acl_nologin FAILED
tests/test_views.py::test_index_acl[0-200] FAILED
tests/test_views.py::test_index_acl[1-200] FAILED
tests/test_views.py::test_index_acl[2-200] FAILED
tests/test_views.py::test_index_acl[3-200] FAILED
tests/test_views.py::test_index_acl[4-200] FAILED
tests/test_views.py::test_index_acl[5-200] FAILED
tests/test_views.py::test_index_acl[6-200] FAILED
tests/test_views.py::test_iframe_success PASSED
tests/test_views.py::test_init_activity_acl_nologin PASSED
tests/test_views.py::test_init_activity_acl[0-200] FAILED
tests/test_views.py::test_init_activity_acl[1-200] FAILED
tests/test_views.py::test_init_activity_acl[2-200] FAILED
tests/test_views.py::test_init_activity_acl[3-200] FAILED
tests/test_views.py::test_init_activity_acl[4-200] FAILED
tests/test_views.py::test_init_activity_acl[5-200] FAILED
tests/test_views.py::test_init_activity_acl[6-200] FAILED
tests/test_views.py::test_init_activity_guest_nologin PASSED
tests/test_views.py::test_init_activity_guest_users[0-200] FAILED
tests/test_views.py::test_init_activity_guest_users[1-200] FAILED
tests/test_views.py::test_init_activity_guest_users[2-200] FAILED
tests/test_views.py::test_init_activity_guest_users[3-200] FAILED
tests/test_views.py::test_init_activity_guest_users[4-200] FAILED
tests/test_views.py::test_init_activity_guest_users[5-200] FAILED
tests/test_views.py::test_init_activity_guest_users[6-200] FAILED
tests/test_views.py::test_display_guest_activity PASSED
tests/test_views.py::test_find_doi_nologin PASSED
tests/test_views.py::test_find_doi_users[0-200] PASSED
tests/test_views.py::test_find_doi_users[1-200] PASSED
tests/test_views.py::test_find_doi_users[2-200] PASSED
tests/test_views.py::test_find_doi_users[3-200] PASSED
tests/test_views.py::test_find_doi_users[4-200] PASSED
tests/test_views.py::test_find_doi_users[5-200] PASSED
tests/test_views.py::test_find_doi_users[6-200] PASSED
tests/test_views.py::test_save_feedback_maillist_users[0-200] PASSED
tests/test_views.py::test_save_feedback_maillist_users[1-200] PASSED
tests/test_views.py::test_save_feedback_maillist_users[2-200] PASSED
tests/test_views.py::test_save_feedback_maillist_users[3-200] PASSED
tests/test_views.py::test_save_feedback_maillist_users[4-200] PASSED
tests/test_views.py::test_save_feedback_maillist_users[5-200] PASSED
tests/test_views.py::test_save_feedback_maillist_users[6-200] PASSED
tests/test_views.py::test_previous_action_acl_nologin FAILED
tests/test_views.py::test_previous_action_acl_users[0-403-False] PASSED
tests/test_views.py::test_previous_action_acl_users[1-403-True] PASSED
tests/test_views.py::test_previous_action_acl_users[2-403-True] PASSED
tests/test_views.py::test_previous_action_acl_users[3-403-True] PASSED
tests/test_views.py::test_previous_action_acl_users[4-403-False] PASSED
tests/test_views.py::test_previous_action_acl_users[5-403-False] PASSED
tests/test_views.py::test_previous_action_acl_users[6-403-True] PASSED
tests/test_views.py::test_previous_action[0-200] FAILED
tests/test_views.py::test_previous_action[1-200] PASSED
tests/test_views.py::test_previous_action[2-200] PASSED
tests/test_views.py::test_previous_action[3-200] FAILED
tests/test_views.py::test_previous_action[4-200] FAILED
tests/test_views.py::test_previous_action[5-200] FAILED
tests/test_views.py::test_previous_action[6-200] PASSED
tests/test_views.py::test_next_action_acl_nologin PASSED
tests/test_views.py::test_next_action_acl_users[0-200-False] PASSED
tests/test_views.py::test_next_action_acl_users[1-200-True] PASSED
tests/test_views.py::test_next_action_acl_users[2-200-True] PASSED
tests/test_views.py::test_next_action_acl_users[3-200-True] PASSED
tests/test_views.py::test_next_action_acl_users[4-200-False] PASSED
tests/test_views.py::test_next_action_acl_users[5-200-False] PASSED
tests/test_views.py::test_next_action_acl_users[6-200-True] PASSED
tests/test_views.py::test_next_action_acl_guestlogin PASSED
tests/test_views.py::test_next_action[1-200] FAILED
tests/test_views.py::test_next_action[2-200] FAILED
tests/test_views.py::test_next_action[6-200] FAILED
tests/test_views.py::test_next_action_usage_application[0-200] ERROR
tests/test_views.py::test_cancel_action_acl_nologin FAILED
tests/test_views.py::test_cancel_action_acl_users[0-403-False] PASSED
tests/test_views.py::test_cancel_action_acl_users[1-403-True] PASSED
tests/test_views.py::test_cancel_action_acl_users[2-403-True] PASSED
tests/test_views.py::test_cancel_action_acl_users[3-403-True] PASSED
tests/test_views.py::test_cancel_action_acl_users[4-403-False] PASSED
tests/test_views.py::test_cancel_action_acl_users[5-403-False] PASSED
tests/test_views.py::test_cancel_action_acl_users[6-403-True] PASSED
tests/test_views.py::test_cancel_action_acl_guestlogin PASSED
tests/test_views.py::test_cancel_action[1-200] PASSED
tests/test_views.py::test_cancel_action[2-200] PASSED
tests/test_views.py::test_cancel_action[6-200] PASSED
tests/test_views.py::test_cancel_action2[0-200] FAILED
tests/test_views.py::test_cancel_action2[1-200] FAILED
tests/test_views.py::test_cancel_action2[2-200] FAILED
tests/test_views.py::test_cancel_action2[3-200] FAILED
tests/test_views.py::test_cancel_action2[4-200] FAILED
tests/test_views.py::test_cancel_action2[5-200] FAILED
tests/test_views.py::test_cancel_action2[6-200] FAILED
tests/test_views.py::test_cancel_action_guest PASSED
tests/test_views.py::test_send_mail_nologin PASSED
tests/test_views.py::test_send_mail_users[0-200] PASSED
tests/test_views.py::test_send_mail_users[1-200] PASSED
tests/test_views.py::test_send_mail_users[2-200] PASSED
tests/test_views.py::test_send_mail_users[3-200] PASSED
tests/test_views.py::test_send_mail_users[4-200] PASSED
tests/test_views.py::test_send_mail_users[5-200] PASSED
tests/test_views.py::test_send_mail_users[6-200] PASSED
tests/test_views.py::test_is_user_locked_nologin FAILED
tests/test_views.py::test_is_user_locked_acl[0] PASSED
tests/test_views.py::test_is_user_locked_acl[1] PASSED
tests/test_views.py::test_is_user_locked_acl[2] PASSED
tests/test_views.py::test_is_user_locked_acl[3] PASSED
tests/test_views.py::test_is_user_locked_acl[4] PASSED
tests/test_views.py::test_is_user_locked_acl[5] PASSED
tests/test_views.py::test_is_user_locked_acl[6] PASSED
tests/test_views.py::test_is_user_locked FAILED
tests/test_views.py::test_user_lock_activity_nologin PASSED
tests/test_views.py::test_user_lock_activity_acl[0] PASSED
tests/test_views.py::test_user_lock_activity_acl[1] PASSED
tests/test_views.py::test_user_lock_activity_acl[2] PASSED
tests/test_views.py::test_user_lock_activity_acl[3] PASSED
tests/test_views.py::test_user_lock_activity_acl[4] PASSED
tests/test_views.py::test_user_lock_activity_acl[5] PASSED
tests/test_views.py::test_user_lock_activity_acl[6] PASSED
tests/test_views.py::test_user_lock_activity PASSED
tests/test_views.py::test_user_unlock_activity_nologin PASSED
tests/test_views.py::test_user_unlock_activity_acl[0] FAILED
tests/test_views.py::test_user_unlock_activity_acl[1] FAILED
tests/test_views.py::test_user_unlock_activity_acl[2] FAILED
tests/test_views.py::test_user_unlock_activity_acl[3] FAILED
tests/test_views.py::test_user_unlock_activity_acl[4] FAILED
tests/test_views.py::test_user_unlock_activity_acl[5] FAILED
tests/test_views.py::test_user_unlock_activity_acl[6] FAILED
tests/test_views.py::test_user_unlock_activity FAILED
tests/test_views.py::test_lock_activity_nologin PASSED
tests/test_views.py::test_lock_activity_users[0-200] PASSED
tests/test_views.py::test_lock_activity_users[1-200] PASSED
tests/test_views.py::test_lock_activity_users[2-200] PASSED
tests/test_views.py::test_lock_activity_users[3-200] PASSED
tests/test_views.py::test_lock_activity_users[4-200] PASSED
tests/test_views.py::test_lock_activity_users[5-200] PASSED
tests/test_views.py::test_lock_activity_users[6-200] PASSED
tests/test_views.py::test_lock_activity PASSED
tests/test_views.py::test_unlock_activity_acl_nologin FAILED
tests/test_views.py::test_unlock_activity_acl_users[0-200] PASSED
tests/test_views.py::test_unlock_activity_acl_users[1-200] PASSED
tests/test_views.py::test_unlock_activity_acl_users[2-200] PASSED
tests/test_views.py::test_unlock_activity_acl_users[3-200] PASSED
tests/test_views.py::test_unlock_activity_acl_users[4-200] PASSED
tests/test_views.py::test_unlock_activity_acl_users[5-200] PASSED
tests/test_views.py::test_unlock_activity_acl_users[6-200] PASSED
tests/test_views.py::test_unlock_activity[0-200] PASSED
tests/test_views.py::test_unlock_activity[1-200] PASSED
tests/test_views.py::test_unlock_activity[2-200] PASSED
tests/test_views.py::test_unlock_activity[3-200] PASSED
tests/test_views.py::test_unlock_activity[4-200] PASSED
tests/test_views.py::test_unlock_activity[5-200] PASSED
tests/test_views.py::test_unlock_activity[6-200] PASSED
tests/test_views.py::test_check_approval_acl_nologin FAILED
tests/test_views.py::test_check_approval_acl_users[0-200] PASSED
tests/test_views.py::test_check_approval_acl_users[1-200] PASSED
tests/test_views.py::test_check_approval_acl_users[2-200] PASSED
tests/test_views.py::test_check_approval_acl_users[3-200] PASSED
tests/test_views.py::test_check_approval_acl_users[4-200] PASSED
tests/test_views.py::test_check_approval_acl_users[5-200] PASSED
tests/test_views.py::test_check_approval_acl_users[6-200] PASSED
tests/test_views.py::test_check_approval[0-200] PASSED
tests/test_views.py::test_check_approval[1-200] PASSED
tests/test_views.py::test_check_approval[2-200] PASSED
tests/test_views.py::test_check_approval[3-200] PASSED
tests/test_views.py::test_check_approval[4-200] PASSED
tests/test_views.py::test_check_approval[5-200] PASSED
tests/test_views.py::test_check_approval[6-200] PASSED
tests/test_views.py::test_get_feedback_maillist_acl_nologin FAILED
tests/test_views.py::test_get_feedback_maillist_acl_users[0-200] PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[1-200] PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[2-200] PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[3-200] PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[4-200] PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[5-200] PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[6-200] PASSED
tests/test_views.py::test_get_feedback_maillist[0-200] FAILED
tests/test_views.py::test_get_feedback_maillist[1-200] FAILED
tests/test_views.py::test_get_feedback_maillist[2-200] FAILED
tests/test_views.py::test_get_feedback_maillist[3-200] FAILED
tests/test_views.py::test_get_feedback_maillist[4-200] FAILED
tests/test_views.py::test_get_feedback_maillist[5-200] FAILED
tests/test_views.py::test_get_feedback_maillist[6-200] FAILED
tests/test_views.py::test_save_activity_acl_nologin FAILED
tests/test_views.py::test_save_activity_acl_users[0-200] PASSED
tests/test_views.py::test_save_activity_acl_users[1-200] PASSED
tests/test_views.py::test_save_activity_acl_users[2-200] PASSED
tests/test_views.py::test_save_activity_acl_users[3-200] PASSED
tests/test_views.py::test_save_activity_acl_users[4-200] PASSED
tests/test_views.py::test_save_activity_acl_users[5-200] PASSED
tests/test_views.py::test_save_activity_acl_users[6-200] PASSED
tests/test_views.py::test_save_activity_acl_guestlogin PASSED
tests/test_views.py::test_save_activity[0-200] PASSED
tests/test_views.py::test_save_activity[1-200] PASSED
tests/test_views.py::test_save_activity[2-200] PASSED
tests/test_views.py::test_save_activity[3-200] PASSED
tests/test_views.py::test_save_activity[4-200] PASSED
tests/test_views.py::test_save_activity[5-200] PASSED
tests/test_views.py::test_save_activity[6-200] PASSED
tests/test_views.py::test_save_activity_guestlogin PASSED
tests/test_views.py::test_display_activity_nologin PASSED
tests/test_views.py::test_display_activity_guestlogin PASSED
tests/test_views.py::test_display_activity_users[0-200] PASSED
tests/test_views.py::test_display_activity_users[1-200] PASSED
tests/test_views.py::test_display_activity_users[2-200] PASSED
tests/test_views.py::test_display_activity_users[3-200] PASSED
tests/test_views.py::test_display_activity_users[4-200] PASSED
tests/test_views.py::test_display_activity_users[5-200] PASSED
tests/test_views.py::test_display_activity_users[6-200] PASSED
tests/test_views.py::test_display_activity PASSED
tests/test_views.py::test_check_authority_action PASSED
tests/test_views.py::test_withdraw_confirm_nologin FAILED
tests/test_views.py::test_withdraw_confirm_users[0-403-False] PASSED
tests/test_views.py::test_withdraw_confirm_users[1-403-True] PASSED
tests/test_views.py::test_withdraw_confirm_users[2-403-True] PASSED
tests/test_views.py::test_withdraw_confirm_users[3-403-True] PASSED
tests/test_views.py::test_withdraw_confirm_users[4-403-False] PASSED
tests/test_views.py::test_withdraw_confirm_users[5-403-False] PASSED
tests/test_views.py::test_withdraw_confirm_users[6-403-True] PASSED
tests/test_views.py::test_withdraw_confirm_guestlogin PASSED
tests/test_views.py::test_withdraw_confirm_exception1[0] PASSED
tests/test_views.py::test_withdraw_confirm_exception1[1] PASSED
tests/test_views.py::test_withdraw_confirm_exception1[2] PASSED
tests/test_views.py::test_withdraw_confirm_exception1[3] PASSED
tests/test_views.py::test_withdraw_confirm_exception1[4] PASSED
tests/test_views.py::test_withdraw_confirm_exception1[5] PASSED
tests/test_views.py::test_withdraw_confirm_exception1[6] PASSED
tests/test_views.py::test_withdraw_confirm_exception1_guestlogin PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data0-500--1-{'passwd': ['Missing data for required field.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data1-500--1-{'passwd': ['Field may not be null.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data] FAILED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data3-500--1-Invalid password] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data0-500--1-{'passwd': ['Missing data for required field.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data1-500--1-{'passwd': ['Field may not be null.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data] FAILED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data3-500--1-Invalid password] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data0-500--1-{'passwd': ['Missing data for required field.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data1-500--1-{'passwd': ['Field may not be null.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data] FAILED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data3-500--1-Invalid password] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data0-500--1-{'passwd': ['Missing data for required field.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data1-500--1-{'passwd': ['Field may not be null.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data] FAILED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data3-500--1-Invalid password] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data0-500--1-{'passwd': ['Missing data for required field.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data1-500--1-{'passwd': ['Field may not be null.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data] FAILED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data3-500--1-Invalid password] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data0-500--1-{'passwd': ['Missing data for required field.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data1-500--1-{'passwd': ['Field may not be null.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data] FAILED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data3-500--1-Invalid password] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data0-500--1-{'passwd': ['Missing data for required field.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data1-500--1-{'passwd': ['Field may not be null.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data] FAILED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data3-500--1-Invalid password] PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data0-500--1-{'passwd': ['Missing data for required field.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data1-500--1-{'passwd': ['Field may not be null.']}] PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data] FAILED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data3-500--1-Invalid password] PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[0-success-200-0-success] PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[1-success-200-0-success] PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[2-success-200-0-success] PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[3-success-200-0-success] PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[4-success-200-0-success] PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[5-success-200-0-success] PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[6-success-200-0-success] PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete_guestlogin[success-200-0-success] PASSED
tests/test_views.py::test_download_activitylog_nologin PASSED
tests/test_views.py::test_download_activitylog_1[0-403] PASSED
tests/test_views.py::test_download_activitylog_1[1-200] FAILED
tests/test_views.py::test_download_activitylog_1[2-200] FAILED
tests/test_views.py::test_download_activitylog_1[3-403] PASSED
tests/test_views.py::test_download_activitylog_1[4-403] PASSED
tests/test_views.py::test_download_activitylog_1[5-403] PASSED
tests/test_views.py::test_download_activitylog_1[6-200] FAILED
tests/test_views.py::test_download_activitylog_2[1-200] FAILED
tests/test_views.py::test_download_activitylog_2[2-200] FAILED
tests/test_views.py::test_download_activitylog_2[6-200] FAILED
tests/test_views.py::test_clear_activitylog_nologin PASSED
tests/test_views.py::test_clear_activitylog_1[0-403] PASSED
tests/test_views.py::test_clear_activitylog_1[1-200] PASSED
tests/test_views.py::test_clear_activitylog_1[2-200] PASSED
tests/test_views.py::test_clear_activitylog_1[3-403] PASSED
tests/test_views.py::test_clear_activitylog_1[4-403] PASSED
tests/test_views.py::test_clear_activitylog_1[5-403] PASSED
tests/test_views.py::test_clear_activitylog_1[6-200] PASSED
tests/test_views.py::test_clear_activitylog_2[1-200] PASSED
tests/test_views.py::test_clear_activitylog_2[2-200] PASSED
tests/test_views.py::test_clear_activitylog_2[6-200] PASSED
tests/test_views.py::test_clear_activitylog_3[1-200] PASSED
tests/test_views.py::test_clear_activitylog_3[2-200] PASSED
tests/test_views.py::test_clear_activitylog_3[6-200] PASSED
tests/test_views.py::test_clear_activitylog_4[1-200] PASSED
tests/test_views.py::test_clear_activitylog_4[2-200] PASSED
tests/test_views.py::test_clear_activitylog_4[6-200] PASSED
tests/test_views.py::test_clear_activitylog_5[0-403] PASSED
tests/test_views.py::test_clear_activitylog_5[1-200] PASSED
tests/test_views.py::test_clear_activitylog_5[2-200] PASSED
tests/test_views.py::test_clear_activitylog_5[3-403] PASSED
tests/test_views.py::test_clear_activitylog_5[4-403] PASSED
tests/test_views.py::test_clear_activitylog_5[5-403] PASSED
tests/test_views.py::test_clear_activitylog_5[6-200] PASSED
tests/test_views.py::test_clear_activitylog_6[1-200] PASSED
tests/test_views.py::test_clear_activitylog_6[2-200] PASSED
tests/test_views.py::test_clear_activitylog_6[6-200] PASSED
tests/test_views.py::test_clear_activitylog_7[1-200] PASSED
tests/test_views.py::test_clear_activitylog_7[2-200] PASSED
tests/test_views.py::test_clear_activitylog_7[6-200] PASSED
tests/test_views.py::test_clear_activitylog_8[1-200] PASSED
tests/test_views.py::test_clear_activitylog_8[2-200] PASSED
tests/test_views.py::test_clear_activitylog_8[6-200] PASSED
tests/test_views.py::test_clear_activitylog_9[0-403] PASSED
tests/test_views.py::test_clear_activitylog_9[1-200] PASSED
tests/test_views.py::test_clear_activitylog_9[2-200] PASSED
tests/test_views.py::test_clear_activitylog_9[3-403] PASSED
tests/test_views.py::test_clear_activitylog_9[4-403] PASSED
tests/test_views.py::test_clear_activitylog_9[5-403] PASSED
tests/test_views.py::test_clear_activitylog_9[6-200] PASSED
tests/test_views.py::test_ActivityActionResource_post FAILED

==================================== ERRORS ====================================
_________ ERROR at setup of test_next_action_usage_application[0-200] __________

self = <sqlalchemy.engine.base.Connection object at 0x7f9d3bb51710>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d3bcefda0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO guest_activity (created, updated, user_mail, record_id, file_name, activity_id, token, expiration_date, i...id)s, %(file_name)s, %(activity_id)s, %(token)s, %(expiration_date)s, %(is_usage_report)s) RETURNING guest_activity.id'
parameters = {'activity_id': 'A-00000001-20004', 'created': datetime.datetime(2024, 4, 17, 7, 6, 3, 487706), 'expiration_date': datetime.datetime(2024, 4, 17, 7, 6, 2, 614197), 'file_name': 'aaa.txt', ...}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7f9d3bb51c18>, [{'activity_id': 'A-00000001-...ration_date': datetime.datetime(2024, 4, 17, 7, 6, 2, 614197), 'file_name': 'aaa.txt', 'is_usage_report': False, ...}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f9d3b8c04e0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d3bb51908>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d3bcefda0>
cursor = <cursor object at 0x7f9d3b88e238; closed: -1>
statement = 'INSERT INTO guest_activity (created, updated, user_mail, record_id, file_name, activity_id, token, expiration_date, i...id)s, %(file_name)s, %(activity_id)s, %(token)s, %(expiration_date)s, %(is_usage_report)s) RETURNING guest_activity.id'
parameters = {'activity_id': 'A-00000001-20004', 'created': datetime.datetime(2024, 4, 17, 7, 6, 3, 487706), 'expiration_date': datetime.datetime(2024, 4, 17, 7, 6, 2, 614197), 'file_name': 'aaa.txt', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d3bb51908>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.ProgrammingError: column "expiration_date" is of type integer but expression is of type timestamp without time zone
E       LINE 1: ...st.org', 1, 'aaa.txt', 'A-00000001-20004', 'abc', '2024-04-1...
E                                                                    ^
E       HINT:  You will need to rewrite or cast the expression.

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: ProgrammingError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
db_records = [(<PersistentIdentifier recid:1 / rec:f77b4513-4654-4e72-87d0-30ca8046bed5 (R)>, <PersistentIdentifier depid:1 / rec:f...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:11fbff4b-1d2e-46c5-89a1-cab047fb5265 (R)>, None, ...)]
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
action_data = ([<Action 1>, <Action 2>, <Action 3>, <Action 4>, <Action 5>, <Action 6>, ...], [<ActionStatus 1>, <ActionStatus 2>, <ActionStatus 3>, <ActionStatus 4>, <ActionStatus 5>, <ActionStatus 6>, ...])
item_type = <ItemType 1>

    @pytest.fixture()
    def db_register_usage_application(app, db, db_records, users, action_data, item_type ):
        workflows = {}
    
    
        flow_id1 = uuid.uuid4()
        # flow_id2 = uuid.uuid4()
        flow_id3 = uuid.uuid4()
        flow_id4 = uuid.uuid4()
    
        #workflow_flow_define
        flow_define1 = FlowDefine(
            flow_id=flow_id1, flow_name="利用登録", flow_user=1, flow_status="A"
        )
        flow_define3 = FlowDefine(
            flow_id=flow_id3, flow_name="利用申請", flow_user=1, flow_status="A"
        )
        flow_define4 = FlowDefine(
            flow_id=flow_id4, flow_name="2段階利用申請", flow_user=1, flow_status="A"
        )
    
        # workflow_flow_action
        flow_action1_1 = FlowAction(
            status="N",
            flow_id=flow_id1,
            action_id=1,
            action_version="1.0.0",
            action_order=1,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": False, "inform_approval": False, "request_approval": False},
        )
        flow_action1_2 = FlowAction(
            status="N",
            flow_id=flow_id1,
            action_id=2,
            action_version="1.0.0",
            action_order=3,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": False, "inform_approval": False, "request_approval": False},
        )
        flow_action1_3 = FlowAction(
            status="N",
            flow_id=flow_id1,
            action_id=3,
            action_version="1.0.1",
            action_order=2,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": False, "inform_approval": True, "request_approval": False},
        )
    
        flow_action3_1 = FlowAction(
            status="N",
            flow_id=flow_id3,
            action_id=1,
            action_version="1.0.0",
            action_order=1,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": False, "inform_approval": False, "request_approval": False},
        )
        flow_action3_2 = FlowAction(
            status="N",
            flow_id=flow_id3,
            action_id=2,
            action_version="1.0.0",
            action_order=4,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": False, "inform_approval": False, "request_approval": False},
        )
        flow_action3_3 = FlowAction(
            status="N",
            flow_id=flow_id3,
            action_id=3,
            action_version="1.0.1",
            action_order=2,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": False, "inform_approval": False, "request_approval": False},
        )
        flow_action3_4 = FlowAction(
            status="N",
            flow_id=flow_id3,
            action_id=4,
            action_version="2.0.0",
            action_order=3,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": True, "inform_approval": True, "request_approval": True},
        )
        flow_action4_1 = FlowAction(
            status="N",
            flow_id=flow_id4,
            action_id=1,
            action_version="1.0.0",
            action_order=1,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": False, "inform_approval": False, "request_approval": False},
        )
        flow_action4_2 = FlowAction(
            status="N",
            flow_id=flow_id4,
            action_id=2,
            action_version="1.0.0",
            action_order=5,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": False, "inform_approval": False, "request_approval": False},
        )
        flow_action4_3 = FlowAction(
            status="N",
            flow_id=flow_id4,
            action_id=3,
            action_version="1.0.1",
            action_order=2,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": False, "inform_approval": False, "request_approval": False},
        )
        flow_action4_4 = FlowAction(
            status="N",
            flow_id=flow_id4,
            action_id=4,
            action_version="2.0.0",
            action_order=3,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": True, "inform_approval": True, "request_approval": True},
        )
        flow_action4_5 = FlowAction(
            status="N",
            flow_id=flow_id4,
            action_id=4,
            action_version="2.0.0",
            action_order=4,
            action_condition="",
            action_status="A",
            action_date=datetime.strptime("2018/07/28 0:00:00", "%Y/%m/%d %H:%M:%S"),
            send_mail_setting={"inform_reject": True, "inform_approval": True, "request_approval": True},
        )
    
    
        with db.session.begin_nested():
            db.session.add_all([flow_define1,flow_define3,flow_define4])
        db.session.commit()
        #workflow_workflow
        workflow_workflow1 = WorkFlow(
            flows_id=flow_id1,
            flows_name="利用登録",
            itemtype_id=1,
            index_tree_id=None,
            flow_id=flow_define1.id,
            flow_define=flow_define1,
            is_deleted=False,
            open_restricted=True,
            # location_id=location.id,
            # location=location,
            is_gakuninrdm=False,
        )
    
        workflow_workflow3 = WorkFlow(
            flows_id=flow_id3,
            flows_name="利用申請",
            itemtype_id=1,
            index_tree_id=None,
            flow_id=flow_define3.id,
            flow_define=flow_define3,
            is_deleted=False,
            open_restricted=True,
            # location_id=location.id,
            # location=location,
            is_gakuninrdm=False,
        )
        workflow_workflow4 = WorkFlow(
            flows_id=flow_id4,
            flows_name="2段階利用申請",
            itemtype_id=1,
            index_tree_id=None,
            flow_id=flow_define4.id,
            flow_define=flow_define4,
            is_deleted=False,
            open_restricted=True,
            # location_id=location.id,
            # location=location,
            is_gakuninrdm=False,
        )
    
        with db.session.begin_nested():
            db.session.add_all([flow_action1_1,flow_action1_2,flow_action1_3])
    
            db.session.add_all([flow_action3_1,flow_action3_2,flow_action3_3,flow_action3_4])
            db.session.add_all([flow_action4_1,flow_action4_2,flow_action4_3,flow_action4_4,flow_action4_5])
            db.session.add_all([workflow_workflow1, workflow_workflow3, workflow_workflow4])
        db.session.commit()
        workflows.update({
    		"flow_define1"       : flow_define1
    		# ,"flow_define2"       : flow_define2
    		,"flow_define3"       : flow_define3
    		,"flow_define4"       : flow_define4
    		,"flow_action1_1"     : flow_action1_1
    		,"flow_action1_2"     : flow_action1_2
    		,"flow_action1_3"     : flow_action1_3
    		# ,"flow_action2_1"     : flow_action2_1
    		# ,"flow_action2_2"     : flow_action2_2
    		,"flow_action3_1"     : flow_action3_1
    		,"flow_action3_2"     : flow_action3_2
    		,"flow_action3_3"     : flow_action3_3
    		,"flow_action3_4"     : flow_action3_4
    		,"flow_action4_1"     : flow_action4_1
    		,"flow_action4_2"     : flow_action4_2
    		,"flow_action4_3"     : flow_action4_3
    		,"flow_action4_4"     : flow_action4_4
    		,"flow_action4_5"     : flow_action4_5
    		,"workflow_workflow1" : workflow_workflow1
    		# ,"workflow_workflow2" : workflow_workflow2
    		,"workflow_workflow3" : workflow_workflow3
    		,"workflow_workflow4" : workflow_workflow4
        })
    
        # 利用登録(now -> item_registration, next ->end)
        activity1 = Activity(activity_id='A-00000001-20001'
                            ,workflow_id=workflow_workflow1.id
                            , flow_id=flow_define1.id,
                        action_id=3,
                        item_id=db_records[2][2].id,
                        activity_login_user=1,
                        action_status = 'M',
                        activity_update_user=1,
                        activity_start=datetime.strptime('2022/04/14 3:01:53.931', '%Y/%m/%d %H:%M:%S.%f'),
                        activity_community_id=None,
                        activity_confirm_term_of_use=True,
                        title='test'
                        , shared_user_id=-1
                        , extra_info={},
                        action_order=2)
        activity1_pre_action = ActivityAction(
            activity_id='A-00000001-20001'
            ,action_id=3
            ,action_status = 'M'
            ,action_order=2
        )
        activity1_next_action = ActivityAction(
            activity_id='A-00000001-20001'
            ,action_id=2
            ,action_status = 'M'
            ,action_order=3
        )
        # 利用申請(next ->end)
        activity2 = Activity(activity_id='A-00000001-20002'
                            ,workflow_id=workflow_workflow3.id
                            ,flow_id=flow_define3.id
                            ,action_id=4
                            ,item_id=db_records[2][2].id
                        , activity_login_user=1
                        , action_status = 'M'
                        , activity_update_user=1
                        , activity_start=datetime.strptime('2022/04/14 3:01:53.931', '%Y/%m/%d %H:%M:%S.%f')
                        , activity_community_id=3
                        , activity_confirm_term_of_use=True
                        , title='test'
                        , shared_user_id=-1
                        , extra_info={}
                        , action_order=3)
        activity2_pre_action = ActivityAction(
            activity_id='A-00000001-20002'
            ,action_id=4
            ,action_status = 'M'
            ,action_order=3
        )
        activity2_next_action = ActivityAction(
            activity_id='A-00000001-20002'
            ,action_id=2
            ,action_status = 'M'
            ,action_order=4
            ,action_handler=-1
        )
        file_permission = FilePermission(
            user_id = 1
            ,record_id= 1
            ,file_name= "aaa.txt"
            ,usage_application_activity_id='A-00000001-20002'
            ,usage_report_activity_id=None
            ,status = -1
        )
        # ２段階利用申請(next -> approval2)
        activity3 = Activity(activity_id='A-00000001-20003'
                            ,workflow_id=workflow_workflow4.id
                            ,flow_id=flow_define4.id
                            ,action_id=4
                            ,item_id=db_records[2][2].id
                            ,activity_login_user=1
                            ,action_status = 'M'
                            ,activity_update_user=1
                            ,activity_start=datetime.strptime('2022/04/14 3:01:53.931', '%Y/%m/%d %H:%M:%S.%f')
                            ,activity_community_id=3
                            ,activity_confirm_term_of_use=True
                            ,title='test'
                            ,shared_user_id=-1
                            ,extra_info={"file_name": "aaa.txt", "record_id": "1", "user_mail": "aaa@test.org", "related_title": "test", "is_restricted_access": True}
                            ,action_order=3)
        activity3_pre_action = ActivityAction(
            activity_id='A-00000001-20003'
            ,action_id=4
            ,action_status = 'M'
            ,action_order=3
        )
        activity3_next_action = ActivityAction(
            activity_id='A-00000001-20003'
            ,action_id=4
            ,action_status = 'M'
            ,action_order=4
        )
        # ２段階利用申請(next ->end)
        activity4 = Activity(activity_id='A-00000001-20004'
                            ,workflow_id=workflow_workflow4.id
                            ,flow_id=flow_define4.id
                            ,action_id=4
                            ,item_id=db_records[2][2].id
                            ,activity_login_user=1
                            ,action_status = 'M'
                            ,activity_update_user=1
                            ,activity_start=datetime.strptime('2022/04/14 3:01:53.931', '%Y/%m/%d %H:%M:%S.%f')
                            ,activity_community_id=3
                            ,activity_confirm_term_of_use=True
                            ,title='test'
                            ,shared_user_id=-1
                            ,extra_info={"file_name": "aaa.txt", "record_id": "1", "user_mail": "aaa@test.org", "related_title": "test", "is_restricted_access": True}
                            ,action_order=4)
        activity4_pre_action = ActivityAction(
            activity_id='A-00000001-20004'
            ,action_id=4
            ,action_status = 'M'
            ,action_order=4
        )
        activity4_next_action = ActivityAction(
            activity_id='A-00000001-20004'
            ,action_id=2
            ,action_status = 'M'
            ,action_order=5
        )
        guest_activity = GuestActivity(
            activity_id='A-00000001-20004'
            ,record_id=1
            ,user_mail = 'aaa@test.org'
            ,file_name = "aaa.txt"
            ,token="abc"
            ,expiration_date=datetime.now()
            ,is_usage_report=False
        )
        with db.session.begin_nested():
            db.session.add(activity1)
            db.session.add(activity2)
            db.session.add(activity3)
            db.session.add(activity4)
        db.session.commit()
        with db.session.begin_nested():
            db.session.add(activity1_next_action)
            db.session.add(activity2_next_action)
            db.session.add(activity3_next_action)
            db.session.add(activity4_next_action)
            db.session.add(activity1_pre_action)
            db.session.add(activity2_pre_action)
            db.session.add(activity3_pre_action)
            db.session.add(activity4_pre_action)
            db.session.add(file_permission)
>           db.session.add(guest_activity)

tests/conftest.py:2138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:597: in __exit__
    self.rollback()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:594: in __exit__
    self.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1116: in _emit_insert_statements
    statement, params
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d3bcefda0>
cursor = <cursor object at 0x7f9d3b88e238; closed: -1>
statement = 'INSERT INTO guest_activity (created, updated, user_mail, record_id, file_name, activity_id, token, expiration_date, i...id)s, %(file_name)s, %(activity_id)s, %(token)s, %(expiration_date)s, %(is_usage_report)s) RETURNING guest_activity.id'
parameters = {'activity_id': 'A-00000001-20004', 'created': datetime.datetime(2024, 4, 17, 7, 6, 3, 487706), 'expiration_date': datetime.datetime(2024, 4, 17, 7, 6, 2, 614197), 'file_name': 'aaa.txt', ...}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d3bb51908>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) column "expiration_date" is of type integer but expression is of type timestamp without time zone
E       LINE 1: ...st.org', 1, 'aaa.txt', 'A-00000001-20004', 'abc', '2024-04-1...
E                                                                    ^
E       HINT:  You will need to rewrite or cast the expression.
E        [SQL: 'INSERT INTO guest_activity (created, updated, user_mail, record_id, file_name, activity_id, token, expiration_date, is_usage_report) VALUES (%(created)s, %(updated)s, %(user_mail)s, %(record_id)s, %(file_name)s, %(activity_id)s, %(token)s, %(expiration_date)s, %(is_usage_report)s) RETURNING guest_activity.id'] [parameters: {'created': datetime.datetime(2024, 4, 17, 7, 6, 3, 487706), 'updated': datetime.datetime(2024, 4, 17, 7, 6, 3, 487713), 'user_mail': 'aaa@test.org', 'record_id': 1, 'file_name': 'aaa.txt', 'activity_id': 'A-00000001-20004', 'token': 'abc', 'expiration_date': datetime.datetime(2024, 4, 17, 7, 6, 2, 614197), 'is_usage_report': False}] (Background on this error at: http://sqlalche.me/e/f405)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: ProgrammingError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
=================================== FAILURES ===================================
_____________________ TestFlowSettingView.test_get_actions _____________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f9d5d221d68>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_get_actions(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.get_actions()==""
E           AssertionError: assert [<Action 1>, <Action 2>, <Action 3>, <Action 4>, <Action 5>, <Action 7>] == ''
E             +[<Action 1>, <Action 2>, <Action 3>, <Action 4>, <Action 5>, <Action 7>]
E             -''

tests/test_admin.py:208: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________ TestWorkFlowSettingView.test_index_acl[1-200] _________________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f9d5c74ed30>
client = <FlaskClient <Flask 'testapp'>>, db_register2 = None
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 403),
        (1, 200),
        # (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        # (6, 200),
    ])
    def test_index_acl(self,client,db_register2,users,users_index,status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('workflowsetting.index',_external=True)
>       res =  client.get(url)

tests/test_admin.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:69: in inner
    return self._run_view(f, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:368: in _run_view
    return fn(self, *args, **kwargs)
weko_workflow/admin.py:305: in index
    display_label=display_label
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:308: in render
    return render_template(template, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:140: in render_template
    ctx.app,
.tox/c1/lib/python3.6/site-packages/flask/templating.py:120: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
../weko-theme/weko_theme/templates/weko_theme/admin_layout.html:21: in template
    {% do ordered_main_menu.append(item) %}
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1005: in render
    return concat(self.root_render_func(self.new_context(vars)))
weko_workflow/templates/weko_workflow/admin/workflow_list.html:21: in top-level template code
    {%- extends admin_base_template %}
../weko-theme/weko_theme/templates/weko_theme/page_admin.html:20: in top-level template code
    {%- import 'weko_theme/admin_layout.html' as layout_overwrite with context -%}
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
../weko-theme/weko_theme/templates/weko_theme/admin_layout.html:21: in template
    {% do ordered_main_menu.append(item) %}
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:497: in _parse
    return Parser(self, source, name, encode_filename(filename)).parse()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:901: in parse
    result = nodes.Template(self.subparse(), lineno=1)
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:883: in subparse
    rv = self.parse_statement()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:130: in parse_statement
    return getattr(self, 'parse_' + self.stream.current.value)()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:384: in parse_macro
    drop_needle=True)
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:165: in parse_statements
    result = self.subparse(end_tokens)
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:883: in subparse
    rv = self.parse_statement()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:130: in parse_statement
    return getattr(self, 'parse_' + self.stream.current.value)()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:199: in parse_for
    body = self.parse_statements(('name:endfor', 'name:else'))
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:165: in parse_statements
    result = self.subparse(end_tokens)
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:883: in subparse
    rv = self.parse_statement()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:130: in parse_statement
    return getattr(self, 'parse_' + self.stream.current.value)()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:199: in parse_for
    body = self.parse_statements(('name:endfor', 'name:else'))
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:165: in parse_statements
    result = self.subparse(end_tokens)
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:883: in subparse
    rv = self.parse_statement()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:130: in parse_statement
    return getattr(self, 'parse_' + self.stream.current.value)()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:213: in parse_if
    'name:endif'))
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:165: in parse_statements
    result = self.subparse(end_tokens)
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:883: in subparse
    rv = self.parse_statement()
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:144: in parse_statement
    self.fail_unknown_tag(token.value, token.lineno)
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:97: in fail_unknown_tag
    return self._fail_ut_eof(name, self._end_token_stack, lineno)
.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:90: in _fail_ut_eof
    self.fail(' '.join(message), lineno)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <jinja2.parser.Parser object at 0x7f9d5eb66c18>
msg = "Encountered unknown tag 'do'. Jinja was looking for the following tags: 'elif' or 'else' or 'endif'. The innermost block that needs to be closed is 'if'."
lineno = 21, exc = <class 'jinja2.exceptions.TemplateSyntaxError'>

    def fail(self, msg, lineno=None, exc=TemplateSyntaxError):
        """Convenience method that raises `exc` with the message, passed
        line number or last line number as well as the current name and
        filename.
        """
        if lineno is None:
            lineno = self.stream.current.lineno
>       raise exc(msg, lineno, self.name, self.filename)
E       jinja2.exceptions.TemplateSyntaxError: Encountered unknown tag 'do'. Jinja was looking for the following tags: 'elif' or 'else' or 'endif'. The innermost block that needs to be closed is 'if'.

.tox/c1/lib/python3.6/site-packages/jinja2/parser.py:59: TemplateSyntaxError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
___________ TestWorkFlowSettingView.test_update_workflow_acl[1-200] ____________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f9d5b7d9cf8>
client = <FlaskClient <Flask 'testapp'>>, db_register2 = None
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 403),
        (1, 200),
        # (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        # (6, 200),
    ])
    def test_update_workflow_acl(self,client,db_register2,workflow,users,users_index,status_code):
        login(client=client, email=users[users_index]['email'])
        url = '/admin/workflowsetting/{}'.format(0)
        q = WorkFlow.query.all()
        assert len(q) == 1
        with patch("flask.templating._render", return_value=""):
            with pytest.raises(AttributeError):
                res =  client.post(url)
        q = WorkFlow.query.all()
        assert len(q) == 1
    
        data = {
            "id": 1,
            "list_hide": {},
            "flows_name": "test",
            "itemtype_id": 1,
            "flow_id": 1,
            "index_id": None,
            "location_id": None,
            "open_restricted": True,
            "is_gakuninrdm": True
        }
        login(client=client, email=users[users_index]['email'])
        url = '/admin/workflowsetting/{}'.format(uuid.uuid4())
        with patch("flask.templating._render", return_value=""):
            res = client.post(url, data=json.dumps(data), headers=[('Content-Type', 'application/json')])
        assert res.status_code == 200
    
        q = WorkFlow.query.first()
        assert q.open_restricted == False
        assert q.is_gakuninrdm == False
    
        data = {
            "id": 1,
            "list_hide": [],
            "flows_name": "test",
            "itemtype_id": "test",
            "flow_id": 1,
            "index_id": None,
            "location_id": None,
            "open_restricted": True,
            "is_gakuninrdm": True
        }
        login(client=client, email=users[users_index]['email'])
        url = '/admin/workflowsetting/{}'.format(workflow['workflow'].flows_id)
        with patch("flask.templating._render", return_value=""):
            res = client.post(url, data=json.dumps(data), headers=[('Content-Type', 'application/json')])
>       assert res.status_code == 400
E       assert 200 == 400
E         +200
E         -400

tests/test_admin.py:436: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:admin.py:505 wf_id:1
ERROR    testapp:admin.py:507 list_hide:{}
ERROR    testapp:api.py:419 (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (psycopg2.DataError) invalid input syntax for type integer: "test"
LINE 1: ...85042'::timestamp, flows_name='test', itemtype_id='test', op...
                                                             ^
 [SQL: 'UPDATE workflow_workflow SET updated=%(updated)s, flows_name=%(flows_name)s, itemtype_id=%(itemtype_id)s, open_restricted=%(open_restricted)s, is_gakuninrdm=%(is_gakuninrdm)s WHERE workflow_workflow.id = %(workflow_workflow_id)s'] [parameters: {'updated': datetime.datetime(2024, 4, 17, 6, 29, 21, 185042), 'flows_name': 'test', 'itemtype_id': 'test', 'open_restricted': True, 'is_gakuninrdm': True, 'workflow_workflow_id': 1}] (Background on this error at: http://sqlalche.me/e/9h9h)
Traceback (most recent call last):
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py", line 1236, in _execute_context
    cursor, statement, parameters, context
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py", line 536, in do_execute
    cursor.execute(statement, parameters)
psycopg2.DataError: invalid input syntax for type integer: "test"
LINE 1: ...85042'::timestamp, flows_name='test', itemtype_id='test', op...
                                                             ^


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/code/modules/weko-workflow/weko_workflow/api.py", line 414, in upt_workflow
    db.session.merge(_workflow)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py", line 162, in do
    return getattr(self.registry(), name)(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py", line 2076, in merge
    self._autoflush()
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py", line 1582, in _autoflush
    util.raise_from_cause(e)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py", line 296, in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py", line 277, in reraise
    raise value
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py", line 1571, in _autoflush
    self.flush()
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py", line 2446, in flush
    self._flush(objects)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py", line 2584, in _flush
    transaction.rollback(_capture_exception=True)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py", line 67, in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py", line 277, in reraise
    raise value
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py", line 2544, in _flush
    flush_context.execute()
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py", line 416, in execute
    rec.execute(self)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py", line 583, in execute
    uow,
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py", line 236, in save_obj
    update,
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py", line 976, in _emit_update_statements
    statement, multiparams
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py", line 980, in execute
    return meth(self, multiparams, params)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py", line 273, in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py", line 1099, in _execute_clauseelement
    distilled_params,
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py", line 1240, in _execute_context
    e, statement, parameters, cursor, context
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py", line 1458, in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py", line 296, in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py", line 276, in reraise
    raise value.with_traceback(tb)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py", line 1236, in _execute_context
    cursor, statement, parameters, context
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py", line 536, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.DataError: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (psycopg2.DataError) invalid input syntax for type integer: "test"
LINE 1: ...85042'::timestamp, flows_name='test', itemtype_id='test', op...
                                                             ^
 [SQL: 'UPDATE workflow_workflow SET updated=%(updated)s, flows_name=%(flows_name)s, itemtype_id=%(itemtype_id)s, open_restricted=%(open_restricted)s, is_gakuninrdm=%(is_gakuninrdm)s WHERE workflow_workflow.id = %(workflow_workflow_id)s'] [parameters: {'updated': datetime.datetime(2024, 4, 17, 6, 29, 21, 185042), 'flows_name': 'test', 'itemtype_id': 'test', 'open_restricted': True, 'is_gakuninrdm': True, 'workflow_workflow_id': 1}] (Background on this error at: http://sqlalche.me/e/9h9h)
ERROR    testapp:admin.py:505 wf_id:1
ERROR    testapp:admin.py:507 list_hide:[]
_______________ TestWorkFlowSettingView.test_save_workflow_role ________________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f9d5a90b8d0>
app = <Flask 'testapp'>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_save_workflow_role(self,app,users,workflow):
        role0 = (users[0]['obj']).roles[0]
        role1 = (users[1]['obj']).roles[0]
        role2 = (users[2]['obj']).roles[0]
        role3 = (users[3]['obj']).roles[0]
        role4 = (users[4]['obj']).roles[0]
    
        wf = workflow['workflow']
    
        with app.test_request_context():
>           assert WorkFlowSettingView.save_workflow_role(wf.id,[role0.id,role1.id,role2.id,role3.id,role4.id])
E           AssertionError: assert None
E            +  where None = <bound method WorkFlowSettingView.save_workflow_role of <class 'weko_workflow.admin.WorkFlowSettingView'>>(1, [])
E            +    where <bound method WorkFlowSettingView.save_workflow_role of <class 'weko_workflow.admin.WorkFlowSettingView'>> = WorkFlowSettingView.save_workflow_role
E            +    and   1 = <WorkFlow 1>.id

tests/test_admin.py:551: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:admin.py:505 wf_id:1
ERROR    testapp:admin.py:507 list_hide:[3, 2, 1, 4, 5]
_____________ TestWorkFlowSettingView.test_get_language_workflows ______________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f9d5a457518>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_get_language_workflows(self,users):
>       with self.test_request_context():
E       AttributeError: 'TestWorkFlowSettingView' object has no attribute 'test_request_context'

tests/test_admin.py:556: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________ test_WorkActivity_get_activity_index_search __________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9d5b1a1f98>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d5badfeb8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'SELECT workflow_activity.status AS workflow_activity_status, workflow_activity.created AS workflow_activity_created, ...r AS workflow_activity_action_order \nFROM workflow_activity \nWHERE workflow_activity.activity_id = %(activity_id_1)s'
parameters = {'activity_id_1': 1}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7f9d5b184358>, [immutabledict({})])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f9d5b1a1f60>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d5b184f60>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d5badfeb8>
cursor = <cursor object at 0x7f9d5e6c6af0; closed: -1>
statement = 'SELECT workflow_activity.status AS workflow_activity_status, workflow_activity.created AS workflow_activity_created, ...r AS workflow_activity_action_order \nFROM workflow_activity \nWHERE workflow_activity.activity_id = %(activity_id_1)s'
parameters = {'activity_id_1': 1}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d5b184f60>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.ProgrammingError: operator does not exist: character varying = integer
E       LINE 3: WHERE workflow_activity.activity_id = 1
E                                                   ^
E       HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: ProgrammingError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    def test_WorkActivity_get_activity_index_search(app, db_register):
        activity = WorkActivity()
        with app.test_request_context():
            activity_detail, item, steps, action_id, cur_step, \
                temporary_comment, approval_record, step_item_login_url,\
>               histories, res_check, pid, community_id, ctx = activity.get_activity_index_search(1)

tests/test_api.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/api.py:2103: in get_activity_index_search
    activity_detail = activity.get_activity_detail(activity_id)
weko_workflow/api.py:2043: in get_activity_detail
    activity = self.get_activity_by_id(activity_id)
weko_workflow/api.py:2292: in get_activity_by_id
    return _Activity.query.filter_by(activity_id=activity_id).one_or_none()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3008: in one_or_none
    ret = list(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3081: in __iter__
    return self._execute_and_instances(context)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3106: in _execute_and_instances
    result = conn.execute(querycontext.statement, self._params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d5badfeb8>
cursor = <cursor object at 0x7f9d5e6c6af0; closed: -1>
statement = 'SELECT workflow_activity.status AS workflow_activity_status, workflow_activity.created AS workflow_activity_created, ...r AS workflow_activity_action_order \nFROM workflow_activity \nWHERE workflow_activity.activity_id = %(activity_id_1)s'
parameters = {'activity_id_1': 1}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d5b184f60>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) operator does not exist: character varying = integer
E       LINE 3: WHERE workflow_activity.activity_id = 1
E                                                   ^
E       HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
E        [SQL: 'SELECT workflow_activity.status AS workflow_activity_status, workflow_activity.created AS workflow_activity_created, workflow_activity.updated AS workflow_activity_updated, workflow_activity.id AS workflow_activity_id, workflow_activity.activity_id AS workflow_activity_activity_id, workflow_activity.activity_name AS workflow_activity_activity_name, workflow_activity.item_id AS workflow_activity_item_id, workflow_activity.workflow_id AS workflow_activity_workflow_id, workflow_activity.workflow_status AS workflow_activity_workflow_status, workflow_activity.flow_id AS workflow_activity_flow_id, workflow_activity.action_id AS workflow_activity_action_id, workflow_activity.action_status AS workflow_activity_action_status, workflow_activity.activity_login_user AS workflow_activity_activity_login_user, workflow_activity.activity_update_user AS workflow_activity_activity_update_user, workflow_activity.activity_status AS workflow_activity_activity_status, workflow_activity.activity_start AS workflow_activity_activity_start, workflow_activity.activity_end AS workflow_activity_activity_end, workflow_activity.activity_community_id AS workflow_activity_activity_community_id, workflow_activity.activity_confirm_term_of_use AS workflow_activity_activity_confirm_term_of_use, workflow_activity.title AS workflow_activity_title, workflow_activity.shared_user_id AS workflow_activity_shared_user_id, workflow_activity.temp_data AS workflow_activity_temp_data, workflow_activity.approval1 AS workflow_activity_approval1, workflow_activity.approval2 AS workflow_activity_approval2, workflow_activity.extra_info AS workflow_activity_extra_info, workflow_activity.action_order AS workflow_activity_action_order \nFROM workflow_activity \nWHERE workflow_activity.activity_id = %(activity_id_1)s'] [parameters: {'activity_id_1': 1}] (Background on this error at: http://sqlalche.me/e/f405)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: ProgrammingError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_WorkActivity_upt_activity_detail _____________________

app = <Flask 'testapp'>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<PersistentIdentifier recid:1 / rec:5e66c4ed-6af6-437b-a517-c11521776740 (R)>, <PersistentIdentifier depid:1 / rec:5...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:2d66387f-1ec1-4c5b-b672-234c0ff04df2 (R)>, None, ...)]

    def test_WorkActivity_upt_activity_detail(app, db_register, db_records):
        activity = WorkActivity()
        db_activity = activity.upt_activity_detail(db_records[2][2].id)
>       assert db_activity == None
E       assert <Activity 4> == None
E         +<Activity 4>
E         -None

tests/test_api.py:122: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_init_workflow_tables ___________________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_init_workflow_tables(app,db,users):
        runner = app.test_cli_runner()
        result = runner.invoke(init_workflow_tables,["Action,action_status"])
        assert result.output ==  'workflow db has been initialised.\n'
        assert result.exit_code == 0
    
        result = runner.invoke(init_workflow_tables,["gakuninrdm_data"])
>       assert result.output == ""
E       assert ('(psycopg2.IntegrityError) insert or update on table "workflow_workflow" '\n 'violates foreign key constraint '\n '"fk_workflow_workflow_itemtype_id_item_type"\n'\n 'DETAIL:  Key (itemtype_id)=(15) is not present in table "item_type".\n'\n " [SQL: 'INSERT INTO workflow_workflow (status, created, updated, id, "\n 'flows_id, flows_name, itemtype_id, flow_id, is_deleted, open_restricted, '\n 'is_gakuninrdm) VALUES (%(status)s, %(created)s, %(updated)s, %(id)s, '\n '%(flows_id)s, %(flows_name)s, %(itemtype_id)s, %(flow_id)s, %(is_deleted)s, '\n "%(open_restricted)s, %(is_gakuninrdm)s)'] [parameters: {'status': 'N', "\n "'created': datetime.datetime(2024, 4, 17, 6, 31, 32, 593555), 'updated': "\n "datetime.datetime(2024, 4, 17, 6, 31, 32, 593570), 'id': -1, 'flows_id': "\n "UUID('56b95d38-88ae-4f30-9300-0f8d2d2a9865'), 'flows_name': "\n "'GRDM_デフォルトワークフロー', 'itemtype_id': 15, 'flow_id': -1, 'is_deleted': False, "\n "'open_restricted': False, 'is_gakuninrdm': True}] (Background on this error "\n 'at: http://sqlalche.me/e/gkpj)\n'\n 'workflow db init failed.\n') == ''
E         + (psycopg2.IntegrityError) insert or update on table "workflow_workflow" violates foreign key constraint "fk_workflow_workflow_itemtype_id_item_type"
E         + DETAIL:  Key (itemtype_id)=(15) is not present in table "item_type".
E         +  [SQL: 'INSERT INTO workflow_workflow (status, created, updated, id, flows_id, flows_name, itemtype_id, flow_id, is_deleted, open_restricted, is_gakuninrdm) VALUES (%(status)s, %(created)s, %(updated)s, %(id)s, %(flows_id)s, %(flows_name)s, %(itemtype_id)s, %(flow_id)s, %(is_deleted)s, %(open_restricted)s, %(is_gakuninrdm)s)'] [parameters: {'status': 'N', 'created': datetime.datetime(2024, 4, 17, 6, 31, 32, 593555), 'updated': datetime.datetime(2024, 4, 17, 6, 31, 32, 593570), 'id': -1, 'flows_id': UUID('56b95d38-88ae-4f30-9300-0f8d2d2a9865'), 'flows_name': 'GRDM_デフォルトワークフロー', 'itemtype_id': 15, 'flow_id': -1, 'is_deleted': False, 'open_restricted': False, 'is_gakuninrdm': True}] (Background on this error at: http://sqlalche.me/e/gkpj)
E         + workflow db init failed.

tests/test_cli.py:27: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________ test_cancel_expired_usage_report_activities __________________

app = <Flask 'testapp'>
db_guestactivity = ['MiAyMDI0LTA0LTE3IHVzZXJAdGVzdC5jb20gRkUwRTMyNzJFMTU2RUNDRA==', 'MSAyMDI0LTA0LTE3IHVzZXJAdGVzdC5jb20gQTdBRjU3MTMxRUIzMkZCMw==']

    def test_cancel_expired_usage_report_activities(app,db_guestactivity):
        with app.test_request_context():
            with pytest.raises(OperationalError):
>               cancel_expired_usage_report_activities()
E               Failed: DID NOT RAISE <class 'sqlalchemy.exc.OperationalError'>

tests/test_tasks.py:11: Failed
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_item_metadata_validation_2 ________________________

db_records_for_doi_validation_test = [(<PersistentIdentifier recid:1 / rec:bfcd8644-de07-4109-8e66-ff49b34f7619 (R)>, <PersistentIdentifier depid:1 / rec:b...pe': 'image'}}, <PersistentIdentifier parent:parent:6 / rec:002b503d-9fc5-4331-ac42-9e30abd869d5 (R)>, None, ...), ...]
item_type = <ItemType 1>

    def test_item_metadata_validation_2(db_records_for_doi_validation_test, item_type):
        #* 別表2-1 JaLC DOI
        recid0, depid0, record0, item0, parent0, doi0, deposit0 = db_records_for_doi_validation_test[0]
        result_0: dict = item_metadata_validation(
            item_id=recid0.object_uuid,
            identifier_type="1",
            record=record0,
        )
        result_0_keys: list = list(result_0.keys())
        result_0_check_list_1: list = [
            "jpcoar:URI",
            "dc:publisher",
            "dcndl:dateGranted",
            "datacite:date",
            "jpcoar:pageStart",
            "jpcoar:publisher_jpcoar"
        ]
        result_0_check_list_2: list = []
        for result_0_check_item_1 in result_0_check_list_1:
            for result_0_key in result_0_keys:
                if result_0_check_item_1 in result_0.get(result_0_key):
                    result_0_check_list_2.append(result_0_check_item_1)
>       assert len(result_0_check_list_1) == len(result_0_check_list_2)
E       assert 6 == 2
E         +6
E         -2

tests/test_utils.py:377: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________ test_handle_check_required_pattern_and_either _________________

db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
item_type = <ItemType 1>

    def test_handle_check_required_pattern_and_either(db,item_type):
        # mapping_data is None, mapping_key is None
        result = handle_check_required_pattern_and_either(None,None,None)
        assert result == None
    
        rec_uuid1 = uuid.uuid4()
        record_data = {
            "path":["1"],"recid":"1","title":["title"],"item_title": "title","item_type_id": "1",
            "item_1617186331708": {"attribute_name": "Title","attribute_value_mlt": [{ "subitem_1551255647225": "title1"}]},
            "item_1617258105262": {"attribute_name": "Resource Type","attribute_value_mlt": [{"resourceuri": "http://purl.org/coar/resource_type/c_5794","resourcetype": "conference paper"}]},
            "item_1617605131499": {"attribute_name": "File","attribute_type": "file","attribute_value_mlt": [{"url": {"url": "https://localhost/record/1/files/test.txt"},"date": [{"dateType": "Available","dateValue": "2022-10-03"}],"format": "text/tab-separated-values","filename": "check_2022-03-10.tsv","filesize": [{"value": "460 B"}],"accessrole": "open_access","version_id": "29dd361d-dc7f-49bc-b471-bdb5752afef5","displaytype": "detail","licensetype": "license_12",}]}
        }
        record = record = WekoRecord.create(record_data, id_=rec_uuid1)
        mapping_data = MappingData(record=record)
        # identifier_type = JaLC, not exist error
        result = handle_check_required_pattern_and_either(mapping_data,["dc:title"],"1")
        assert result == None
    
    
        rec_uuid2 = uuid.uuid4()
        record_data = {
            "path":["1"],"recid":"2","title":["title"],"item_title": "title","item_type_id": "1",
            "item_1617186331708": {"attribute_name": "Title","attribute_value_mlt": [{ "subitem_1551255647225": "title1"}]},
            "item_1617186941041": {"attribute_name": "Source Title","attribute_value_mlt": [{"subitem_1522650091861": "source_title1","subitem_1522650068558":"en"}]},
            "item_1617258105262": {"attribute_name": "Resource Type","attribute_value_mlt": [{"resourceuri": "http://purl.org/coar/resource_type/c_5794","resourcetype": "conference paper"}]},
            "item_1617605131499": {"attribute_name": "File","attribute_type": "file","attribute_value_mlt": [{"url": {"url": "https://localhost/record/1/files/test.txt"},"date": [{"dateType": "Available","dateValue": "2022-10-03"}],"format": "text/tab-separated-values","filename": "check_2022-03-10.tsv","filesize": [{"value": "460 B"}],"accessrole": "open_access","version_id": "29dd361d-dc7f-49bc-b471-bdb5752afef5","displaytype": "detail","licensetype": "license_12",}]}
        }
        record = record = WekoRecord.create(record_data, id_=rec_uuid2)
        mapping_data = MappingData(record=record)
        # current pattern
        result = handle_check_required_pattern_and_either(mapping_data,['jpcoar:sourceTitle'],"1")
        assert result == None
    
    
        rec_uuid3 = uuid.uuid4()
        record_data = {
            "path":["1"],"recid":"3","title":["title"],"item_title": "title","item_type_id": "1",
            "item_1617186331708": {"attribute_name": "Title","attribute_value_mlt": [{ "subitem_1551255647225": "title1"}]},
            "item_1617186941041": {"attribute_name": "Source Title","attribute_value_mlt": [{"subitem_1522650091861": "source_title1","subitem_1522650068558":"ja"}]},
            "item_1617258105262": {"attribute_name": "Resource Type","attribute_value_mlt": [{"resourceuri": "http://purl.org/coar/resource_type/c_5794","resourcetype": "conference paper"}]},
            "item_1617605131499": {"attribute_name": "File","attribute_type": "file","attribute_value_mlt": [{"url": {"url": "https://localhost/record/1/files/test.txt"},"date": [{"dateType": "Available","dateValue": "2022-10-03"}],"format": "text/tab-separated-values","filename": "check_2022-03-10.tsv","filesize": [{"value": "460 B"}],"accessrole": "open_access","version_id": "29dd361d-dc7f-49bc-b471-bdb5752afef5","displaytype": "detail","licensetype": "license_12",}]}
        }
        record = record = WekoRecord.create(record_data, id_=rec_uuid3)
        mapping_data = MappingData(record=record)
        # not current pattern
        result = handle_check_required_pattern_and_either(mapping_data,['jpcoar:sourceTitle'],"1")
>       assert result == {'required': [], 'required_key': [], 'pattern': ['item_1617186941041.subitem_1522650068558'], 'either': [], 'either_key': [], 'mapping': []}
E       AssertionError: assert None == {'either': [],\n 'either_key': [],\n 'mapping': [],\n 'pattern': ['item_1617186941041.subitem_1522650068558'],\n 'required': [],\n 'required_key': []}
E         +None
E         -{'required': [], 'required_key': [], 'pattern': ['item_1617186941041.subitem_1522650068558'], 'either': [], 'either_key': [], 'mapping': []}

tests/test_utils.py:703: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_delete_bucket ______________________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9d5594de80>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d55a85780>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = %(id_1)s'
parameters = {'id_1': UUID('0829d421-3496-4654-8e6d-cc94b92418ec')}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7f9d559baac8>, [{}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f9d5599cd30>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d559bacf8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d55a85780>
cursor = <cursor object at 0x7f9d5595e048; closed: -1>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = %(id_1)s'
parameters = {'id_1': UUID('0829d421-3496-4654-8e6d-cc94b92418ec')}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d559bacf8>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.IntegrityError: update or delete on table "files_bucket" violates foreign key constraint "fk_records_buckets_bucket_id_files_bucket" on table "records_buckets"
E       DETAIL:  Key (id)=(0829d421-3496-4654-8e6d-cc94b92418ec) is still referenced from table "records_buckets".

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db_records = [(<PersistentIdentifier recid:1 / rec:4e39259c-f542-4627-8d0c-ffbad4d86b03 (R)>, <PersistentIdentifier depid:1 / rec:4...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:7c433de3-a2ea-47ba-ae08-f7e5560bcc63 (R)>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f9d55a80e18>

    def test_delete_bucket(db_records, add_file):
        bucket,_ = add_file(db_records[2][2])
        bucket_id = bucket.id
>       delete_bucket(bucket_id)

tests/test_utils.py:833: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:1485: in delete_bucket
    bucket.remove()
../invenio-files-rest/invenio_files_rest/models.py:152: in inner
    return f(self, *args, **kwargs)
../invenio-files-rest/invenio_files_rest/models.py:589: in remove
    self.query.filter_by(id=self.id).delete()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3440: in delete
    delete_op.exec_()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1636: in exec_
    self._do_exec()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1866: in _do_exec
    self._execute_stmt(delete_stmt)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1642: in _execute_stmt
    stmt, params=self.query._params, mapper=self.mapper
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1263: in execute
    clause, params or {}
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d55a85780>
cursor = <cursor object at 0x7f9d5595e048; closed: -1>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = %(id_1)s'
parameters = {'id_1': UUID('0829d421-3496-4654-8e6d-cc94b92418ec')}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d559bacf8>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.IntegrityError) update or delete on table "files_bucket" violates foreign key constraint "fk_records_buckets_bucket_id_files_bucket" on table "records_buckets"
E       DETAIL:  Key (id)=(0829d421-3496-4654-8e6d-cc94b92418ec) is still referenced from table "records_buckets".
E        [SQL: 'DELETE FROM files_bucket WHERE files_bucket.id = %(id_1)s'] [parameters: {'id_1': UUID('0829d421-3496-4654-8e6d-cc94b92418ec')}] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_set_bucket_default_size _________________________

db_records = [(<PersistentIdentifier recid:1 / rec:a8ce77bd-4242-478b-a544-a0f0bf1bc9e9 (R)>, <PersistentIdentifier depid:1 / rec:a...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:cfb2f217-4db2-4027-9786-63d1f57589ea (R)>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f9d55409ea0>

    def test_set_bucket_default_size(db_records, add_file):
        bucket_10, rbucket_10 = add_file(db_records[2][2])
>       set_bucket_default_size(rbucket_10.id)
E       AttributeError: 'RecordsBuckets' object has no attribute 'id'

tests/test_utils.py:865: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_get_parent_pid_with_type _________________________

db_records = [(<PersistentIdentifier recid:1 / rec:b0894046-510c-434e-9492-4efbcfe0a946 (R)>, <PersistentIdentifier depid:1 / rec:b...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:5727bbf2-6188-4b3d-8a18-c271c28934dc (R)>, None, ...)]

    def test_get_parent_pid_with_type(db_records):
        result = get_parent_pid_with_type("doi",db_records[0][2].id)
        assert result == db_records[0][5]
    
>       result = get_parent_pid_with_type("hdl",db_records[4][2].id)

tests/test_utils.py:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

pid_type = 'hdl', object_uuid = UUID('eed78d31-436c-4e14-a9e2-7e2590835c7a')

    def get_parent_pid_with_type(pid_type, object_uuid):
        """Get Persistent Identifier Object by pid_value or item_uuid.
    
        Arguments:
            pid_type     -- {string} 'doi' (default) or 'hdl'
            object_uuid  -- {uuid} assigned object's uuid
    
        Returns:
            pid_object   -- PID object or None
    
        """
        try:
            record = WekoRecord.get_record(object_uuid)
            with db.session.no_autoflush:
                pid_object = PersistentIdentifier.query.filter_by(
                    pid_type=pid_type,
>                   object_uuid=record.pid_parent.object_uuid
                ).order_by(PersistentIdentifier.created.desc()).first()
E               AttributeError: 'NoneType' object has no attribute 'object_uuid'

weko_workflow/utils.py:1637: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_prepare_edit_workflow __________________________

app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_records = [(<PersistentIdentifier recid:1 / rec:f683ea23-bcf3-443b-8911-1f4711eb300e (R)>, <PersistentIdentifier depid:1 / rec:f...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:1fa69a05-519e-4ec6-8cd2-8b4fb39644dd (R)>, None, ...)]
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d559d37f0>

    def test_prepare_edit_workflow(app, workflow, db_records,users,mocker):
        #login(client=client, email=users[2]["email"])
        with app.test_request_context():
            login_user(users[2]["obj"])
            mocker.patch("weko_workflow.utils.WekoDeposit.update")
            mocker.patch("weko_workflow.utils.WekoDeposit.commit")
            data = {
                "flow_id":workflow["flow"].id,
                "workflow_id":workflow["workflow"].id,
                "community":1,
                "itemtype_id":1,
                "activity_login_user":1,
                "activity_update_user":1
            }
            recid = db_records[0][0]
            deposit = db_records[0][6]
>           result = prepare_edit_workflow(data,recid,deposit)

tests/test_utils.py:984: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:1761: in prepare_edit_workflow
    _deposit.publish()
../weko-deposit/weko_deposit/api.py:674: in publish
    deposit = self.publish_without_commit(pid, id_)
../weko-deposit/weko_deposit/api.py:699: in publish_without_commit
    deposit = super(WekoDeposit, self).publish(pid, id_)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {'_oai': {'id': 'oai:weko3.example.org:00000001.0', 'sets': []}, 'path': ['1'], 'owner': '1', 'recid': '1.0', 'title':...rence paper'}]}, 'relation_version_is_last': True, '$schema': 'https://localhost/schemas/deposits/deposit-v1.0.0.json'}
args = (None, None), kwargs = {}

    @wraps(method)
    def wrapper(self, *args, **kwargs):
        """Check current deposit status."""
        if status != self.status:
>           raise PIDInvalidAction()
E           invenio_pidstore.errors.PIDInvalidAction

../invenio-deposit/invenio_deposit/api.py:99: PIDInvalidAction
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_handle_finish_workflow __________________________

workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_records = [(<PersistentIdentifier recid:1 / rec:91c264c2-a7fd-42b3-968e-3a43d6879947 (R)>, <PersistentIdentifier depid:1 / rec:9...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:7ff57a70-bd93-4be0-bc10-c92792e9e12f (R)>, None, ...)]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d57dd3cf8>

    def test_handle_finish_workflow(workflow, db_records, mocker):
        result = handle_finish_workflow(None, None, None)
        assert result == None
        mocker.patch("weko_deposit.api.WekoDeposit.publish")
        mocker.patch("weko_deposit.api.WekoDeposit.commit")
>       mocker.patch("weko_workflow.utils.update_records_sets.delay")

tests/test_utils.py:993: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:384: in __call__
    **kwargs
.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:183: in _start_patch
    mocked = p.start()  # type: unittest.mock.MagicMock
/usr/local/lib/python3.6/unittest/mock.py:1378: in start
    result = self.__enter__()
/usr/local/lib/python3.6/unittest/mock.py:1231: in __enter__
    self.target = self.getter()
/usr/local/lib/python3.6/unittest/mock.py:1401: in <lambda>
    getter = lambda: _importer(target)
/usr/local/lib/python3.6/unittest/mock.py:1088: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'weko_workflow.utils' from '/code/modules/weko-workflow/weko_workflow/utils.py'>
comp = 'update_records_sets'
import_path = 'weko_workflow.utils.update_records_sets'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'weko_workflow.utils.update_records_sets'; 'weko_workflow.utils' is not a package

/usr/local/lib/python3.6/unittest/mock.py:1077: ModuleNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_get_url_root _______________________________

app = <Flask 'testapp'>

    def test_get_url_root(app):
        app.config["THEME_SITEURL"] = "https://weko3.ir.rcos.nii.ac.jp"
        app.config["SERVER_NAME"] = "TEST_SERVER"
        with app.app_context():
>           assert get_url_root() == "https://weko3.ir.rcos.nii.ac.jp/"
E           AssertionError: assert 'http://TEST_SERVER.localdomain/' == 'https://weko3.ir.rcos.nii.ac.jp/'
E             - https://weko3.ir.rcos.nii.ac.jp/
E             + http://TEST_SERVER.localdomain/

tests/test_utils.py:1084: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_get_item_info ______________________________

item_id = 'item_id'

    def get_item_info(item_id):
        """Get item info.
    
        :item_id: item id
        """
        if not item_id:
            return dict()
        try:
>           item = ItemsMetadata.get_record(id_=item_id)

weko_workflow/utils.py:2534: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='get_record' id='140313694103592'>, args = ()
kwargs = {'id_': 'item_id'}

    def __call__(_mock_self, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        _mock_self._mock_check_sig(*args, **kwargs)
        _mock_self._increment_mock_call(*args, **kwargs)
>       return _mock_self._mock_call(*args, **kwargs)

.tox/c1/lib/python3.6/site-packages/mock/mock.py:1149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='get_record' id='140313694103592'>, args = ()
kwargs = {'id_': 'item_id'}

    def _mock_call(_mock_self, *args, **kwargs):
>       return _mock_self._execute_mock_call(*args, **kwargs)

.tox/c1/lib/python3.6/site-packages/mock/mock.py:1153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='get_record' id='140313694103592'>, args = ()
kwargs = {'id_': 'item_id'}
self = <MagicMock name='get_record' id='140313694103592'>
effect = Exception('test error',)

    def _execute_mock_call(_mock_self, *args, **kwargs):
        self = _mock_self
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: test error

.tox/c1/lib/python3.6/site-packages/mock/mock.py:1210: Exception

During handling of the above exception, another exception occurred:

db_records = [(<PersistentIdentifier recid:1 / rec:9f8837d7-acc4-44e6-816b-ed0724e798bb (R)>, <PersistentIdentifier depid:1 / rec:9...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:1471a171-01b7-440f-ab15-0150793c7bf2 (R)>, None, ...)]

    def test_get_item_info(db_records):
        result = get_item_info(db_records[0][3].id)
        assert result == {'type': 'depid', 'value': '1', 'revision_id': 0, 'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': '', 'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper', 'subitem_thumbnail': [{'thumbnail_url': '/api/files/29ad484d-4ed1-4caf-8b21-ab348ae7bf28/test.png?versionId=ecd5715e-4ca5-4e45-b93c-5089f52860a0', 'thumbnail_label': 'test.png'}]}
    
        with patch("weko_workflow.utils.ItemsMetadata.get_record",side_effect=Exception("test error")):
>           result = get_item_info("item_id")

tests/test_utils.py:1524: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:2536: in get_item_info
    current_app.logger.exception('Cannot get item data:', ex)
/usr/local/lib/python3.6/logging/__init__.py:1343: in exception
    self.error(msg, *args, exc_info=exc_info, **kwargs)
/usr/local/lib/python3.6/logging/__init__.py:1337: in error
    self._log(ERROR, msg, args, **kwargs)
/usr/local/lib/python3.6/logging/__init__.py:1444: in _log
    self.handle(record)
/usr/local/lib/python3.6/logging/__init__.py:1454: in handle
    self.callHandlers(record)
/usr/local/lib/python3.6/logging/__init__.py:1516: in callHandlers
    hdlr.handle(record)
/usr/local/lib/python3.6/logging/__init__.py:865: in handle
    self.emit(record)
.tox/c1/lib/python3.6/site-packages/_pytest/logging.py:328: in emit
    super().emit(record)
/usr/local/lib/python3.6/logging/__init__.py:1000: in emit
    self.handleError(record)
/usr/local/lib/python3.6/logging/__init__.py:994: in emit
    msg = self.format(record)
/usr/local/lib/python3.6/logging/__init__.py:840: in format
    return fmt.format(record)
.tox/c1/lib/python3.6/site-packages/_pytest/logging.py:89: in format
    return super().format(record)
/usr/local/lib/python3.6/logging/__init__.py:577: in format
    record.message = record.getMessage()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <LogRecord: testapp, 40, /code/modules/weko-workflow/weko_workflow/utils.py, 2536, "Cannot get item data:">

    def getMessage(self):
        """
        Return the message for this LogRecord.
    
        Return the message for this LogRecord after merging any user-supplied
        arguments with the message.
        """
        msg = str(self.msg)
        if self.args:
>           msg = msg % self.args
E           TypeError: not all arguments converted during string formatting

/usr/local/lib/python3.6/logging/__init__.py:338: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_delete_guest_activity __________________________

client = <FlaskClient <Flask 'testapp'>>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_delete_guest_activity(client,workflow):
        token_value="A-20221003-00001 2022-10-01 guest@test.org CE06FDFB15823A5C"
        token_value = base64.b64encode(token_value.encode()).decode()
        activity_id = "A-20221003-00001"
        guest_activity = GuestActivity.create(
            user_mail="guest@test.org",
            record_id=str(uuid.uuid4()),
            file_name="test.txt",
            activity_id=activity_id,
            token=token_value,
            expiration_date=30
        )
    
        result = delete_guest_activity(activity_id)
>       assert result == True
E       assert None == True
E         +None
E         -True

tests/test_utils.py:2337: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________ test___init_activity_detail_data_for_guest __________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9d4f46ce80>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d4d1ecdd8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'SELECT accounts_user.id AS accounts_user_id, accounts_user.email AS accounts_user_email, accounts_user.password AS ac...login_count AS accounts_user_login_count \nFROM accounts_user \nWHERE accounts_user.id = %(id_1)s \n LIMIT %(param_1)s'
parameters = {'id_1': 'dummy user', 'param_1': 1}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7f9d51001518>, [immutabledict({})])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f9d4f46c940>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d51040978>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d4d1ecdd8>
cursor = <cursor object at 0x7f9d544ee238; closed: -1>
statement = 'SELECT accounts_user.id AS accounts_user_id, accounts_user.email AS accounts_user_email, accounts_user.password AS ac...login_count AS accounts_user_login_count \nFROM accounts_user \nWHERE accounts_user.id = %(id_1)s \n LIMIT %(param_1)s'
parameters = {'id_1': 'dummy user', 'param_1': 1}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d51040978>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.DataError: invalid input syntax for type integer: "dummy user"
E       LINE 3: WHERE accounts_user.id = 'dummy user' 
E                                        ^

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: DataError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d4cdbaeb8>

    def test___init_activity_detail_data_for_guest(app,db,users,db_register,mocker):
        with app.test_request_context():
    
            activity = db_register["activities"][1]
            activity_id = activity.activity_id
            db_history1 = ActivityHistory(
                    activity_id=activity_id,
                    action_id=3,
                    action_user=users[0]["id"],
                    action_status="F",
                    action_date=datetime.datetime.strptime('2022/04/14 3:01:53.931', '%Y/%m/%d %H:%M:%S.%f'),
                    action_order=1
                )
            with db.session.begin_nested():
                db.session.add(db_history1)
    
            test_steps = [
                {"ActivityId":activity_id,"ActionId":1,"ActionName":"Start","ActionVersion":"1.0.0","ActionEndpoint":"begin_action","Author":"contributor@test.org","Status":"action_doing","ActionOrder":1},
                {"ActivityId":activity_id,"ActionId":3,"ActionName":"Item Registration","ActionVersion":"1.0.0","ActionEndpoint":"item_login","Author":"","Status":" ","ActionOrder":2},
                {"ActivityId":activity_id,"ActionId":5,"ActionName":"Item Link","ActionVersion":"1.0.0","ActionEndpoint":"item_link","Author":"","Status":" ","ActionOrder":3}
            ]
            action_endpoint = "begin_action"
            action_id=1
            activity_detail=activity
            cur_action=activity.action
            histories=[db_history1]
            item=ItemsMetadata.get_record(id_=activity.item_id)
            steps=test_steps,
            temporary_comment=None
            workflow_detail=db_register["workflow"]
            display_info = (action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)
            mocker.patch("weko_workflow.utils.get_activity_display_info",return_value=display_info)
            mocker.patch("weko_workflow.utils.get_approval_keys",return_value=[])
            community_id=""
            session['user_id'] = 'dummy user'
            session["guest_email"] = "guest@test.org"
            user_profile = {
                "results":{
                    'subitem_user_name': "guest",
                    'subitem_fullname': "guest",
                    'subitem_mail_address': "guest@test.org",
                    'subitem_displayname': "guest",
                    'subitem_university/institution': '',
                    'subitem_affiliated_division/department': '',
                    'subitem_position': '',
                    'subitem_phone_number': '',
                    'subitem_position(other)': '',
                    'subitem_affiliated_institution': [],
                }
            }
            test = dict(
                page=None,
                render_widgets=False,
                community_id=community_id,
                temporary_journal='',
                temporary_idf_grant='',
                temporary_idf_grant_suffix='',
                idf_grant_data='',
                idf_grant_input=IDENTIFIER_GRANT_LIST,
                idf_grant_method=0,
                error_type='item_login_error',
                cur_step=action_endpoint,
                approval_record=[],
                recid=None,
                links=None,
                term_and_condition_content='',
                is_auto_set_index_action=True,
                application_item_type=False,
                auto_fill_title="",
                auto_fill_data_type=None,
                is_show_autofill_metadata=True,
                is_hidden_pubdate=False,
                position_list=WEKO_USERPROFILES_POSITION_LIST,
                institute_position_list=WEKO_USERPROFILES_INSTITUTE_POSITION_LIST,
                item_type_name="テストアイテムタイプ",
                res_check=1,
                action_id=action_id,
                activity=activity_detail,
                histories=histories,
                item=item,
                steps=steps,
                temporary_comment=temporary_comment,
                workflow_detail=workflow_detail,
                user_profile=user_profile,
                list_license=[{'value': 'license_free', 'name': 'write your own license'}, {'value': 'license_12', 'name': 'Creative Commons CC0 1.0 Universal Public Domain Designation'}, {'value': 'license_6', 'name': 'Creative Commons Attribution 3.0 Unported (CC BY 3.0)'}, {'value': 'license_7', 'name': 'Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)'}, {'value': 'license_8', 'name': 'Creative Commons Attribution-NoDerivs 3.0 Unported (CC BY-ND 3.0)'}, {'value': 'license_9', 'name': 'Creative Commons Attribution-NonCommercial 3.0 Unported (CC BY-NC 3.0)'}, {'value': 'license_10', 'name': 'Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)'}, {'value': 'license_11', 'name': 'Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0)'}, {'value': 'license_0', 'name': 'Creative Commons Attribution 4.0 International (CC BY 4.0)'}, {'value': 'license_1', 'name': 'Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)'}, {'value': 'license_2', 'name': 'Creative Commons Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)'}, {'value': 'license_3', 'name': 'Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)'}, {'value': 'license_4', 'name': 'Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)'}, {'value': 'license_5', 'name': 'Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)'}],
                cur_action=cur_action,
                activity_id=activity_detail.activity_id,
                is_enable_item_name_link=True,
                enable_feedback_maillist=current_app.config[
                    'WEKO_WORKFLOW_ENABLE_FEEDBACK_MAIL'],
                enable_contributor=current_app.config[
                    'WEKO_WORKFLOW_ENABLE_CONTRIBUTOR'],
                out_put_report_title="",
                action_endpoint_key={},
                approval_email_key=[],
                step_item_login_url="weko_items_ui/iframe/item_edit.html",
                need_file=True,
                need_billing_file=False,
                records={'id': '1.1', 'pid': {'type': 'depid', 'value': '1.1', 'revision_id': 0}, 'lang': 'ja', 'owner': '1', 'title': 'title', 'owners': [1], 'status': 'published', '$schema': '/items/jsonschema/15', 'pubdate': '2022-08-20', 'created_by': 1, 'owners_ext': {'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': ''}, 'shared_user_id': -1, 'item_1617186331708': [{'subitem_1551255647225': 'ff', 'subitem_1551255648112': 'ja'}], 'item_1617258105262': {'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper'}},
                record=[],
                jsonschema="/items/jsonschema/1",
                schemaform="/items/schemaform/1",
                item_save_uri="/items/iframe/model/save",
                files=[],
                endpoints={},
                need_thumbnail=False,
                files_thumbnail=[],
                allow_multi_thumbnail=False,
                id=db_register["workflow"].itemtype_id,
            )
    
            result = __init_activity_detail_data_for_guest(activity_id,community_id)
>           assert result == test

tests/test_utils.py:2504: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/speaklater.py:163: in __eq__
    return self.value == other
.tox/c1/lib/python3.6/site-packages/speaklater.py:115: in <lambda>
    value = property(lambda x: x._func(*x._args, **x._kwargs))
.tox/c1/lib/python3.6/site-packages/flask_babelex/__init__.py:626: in gettext
    return get_domain().gettext(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask_babelex/__init__.py:533: in gettext
    t = self.get_translations()
.tox/c1/lib/python3.6/site-packages/invenio_i18n/babel.py:117: in get_translations
    locale = get_locale()
.tox/c1/lib/python3.6/site-packages/flask_babelex/__init__.py:220: in get_locale
    rv = babel.locale_selector_func()
.tox/c1/lib/python3.6/site-packages/invenio_i18n/selectors.py:56: in get_locale
    current_user.is_authenticated:
.tox/c1/lib/python3.6/site-packages/werkzeug/local.py:348: in __getattr__
    return getattr(self._get_current_object(), name)
.tox/c1/lib/python3.6/site-packages/werkzeug/local.py:307: in _get_current_object
    return self.__local()
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:26: in <lambda>
    current_user = LocalProxy(lambda: _get_user())
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:335: in _get_user
    current_app.login_manager._load_user()
.tox/c1/lib/python3.6/site-packages/flask_login/login_manager.py:359: in _load_user
    return self.reload_user()
.tox/c1/lib/python3.6/site-packages/flask_login/login_manager.py:321: in reload_user
    user = self.user_callback(user_id)
.tox/c1/lib/python3.6/site-packages/flask_security/core.py:221: in _user_loader
    return _security.datastore.find_user(id=user_id)
.tox/c1/lib/python3.6/site-packages/flask_security/datastore.py:254: in find_user
    return self.user_model.query.filter_by(**kwargs).first()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:2979: in first
    ret = list(self[0:1])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:2771: in __getitem__
    return list(res)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3081: in __iter__
    return self._execute_and_instances(context)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3106: in _execute_and_instances
    result = conn.execute(querycontext.statement, self._params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d4d1ecdd8>
cursor = <cursor object at 0x7f9d544ee238; closed: -1>
statement = 'SELECT accounts_user.id AS accounts_user_id, accounts_user.email AS accounts_user_email, accounts_user.password AS ac...login_count AS accounts_user_login_count \nFROM accounts_user \nWHERE accounts_user.id = %(id_1)s \n LIMIT %(param_1)s'
parameters = {'id_1': 'dummy user', 'param_1': 1}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d51040978>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.DataError: (psycopg2.DataError) invalid input syntax for type integer: "dummy user"
E       LINE 3: WHERE accounts_user.id = 'dummy user' 
E                                        ^
E        [SQL: 'SELECT accounts_user.id AS accounts_user_id, accounts_user.email AS accounts_user_email, accounts_user.password AS accounts_user_password, accounts_user.active AS accounts_user_active, accounts_user.confirmed_at AS accounts_user_confirmed_at, accounts_user.last_login_at AS accounts_user_last_login_at, accounts_user.current_login_at AS accounts_user_current_login_at, accounts_user.last_login_ip AS accounts_user_last_login_ip, accounts_user.current_login_ip AS accounts_user_current_login_ip, accounts_user.login_count AS accounts_user_login_count \nFROM accounts_user \nWHERE accounts_user.id = %(id_1)s \n LIMIT %(param_1)s'] [parameters: {'id_1': 'dummy user', 'param_1': 1}] (Background on this error at: http://sqlalche.me/e/9h9h)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: DataError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________ test_update_system_data_for_activity _____________________

db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}

    def test_update_system_data_for_activity(db_register):
        update_system_data_for_activity(None,None,None)
    
        key = "temp_key"
        value = {"data_key":"data_value"}
        activity = db_register["activities"][1]
        update_system_data_for_activity(activity,key,value)
>       assert activity.temp_data == {"metainfo":{key:value}}
E       assert '{"metainfo": {"temp_key": {"data_key": "data_value"}}}' == {'metainfo': {'temp_key': {'data_key': 'data_value'}}}
E         +'{"metainfo": {"temp_key": {"data_key": "data_value"}}}'
E         -{'metainfo': {'temp_key': {'data_key': 'data_value'}}}

tests/test_utils.py:2971: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_prepare_doi_link_workflow ________________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9d494a1860>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d494976a0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'SELECT doi_identifier.id AS doi_identifier_id, doi_identifier.repository AS doi_identifier_repository, doi_identifier...updated_date AS doi_identifier_updated_date \nFROM doi_identifier \nWHERE doi_identifier.repository = %(repository_1)s'
parameters = {'repository_1': 'Root Index'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7f9d494a17f0>, [immutabledict({})])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f9d49497f60>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d494a1a20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d494976a0>
cursor = <cursor object at 0x7f9d4b6c0618; closed: -1>
statement = 'SELECT doi_identifier.id AS doi_identifier_id, doi_identifier.repository AS doi_identifier_repository, doi_identifier...updated_date AS doi_identifier_updated_date \nFROM doi_identifier \nWHERE doi_identifier.repository = %(repository_1)s'
parameters = {'repository_1': 'Root Index'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d494a1a20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.ProgrammingError: relation "doi_identifier" does not exist
E       LINE 2: FROM doi_identifier 
E                    ^

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: ProgrammingError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    def test_prepare_doi_link_workflow(app):
        app.config["PRESERVE_CONTEXT_ON_EXCEPTION"] = False
        with app.test_request_context(data={}):
            doi_identifier = Identifier(id=1, repository='Root Index',jalc_flag= True,jalc_crossref_flag= True,jalc_datacite_flag=True,ndl_jalc_flag=True,
                jalc_doi='123',jalc_crossref_doi='1234',jalc_datacite_doi='12345',ndl_jalc_doi='123456',suffix='suffix_',
                created_userId='1',created_date=datetime.datetime.strptime('2022-09-28 04:33:42','%Y-%m-%d %H:%M:%S'),
                updated_userId='1',updated_date=datetime.datetime.strptime('2022-09-28 04:33:42','%Y-%m-%d %H:%M:%S')
            )
            with patch("weko_workflow.utils.get_identifier_setting",return_value=doi_identifier):
    
                doi_input = {'action_identifier_select': '1',
                              'action_identifier_jalc_doi': 'test_jalc_doi',
                              'action_identifier_jalc_cr_doi': 'test_cr_doi',
                              'action_identifier_jalc_dc_doi': 'test_dc_doi',
                              'action_identifier_ndl_jalc_doi': 'test_ndl_doi'
                              }
                # suffix_method is 0
                app.config["IDENTIFIER_GRANT_SUFFIX_METHOD"]=0
                result = prepare_doi_link_workflow("123456", doi_input)
                test = {
                    'identifier_grant_jalc_doi_link': "https://doi.org/123/0000123456",
                    'identifier_grant_jalc_cr_doi_link': "https://doi.org/1234/0000123456",
                    'identifier_grant_jalc_dc_doi_link': "https://doi.org/12345/0000123456",
                    'identifier_grant_ndl_jalc_doi_link': "https://doi.org/123456/test_ndl_doi"
                }
                assert result == test
    
                # suffix_method is 1
                app.config["IDENTIFIER_GRANT_SUFFIX_METHOD"]=1
                result = prepare_doi_link_workflow("123456", doi_input)
                test = {
                    'identifier_grant_jalc_doi_link': "https://doi.org/123/suffix_test_jalc_doi",
                    'identifier_grant_jalc_cr_doi_link': "https://doi.org/1234/suffix_test_cr_doi",
                    'identifier_grant_jalc_dc_doi_link': "https://doi.org/12345/suffix_test_dc_doi",
                    'identifier_grant_ndl_jalc_doi_link': "https://doi.org/123456/test_ndl_doi"
                }
                assert result == test
    
                # suffix_method is 2
                app.config["IDENTIFIER_GRANT_SUFFIX_METHOD"]=2
                result = prepare_doi_link_workflow("123456", doi_input)
                test = {
                    'identifier_grant_jalc_doi_link': "https://doi.org/123/test_jalc_doi",
                    'identifier_grant_jalc_cr_doi_link': "https://doi.org/1234/test_cr_doi",
                    'identifier_grant_jalc_dc_doi_link': "https://doi.org/12345/test_dc_doi",
                    'identifier_grant_ndl_jalc_doi_link': "https://doi.org/123456/test_ndl_doi"
                }
                assert result == test
    
            # not exist suffix
            not_suffix_identifier = Identifier(id=1, repository='Root Index',jalc_flag= True,jalc_crossref_flag= True,jalc_datacite_flag=True,ndl_jalc_flag=True,
                jalc_doi='123',jalc_crossref_doi='1234',jalc_datacite_doi='12345',ndl_jalc_doi='123456',
                created_userId='1',created_date=datetime.datetime.strptime('2022-09-28 04:33:42','%Y-%m-%d %H:%M:%S'),
                updated_userId='1',updated_date=datetime.datetime.strptime('2022-09-28 04:33:42','%Y-%m-%d %H:%M:%S')
            )
            with patch("weko_workflow.utils.get_identifier_setting",return_value = not_suffix_identifier):
                app.config["IDENTIFIER_GRANT_SUFFIX_METHOD"]=1
                result = prepare_doi_link_workflow("123456", doi_input)
                test = {
                    'identifier_grant_jalc_doi_link': "https://doi.org/123/test_jalc_doi",
                    'identifier_grant_jalc_cr_doi_link': "https://doi.org/1234/test_cr_doi",
                    'identifier_grant_jalc_dc_doi_link': "https://doi.org/12345/test_dc_doi",
                    'identifier_grant_ndl_jalc_doi_link': "https://doi.org/123456/test_ndl_doi"
                }
                assert result == test
    
             # doi is null
            null_identifier = Identifier(id=1, repository='Root Index')
            with patch("weko_workflow.utils.get_identifier_setting",return_value = null_identifier):
                app.config["IDENTIFIER_GRANT_SUFFIX_METHOD"]=0
                result = prepare_doi_link_workflow("123456", doi_input)
                test = {
                    'identifier_grant_jalc_doi_link': "https://doi.org/<Empty>/0000123456",
                    'identifier_grant_jalc_cr_doi_link': "https://doi.org/<Empty>/0000123456",
                    'identifier_grant_jalc_dc_doi_link': "https://doi.org/<Empty>/0000123456",
                    'identifier_grant_ndl_jalc_doi_link': "https://doi.org/<Empty>/test_ndl_doi"
                }
                assert result == test
    
            # identifier_setting is null
            app.config["IDENTIFIER_GRANT_SUFFIX_METHOD"]=0
>           result = prepare_doi_link_workflow("123456", doi_input)

tests/test_utils.py:3086: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:4216: in prepare_doi_link_workflow
    identifier_setting = get_identifier_setting(community_id)
weko_workflow/utils.py:132: in get_identifier_setting
    repository=community_id).one_or_none()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3008: in one_or_none
    ret = list(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3081: in __iter__
    return self._execute_and_instances(context)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3106: in _execute_and_instances
    result = conn.execute(querycontext.statement, self._params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7f9d494976a0>
cursor = <cursor object at 0x7f9d4b6c0618; closed: -1>
statement = 'SELECT doi_identifier.id AS doi_identifier_id, doi_identifier.repository AS doi_identifier_repository, doi_identifier...updated_date AS doi_identifier_updated_date \nFROM doi_identifier \nWHERE doi_identifier.repository = %(repository_1)s'
parameters = {'repository_1': 'Root Index'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f9d494a1a20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) relation "doi_identifier" does not exist
E       LINE 2: FROM doi_identifier 
E                    ^
E        [SQL: 'SELECT doi_identifier.id AS doi_identifier_id, doi_identifier.repository AS doi_identifier_repository, doi_identifier.jalc_flag AS doi_identifier_jalc_flag, doi_identifier.jalc_crossref_flag AS doi_identifier_jalc_crossref_flag, doi_identifier.jalc_datacite_flag AS doi_identifier_jalc_datacite_flag, doi_identifier.ndl_jalc_flag AS doi_identifier_ndl_jalc_flag, doi_identifier.jalc_doi AS doi_identifier_jalc_doi, doi_identifier.jalc_crossref_doi AS doi_identifier_jalc_crossref_doi, doi_identifier.jalc_datacite_doi AS doi_identifier_jalc_datacite_doi, doi_identifier.ndl_jalc_doi AS doi_identifier_ndl_jalc_doi, doi_identifier.suffix AS doi_identifier_suffix, doi_identifier."created_userId" AS "doi_identifier_created_userId", doi_identifier.created_date AS doi_identifier_created_date, doi_identifier."updated_userId" AS "doi_identifier_updated_userId", doi_identifier.updated_date AS doi_identifier_updated_date \nFROM doi_identifier \nWHERE doi_identifier.repository = %(repository_1)s'] [parameters: {'repository_1': 'Root Index'}] (Background on this error at: http://sqlalche.me/e/f405)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: ProgrammingError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________________ test_get_index_id _______________________________

    def test_get_index_id():
        """Get index ID base on activity id"""
        # from weko_workflow.api import WorkActivity, WorkFlow
    
        # activity = WorkActivity()
        # activity_detail = activity.get_activity_detail(activity_id)
    
        # workflow = WorkFlow()
        # workflow_detail = workflow.get_workflow_by_id(
        #     activity_detail.workflow_id)
    
        # index_tree_id = workflow_detail.index_tree_id
    
        # if index_tree_id:
        #     from .api import Indexes
        #     index_result = Indexes.get_index(index_tree_id)
        #     if not index_result:
        #         index_tree_id = None
        # else:
        #     index_tree_id = None
>       raise BaseException
E       BaseException

tests/test_utils.py:3117: BaseException
__________________________ test_make_activitylog_tsv ___________________________

db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<PersistentIdentifier recid:1 / rec:f456d354-30dc-4c8c-a105-6a3fc13f1b54 (R)>, <PersistentIdentifier depid:1 / rec:f...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:7eac9be1-8634-4d1c-ac8f-d09fdf202f1d (R)>, None, ...)]

    def test_make_activitylog_tsv(db_register,db_records):
        """test make_activitylog_tsv"""
        activity = Activity()
        activities = []
        activities.append(activity.query.filter_by(activity_id='2'))
        activities.append(activity.query.filter_by(activity_id='3'))
    
    
>       output_tsv = make_activitylog_tsv(activities)

tests/test_utils.py:3127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<flask_sqlalchemy.BaseQuery object at 0x7f9d4b7185f8>, <flask_sqlalchemy.BaseQuery object at 0x7f9d4c6ef240>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'BaseQuery' object has no attribute 'activity_start'

weko_workflow/utils.py:4388: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_is_terms_of_use_only ___________________________

app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
workflow_open_restricted = [{'flow': <FlowDefine 2>, 'flow_action': [<FlowAction 8>, <FlowAction 9>], 'workflow': <WorkFlow 2>}, {'flow': <FlowDe...ine 3>, 'flow_action': [<FlowAction 10>, <FlowAction 11>, <FlowAction 12>, <FlowAction 13>], 'workflow': <WorkFlow 4>}]

    def test_is_terms_of_use_only(app ,workflow ,workflow_open_restricted):
        with app.test_request_context():
>           assert not is_terms_of_use_only(workflow["workflow"].id)
E           NameError: name 'is_terms_of_use_only' is not defined

tests/test_utils.py:3134: NameError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________ test_grant_access_rights_to_all_open_restricted_files _____________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_grant_access_rights_to_all_open_restricted_files(app ,db,users ):
        activity_id = "20000101-99"
        file_permission = FilePermission(
            file_name= "bbb.txt"
            ,record_id=1
            ,status=-1
            ,usage_application_activity_id=activity_id
            ,user_id=users[0]["id"]
            ,usage_report_activity_id=None
        )
        db.session.add(file_permission)
        activity_detail:Activity = Activity()
        activity_detail.extra_info = {
                        "file_name": "bbb.txt"
                        , "record_id": 1
                        , "user_mail": users[0]["email"]
                    }
    
        activity_id_guest = "20001231-99"
        guest_activity = GuestActivity(
            file_name= "bbb.txt"
            ,record_id=1
            ,status=-1
            ,activity_id=activity_id_guest
            ,user_mail=users[5]["email"]
            ,expiration_date=0
            ,is_usage_report=None
            ,token=''
        )
        db.session.add(guest_activity)
        activity_detail_guest:Activity = Activity()
        activity_detail_guest.extra_info = {
                        "file_name": "bbb.txt"
                        , "record_id": 1
                        , "guest_mail": users[5]["email"]
                    }
        mock = MagicMock()
        mock.get_file_data = lambda : [{'accessrole' : 'open_restricted','filename':'aaa.txt'}
                                    ,{'accessrole' : 'open_restricted','filename':'bbb.txt'}
                                    ,{'accessrole' : 'open_access'    ,'filename':'ccc.txt'}]
    
        with app.test_request_context():
            with patch('weko_workflow.utils.WekoRecord.get_record_by_pid',return_value = mock):
>               res = grant_access_rights_to_all_open_restricted_files(activity_id ,file_permission, activity_detail )
E               NameError: name 'grant_access_rights_to_all_open_restricted_files' is not defined

tests/test_utils.py:3183: NameError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________________ test_index_acl_nologin ____________________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_index_acl_nologin(client,db_register2):
        """_summary_
    
        Args:
            client (FlaskClient): flask test client
        """
        url = url_for('weko_workflow.index')
        res =  client.get(url)
        assert res.status_code == 302
>       assert res.location == url_for('security.login', next="/workflow/",_external=True)
E       AssertionError: assert 'http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2F' == 'http://test_server.localdomain/login/?next=%2Fworkflow%2F'
E         - http://test_server.localdomain/login/?next=%2Fworkflow%2F
E         ?        ^^^^ ^^^^^^
E         + http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2F
E         ?        ^^^^ ^^^^^^

tests/test_views.py:72: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________________ test_index_acl[0-200] _____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_index_acl(client, users, db_register2,users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:267: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:140: in render_template
    ctx.app,
.tox/c1/lib/python3.6/site-packages/flask/templating.py:120: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________________ test_index_acl[1-200] _____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_index_acl(client, users, db_register2,users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:267: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:140: in render_template
    ctx.app,
.tox/c1/lib/python3.6/site-packages/flask/templating.py:120: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________________ test_index_acl[2-200] _____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_index_acl(client, users, db_register2,users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:267: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:140: in render_template
    ctx.app,
.tox/c1/lib/python3.6/site-packages/flask/templating.py:120: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________________ test_index_acl[3-200] _____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_index_acl(client, users, db_register2,users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:267: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:140: in render_template
    ctx.app,
.tox/c1/lib/python3.6/site-packages/flask/templating.py:120: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________________ test_index_acl[4-200] _____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_index_acl(client, users, db_register2,users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:267: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:140: in render_template
    ctx.app,
.tox/c1/lib/python3.6/site-packages/flask/templating.py:120: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________________ test_index_acl[5-200] _____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_index_acl(client, users, db_register2,users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:267: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:140: in render_template
    ctx.app,
.tox/c1/lib/python3.6/site-packages/flask/templating.py:120: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________________ test_index_acl[6-200] _____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_index_acl(client, users, db_register2,users_index, status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:267: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:140: in render_template
    ctx.app,
.tox/c1/lib/python3.6/site-packages/flask/templating.py:120: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_init_activity_acl[0-200] _________________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 0, status_code = 200, item_type = <ItemType 1>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(app, client, users, users_index, status_code, item_type, workflow):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        workflow_id = workflow['workflow'].id
        flow_def_id = workflow['flow'].id
        item_type_id = item_type.id
        login(client=client, email=users[users_index]['email'])
    
        q = Activity.query.all()
        assert len(q) == 0
        q = ActivityHistory.query.all()
        assert len(q) == 0
        q = ActivityAction.query.all()
        assert len(q) == 0
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': workflow_id, 'flow_id': flow_def_id, 'activity_confirm_term_of_use': True}
        res = client.post(url, json=input)
        assert res.status_code == status_code
        assert json.loads(res.data.decode('utf-8'))['data']['redirect'].endswith('00001')
        q = Activity.query.all()
        assert len(q) == 1
        q = Activity.query.first()
        assert q.extra_info == {}
        assert q.activity_login_user == users[users_index]['id']
        assert q.activity_update_user == users[users_index]['id']
        assert q.activity_confirm_term_of_use == True
        q = ActivityHistory.query.all()
        assert len(q) == 1
        q = ActivityAction.query.all()
        assert len(q) == 7
    
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': -99, 'flow_id': flow_def_id}
>       res = client.post(url, json=input)

tests/test_views.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:513: in init_activity
    if is_terms_of_use_only(post_activity.data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = -99

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_init_activity_acl[1-200] _________________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200, item_type = <ItemType 1>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(app, client, users, users_index, status_code, item_type, workflow):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        workflow_id = workflow['workflow'].id
        flow_def_id = workflow['flow'].id
        item_type_id = item_type.id
        login(client=client, email=users[users_index]['email'])
    
        q = Activity.query.all()
        assert len(q) == 0
        q = ActivityHistory.query.all()
        assert len(q) == 0
        q = ActivityAction.query.all()
        assert len(q) == 0
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': workflow_id, 'flow_id': flow_def_id, 'activity_confirm_term_of_use': True}
        res = client.post(url, json=input)
        assert res.status_code == status_code
        assert json.loads(res.data.decode('utf-8'))['data']['redirect'].endswith('00001')
        q = Activity.query.all()
        assert len(q) == 1
        q = Activity.query.first()
        assert q.extra_info == {}
        assert q.activity_login_user == users[users_index]['id']
        assert q.activity_update_user == users[users_index]['id']
        assert q.activity_confirm_term_of_use == True
        q = ActivityHistory.query.all()
        assert len(q) == 1
        q = ActivityAction.query.all()
        assert len(q) == 7
    
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': -99, 'flow_id': flow_def_id}
>       res = client.post(url, json=input)

tests/test_views.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:513: in init_activity
    if is_terms_of_use_only(post_activity.data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = -99

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_init_activity_acl[2-200] _________________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200, item_type = <ItemType 1>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(app, client, users, users_index, status_code, item_type, workflow):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        workflow_id = workflow['workflow'].id
        flow_def_id = workflow['flow'].id
        item_type_id = item_type.id
        login(client=client, email=users[users_index]['email'])
    
        q = Activity.query.all()
        assert len(q) == 0
        q = ActivityHistory.query.all()
        assert len(q) == 0
        q = ActivityAction.query.all()
        assert len(q) == 0
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': workflow_id, 'flow_id': flow_def_id, 'activity_confirm_term_of_use': True}
        res = client.post(url, json=input)
        assert res.status_code == status_code
        assert json.loads(res.data.decode('utf-8'))['data']['redirect'].endswith('00001')
        q = Activity.query.all()
        assert len(q) == 1
        q = Activity.query.first()
        assert q.extra_info == {}
        assert q.activity_login_user == users[users_index]['id']
        assert q.activity_update_user == users[users_index]['id']
        assert q.activity_confirm_term_of_use == True
        q = ActivityHistory.query.all()
        assert len(q) == 1
        q = ActivityAction.query.all()
        assert len(q) == 7
    
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': -99, 'flow_id': flow_def_id}
>       res = client.post(url, json=input)

tests/test_views.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:513: in init_activity
    if is_terms_of_use_only(post_activity.data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = -99

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_init_activity_acl[3-200] _________________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 3, status_code = 200, item_type = <ItemType 1>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(app, client, users, users_index, status_code, item_type, workflow):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        workflow_id = workflow['workflow'].id
        flow_def_id = workflow['flow'].id
        item_type_id = item_type.id
        login(client=client, email=users[users_index]['email'])
    
        q = Activity.query.all()
        assert len(q) == 0
        q = ActivityHistory.query.all()
        assert len(q) == 0
        q = ActivityAction.query.all()
        assert len(q) == 0
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': workflow_id, 'flow_id': flow_def_id, 'activity_confirm_term_of_use': True}
        res = client.post(url, json=input)
        assert res.status_code == status_code
        assert json.loads(res.data.decode('utf-8'))['data']['redirect'].endswith('00001')
        q = Activity.query.all()
        assert len(q) == 1
        q = Activity.query.first()
        assert q.extra_info == {}
        assert q.activity_login_user == users[users_index]['id']
        assert q.activity_update_user == users[users_index]['id']
        assert q.activity_confirm_term_of_use == True
        q = ActivityHistory.query.all()
        assert len(q) == 1
        q = ActivityAction.query.all()
        assert len(q) == 7
    
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': -99, 'flow_id': flow_def_id}
>       res = client.post(url, json=input)

tests/test_views.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:513: in init_activity
    if is_terms_of_use_only(post_activity.data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = -99

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_init_activity_acl[4-200] _________________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 4, status_code = 200, item_type = <ItemType 1>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(app, client, users, users_index, status_code, item_type, workflow):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        workflow_id = workflow['workflow'].id
        flow_def_id = workflow['flow'].id
        item_type_id = item_type.id
        login(client=client, email=users[users_index]['email'])
    
        q = Activity.query.all()
        assert len(q) == 0
        q = ActivityHistory.query.all()
        assert len(q) == 0
        q = ActivityAction.query.all()
        assert len(q) == 0
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': workflow_id, 'flow_id': flow_def_id, 'activity_confirm_term_of_use': True}
        res = client.post(url, json=input)
        assert res.status_code == status_code
        assert json.loads(res.data.decode('utf-8'))['data']['redirect'].endswith('00001')
        q = Activity.query.all()
        assert len(q) == 1
        q = Activity.query.first()
        assert q.extra_info == {}
        assert q.activity_login_user == users[users_index]['id']
        assert q.activity_update_user == users[users_index]['id']
        assert q.activity_confirm_term_of_use == True
        q = ActivityHistory.query.all()
        assert len(q) == 1
        q = ActivityAction.query.all()
        assert len(q) == 7
    
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': -99, 'flow_id': flow_def_id}
>       res = client.post(url, json=input)

tests/test_views.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:513: in init_activity
    if is_terms_of_use_only(post_activity.data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = -99

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_init_activity_acl[5-200] _________________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 5, status_code = 200, item_type = <ItemType 1>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(app, client, users, users_index, status_code, item_type, workflow):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        workflow_id = workflow['workflow'].id
        flow_def_id = workflow['flow'].id
        item_type_id = item_type.id
        login(client=client, email=users[users_index]['email'])
    
        q = Activity.query.all()
        assert len(q) == 0
        q = ActivityHistory.query.all()
        assert len(q) == 0
        q = ActivityAction.query.all()
        assert len(q) == 0
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': workflow_id, 'flow_id': flow_def_id, 'activity_confirm_term_of_use': True}
        res = client.post(url, json=input)
        assert res.status_code == status_code
        assert json.loads(res.data.decode('utf-8'))['data']['redirect'].endswith('00001')
        q = Activity.query.all()
        assert len(q) == 1
        q = Activity.query.first()
        assert q.extra_info == {}
        assert q.activity_login_user == users[users_index]['id']
        assert q.activity_update_user == users[users_index]['id']
        assert q.activity_confirm_term_of_use == True
        q = ActivityHistory.query.all()
        assert len(q) == 1
        q = ActivityAction.query.all()
        assert len(q) == 7
    
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': -99, 'flow_id': flow_def_id}
>       res = client.post(url, json=input)

tests/test_views.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:513: in init_activity
    if is_terms_of_use_only(post_activity.data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = -99

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_init_activity_acl[6-200] _________________________

app = <Flask 'testapp'>, client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200, item_type = <ItemType 1>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_acl(app, client, users, users_index, status_code, item_type, workflow):
        """_summary_
    
        Args:
            client (_type_): _description_
            users (_type_): _description_
            users_index (_type_): _description_
            status_code (_type_): _description_
            db_register (_type_): _description_
        """
        workflow_id = workflow['workflow'].id
        flow_def_id = workflow['flow'].id
        item_type_id = item_type.id
        login(client=client, email=users[users_index]['email'])
    
        q = Activity.query.all()
        assert len(q) == 0
        q = ActivityHistory.query.all()
        assert len(q) == 0
        q = ActivityAction.query.all()
        assert len(q) == 0
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': workflow_id, 'flow_id': flow_def_id, 'activity_confirm_term_of_use': True}
        res = client.post(url, json=input)
        assert res.status_code == status_code
        assert json.loads(res.data.decode('utf-8'))['data']['redirect'].endswith('00001')
        q = Activity.query.all()
        assert len(q) == 1
        q = Activity.query.first()
        assert q.extra_info == {}
        assert q.activity_login_user == users[users_index]['id']
        assert q.activity_update_user == users[users_index]['id']
        assert q.activity_confirm_term_of_use == True
        q = ActivityHistory.query.all()
        assert len(q) == 1
        q = ActivityAction.query.all()
        assert len(q) == 7
    
        url = url_for('weko_workflow.init_activity')
        input = {'workflow_id': -99, 'flow_id': flow_def_id}
>       res = client.post(url, json=input)

tests/test_views.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:513: in init_activity
    if is_terms_of_use_only(post_activity.data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = -99

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[0-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:571: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:616: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[1-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:571: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:616: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[2-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:571: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:616: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[3-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:571: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:616: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[4-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:571: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:616: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[5-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:571: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:616: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_init_activity_guest_users[6-200] _____________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_init_activity_guest_users(client, users, users_index, status_code):
        """Test init activity for guest user."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.init_activity_guest')
        input = {'guest_mail': 'test@guest.com', 'workflow_id': 1, 'flow_id': 1,
                 'item_type_id': 1, 'record_id': 1, 'guest_item_title': 'test',
                 'file_name': 'test_file'}
    
>       res = client.post(url, json=input)

tests/test_views.py:571: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
weko_workflow/views.py:616: in init_activity_guest
    if is_terms_of_use_only(post_data["workflow_id"]):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

workflow_id = 1

    def is_terms_of_use_only(workflow_id :int) -> bool:
        """
        return true if the workflow is [terms_of_use_only(利用規約のみ)]
    
        note:
            [terms of use only] workflow is open_restricted flag is "true".
            and
            [terms of use only] workflow is structed "Begin Action" and "End Action" only.
    
        Args
            int :workflow_id
        Return
            bool :is the workflow [terms of use only]
        """
    
        current_app.logger.info(workflow_id)
        ids = [workflow_id]
    
        wf:_WorkFlow = WorkFlow().get_workflow_by_ids(ids)
        current_app.logger.info(wf)
>       if wf[0].open_restricted :
E       IndexError: list index out of range

weko_workflow/utils.py:4414: IndexError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_previous_action_acl_nologin _______________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_previous_action_acl_nologin(client,db_register2):
        """Test of previous action."""
        url = url_for('weko_workflow.previous_action', activity_id='1',
                      action_id=1, req=1)
        input = {}
    
        res = client.post(url, json=input)
        assert res.status_code == 302
>       assert res.location == url_for('security.login',next="/workflow/activity/action/1/1/rejectOrReturn/1",_external=True)
E       AssertionError: assert 'http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Factivity%2Faction%2F1%2F1%2FrejectOrReturn%2F1' == 'http://test_server.localdomain/login/?next=%2Fworkflow%2Factivity%2Faction%2F1%2F1%2FrejectOrReturn%2F1'
E         - http://test_server.localdomain/login/?next=%2Fworkflow%2Factivity%2Faction%2F1%2F1%2FrejectOrReturn%2F1
E         ?        ^^^^ ^^^^^^
E         + http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Factivity%2Faction%2F1%2F1%2FrejectOrReturn%2F1
E         ?        ^^^^ ^^^^^^

tests/test_views.py:755: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_________________________ test_previous_action[0-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=0
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=-1
        res = previous_action(activity_id="2", action_id=1, req=-1)
        data = response_data(res[0])
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # not pre_action
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        with patch("weko_workflow.views.Flow.get_previous_flow_action", return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        # not exist activity_detail
        url = url_for('weko_workflow.previous_action',
                      activity_id='1', action_id=1, req=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1121: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d667642e8; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d3f540d30>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f9d3f540dd8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:1793 previous_action: argument error
ERROR    testapp:views.py:1799 previous_action: test error
_________________________ test_previous_action[3-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=0
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=-1
        res = previous_action(activity_id="2", action_id=1, req=-1)
        data = response_data(res[0])
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # not pre_action
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        with patch("weko_workflow.views.Flow.get_previous_flow_action", return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        # not exist activity_detail
        url = url_for('weko_workflow.previous_action',
                      activity_id='1', action_id=1, req=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1115: in decorated_function
    if check_authority_by_admin(activity_detail):
weko_workflow/utils.py:4037: in check_authority_by_admin
    if activity.activity_login_user in community_user_ids:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d667642e8; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d42cb6588>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f9d42cb6ef0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:1793 previous_action: argument error
ERROR    testapp:views.py:1799 previous_action: test error
_________________________ test_previous_action[4-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=0
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=-1
        res = previous_action(activity_id="2", action_id=1, req=-1)
        data = response_data(res[0])
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # not pre_action
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        with patch("weko_workflow.views.Flow.get_previous_flow_action", return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        # not exist activity_detail
        url = url_for('weko_workflow.previous_action',
                      activity_id='1', action_id=1, req=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1121: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d667642e8; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d41c2df98>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f9d43704278> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:1793 previous_action: argument error
ERROR    testapp:views.py:1799 previous_action: test error
_________________________ test_previous_action[5-200] __________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_previous_action(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for("weko_workflow.previous_action",
                      activity_id="2",action_id=1,req=1)
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            res = client.post(url,json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # request_body error
        with patch("weko_workflow.views.ActionSchema",side_effect=ValidationError("test error")):
            res = client.post(url, json={})
            data = response_data(res)
            assert res.status_code==500
            assert data["code"] == -1
            assert data["msg"] == "test error"
    
        input = {"action_version":"1.0.0", "commond":"this is test comment."}
    
        # req=1
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=1, req=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=0
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code==status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # req=-1
        res = previous_action(activity_id="2", action_id=1, req=-1)
        data = response_data(res[0])
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # not pre_action
        url = url_for('weko_workflow.previous_action',
                      activity_id='2', action_id=3, req=0)
        with patch("weko_workflow.views.Flow.get_previous_flow_action", return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        # not exist activity_detail
        url = url_for('weko_workflow.previous_action',
                      activity_id='1', action_id=1, req=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:891: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1121: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d667642e8; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d43a06dd8>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f9d43a06eb8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:1793 previous_action: argument error
ERROR    testapp:views.py:1799 previous_action: test error
___________________________ test_next_action[1-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d3cfeee80> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d3cfb6358>, None, ...)]
users_index = 1, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d3cfb6438>

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 200),
        (1, 200),
        (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order, item_id=None, extra_info={}):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.activity_status=ActionStatusPolicy.ACTION_BEGIN
                activity.action_id=action_id
                activity.action_order=action_order
                activity.action_status=None
                activity.extra_info=extra_info
                if item_id:
                    activity.item_id=item_id
                db.session.merge(activity)
                pid = PersistentIdentifier.query.filter(
                    PersistentIdentifier.object_uuid==activity.item_id,
                    PersistentIdentifier.object_type=='rec',
                    PersistentIdentifier.pid_type=='recid').one_or_none()
                if pid:
                    pid.status=PIDStatus.NEW
                    db.session.merge(pid)
            db.session.commit()
    
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail",return_value=True)
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        # new_item = uuid.uuid4()
        # mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
        mocker.patch("weko_deposit.api.WekoDeposit.publish",return_value=True)
        mocker.patch("weko_deposit.api.WekoDeposit.merge_data_to_record_without_version",return_value=db_records[0][6])
        mocker.patch("weko_deposit.api.WekoDeposit.update_feedback_mail",return_value=True)
        mocker.patch("weko_deposit.api.WekoDeposit.commit",return_value=True)
        mocker.patch("weko_workflow.api.UpdateItem.publish",return_value=True)
        mocker.patch("invenio_oaiserver.tasks.update_records_sets.delay",return_value=True)
    
        flow_action_5 = db_register_fullaction["flow_actions"][5].id
        item_id1 = db_register_fullaction["activities"][0].item_id
        item_id2 = db_register_fullaction["activities"][1].item_id
        item_id3 = db_register_fullaction["activities"][2].item_id
        item_id4 = db_register_fullaction["activities"][3].item_id
        item_id5 = db_register_fullaction["activities"][4].item_id
        item_id6 = db_register_fullaction["activities"][5].item_id
        item_id7 = db_register_fullaction["activities"][6].item_id
        activity1 = db_register_fullaction["activities"][0]
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        update_activity_order("1",1,1,item_id1)
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[activity1,None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        update_activity_order("1",1,1,item_id1)
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5,item_id2)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7,item_id2)
        q = Activity.query.filter(Activity.activity_id=="2").first()
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        assert q.action_id == 2
        assert q.action_status == None
        assert q.action_order == 7
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="2").all()
        assert len(q) == 0
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        with patch('weko_workflow.views.db.session.commit', side_effect=Exception("")):
            res = client.post(url, json=input)
            data = response_data(res)
>       assert res.status_code == 500
E       assert 200 == 500
E         +200
E         -500

tests/test_views.py:1173: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:1270 next_action: argument error
ERROR    testapp:views.py:1278 next_action: can not get activity_detail
ERROR    testapp:views.py:1286 next_action: can not get schema by action_id
ERROR    testapp:views.py:1291 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    testapp:api.py:1241 
Traceback (most recent call last):
  File "/code/modules/weko-workflow/weko_workflow/api.py", line 1238, in end_activity
    db.session.commit()
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1149, in __call__
    return _mock_self._mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1153, in _mock_call
    return _mock_self._execute_mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1210, in _execute_mock_call
    raise effect
  File "/code/modules/weko-workflow/weko_workflow/views.py", line 3363, in dbsession_clean
    db.session.commit()
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1149, in __call__
    return _mock_self._mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1153, in _mock_call
    return _mock_self._execute_mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1210, in _execute_mock_call
    raise effect
Exception
___________________________ test_next_action[2-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d3c939f60> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d3c8d6438>, None, ...)]
users_index = 2, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d3c925cc0>

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 200),
        (1, 200),
        (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order, item_id=None, extra_info={}):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.activity_status=ActionStatusPolicy.ACTION_BEGIN
                activity.action_id=action_id
                activity.action_order=action_order
                activity.action_status=None
                activity.extra_info=extra_info
                if item_id:
                    activity.item_id=item_id
                db.session.merge(activity)
                pid = PersistentIdentifier.query.filter(
                    PersistentIdentifier.object_uuid==activity.item_id,
                    PersistentIdentifier.object_type=='rec',
                    PersistentIdentifier.pid_type=='recid').one_or_none()
                if pid:
                    pid.status=PIDStatus.NEW
                    db.session.merge(pid)
            db.session.commit()
    
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail",return_value=True)
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        # new_item = uuid.uuid4()
        # mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
        mocker.patch("weko_deposit.api.WekoDeposit.publish",return_value=True)
        mocker.patch("weko_deposit.api.WekoDeposit.merge_data_to_record_without_version",return_value=db_records[0][6])
        mocker.patch("weko_deposit.api.WekoDeposit.update_feedback_mail",return_value=True)
        mocker.patch("weko_deposit.api.WekoDeposit.commit",return_value=True)
        mocker.patch("weko_workflow.api.UpdateItem.publish",return_value=True)
        mocker.patch("invenio_oaiserver.tasks.update_records_sets.delay",return_value=True)
    
        flow_action_5 = db_register_fullaction["flow_actions"][5].id
        item_id1 = db_register_fullaction["activities"][0].item_id
        item_id2 = db_register_fullaction["activities"][1].item_id
        item_id3 = db_register_fullaction["activities"][2].item_id
        item_id4 = db_register_fullaction["activities"][3].item_id
        item_id5 = db_register_fullaction["activities"][4].item_id
        item_id6 = db_register_fullaction["activities"][5].item_id
        item_id7 = db_register_fullaction["activities"][6].item_id
        activity1 = db_register_fullaction["activities"][0]
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        update_activity_order("1",1,1,item_id1)
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[activity1,None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        update_activity_order("1",1,1,item_id1)
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5,item_id2)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7,item_id2)
        q = Activity.query.filter(Activity.activity_id=="2").first()
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        assert q.action_id == 2
        assert q.action_status == None
        assert q.action_order == 7
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="2").all()
        assert len(q) == 0
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        with patch('weko_workflow.views.db.session.commit', side_effect=Exception("")):
            res = client.post(url, json=input)
            data = response_data(res)
>       assert res.status_code == 500
E       assert 200 == 500
E         +200
E         -500

tests/test_views.py:1173: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:1270 next_action: argument error
ERROR    testapp:views.py:1278 next_action: can not get activity_detail
ERROR    testapp:views.py:1286 next_action: can not get schema by action_id
ERROR    testapp:views.py:1291 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    testapp:api.py:1241 
Traceback (most recent call last):
  File "/code/modules/weko-workflow/weko_workflow/api.py", line 1238, in end_activity
    db.session.commit()
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1149, in __call__
    return _mock_self._mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1153, in _mock_call
    return _mock_self._execute_mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1210, in _execute_mock_call
    raise effect
  File "/code/modules/weko-workflow/weko_workflow/views.py", line 3363, in dbsession_clean
    db.session.commit()
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1149, in __call__
    return _mock_self._mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1153, in _mock_call
    return _mock_self._execute_mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1210, in _execute_mock_call
    raise effect
Exception
___________________________ test_next_action[6-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d3c2b4278> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d3c269358>, None, ...)]
users_index = 6, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d3c2b4668>

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 200),
        (1, 200),
        (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        (6, 200),
    ])
    # .tox/c1/bin/pytest --cov=weko_workflow tests/test_views.py::test_next_action -vv -s --cov-branch --cov-report=term --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order, item_id=None, extra_info={}):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.activity_status=ActionStatusPolicy.ACTION_BEGIN
                activity.action_id=action_id
                activity.action_order=action_order
                activity.action_status=None
                activity.extra_info=extra_info
                if item_id:
                    activity.item_id=item_id
                db.session.merge(activity)
                pid = PersistentIdentifier.query.filter(
                    PersistentIdentifier.object_uuid==activity.item_id,
                    PersistentIdentifier.object_type=='rec',
                    PersistentIdentifier.pid_type=='recid').one_or_none()
                if pid:
                    pid.status=PIDStatus.NEW
                    db.session.merge(pid)
            db.session.commit()
    
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail",return_value=True)
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        # new_item = uuid.uuid4()
        # mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
        mocker.patch("weko_deposit.api.WekoDeposit.publish",return_value=True)
        mocker.patch("weko_deposit.api.WekoDeposit.merge_data_to_record_without_version",return_value=db_records[0][6])
        mocker.patch("weko_deposit.api.WekoDeposit.update_feedback_mail",return_value=True)
        mocker.patch("weko_deposit.api.WekoDeposit.commit",return_value=True)
        mocker.patch("weko_workflow.api.UpdateItem.publish",return_value=True)
        mocker.patch("invenio_oaiserver.tasks.update_records_sets.delay",return_value=True)
    
        flow_action_5 = db_register_fullaction["flow_actions"][5].id
        item_id1 = db_register_fullaction["activities"][0].item_id
        item_id2 = db_register_fullaction["activities"][1].item_id
        item_id3 = db_register_fullaction["activities"][2].item_id
        item_id4 = db_register_fullaction["activities"][3].item_id
        item_id5 = db_register_fullaction["activities"][4].item_id
        item_id6 = db_register_fullaction["activities"][5].item_id
        item_id7 = db_register_fullaction["activities"][6].item_id
        activity1 = db_register_fullaction["activities"][0]
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        update_activity_order("1",1,1,item_id1)
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[activity1,None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        update_activity_order("1",1,1,item_id1)
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5,item_id2)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7,item_id2)
        q = Activity.query.filter(Activity.activity_id=="2").first()
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        assert q.action_id == 2
        assert q.action_status == None
        assert q.action_order == 7
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="2").all()
        assert len(q) == 0
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        with patch('weko_workflow.views.db.session.commit', side_effect=Exception("")):
            res = client.post(url, json=input)
            data = response_data(res)
>       assert res.status_code == 500
E       assert 200 == 500
E         +200
E         -500

tests/test_views.py:1173: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:1270 next_action: argument error
ERROR    testapp:views.py:1278 next_action: can not get activity_detail
ERROR    testapp:views.py:1286 next_action: can not get schema by action_id
ERROR    testapp:views.py:1291 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    testapp:api.py:1241 
Traceback (most recent call last):
  File "/code/modules/weko-workflow/weko_workflow/api.py", line 1238, in end_activity
    db.session.commit()
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1149, in __call__
    return _mock_self._mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1153, in _mock_call
    return _mock_self._execute_mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1210, in _execute_mock_call
    raise effect
  File "/code/modules/weko-workflow/weko_workflow/views.py", line 3363, in dbsession_clean
    db.session.commit()
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1149, in __call__
    return _mock_self._mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1153, in _mock_call
    return _mock_self._execute_mock_call(*args, **kwargs)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/mock/mock.py", line 1210, in _execute_mock_call
    raise effect
Exception
________________________ test_cancel_action_acl_nologin ________________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_cancel_action_acl_nologin(client,db_register2):
        """Test of cancel action."""
        url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
        input = {'action_version': 1, 'commond': 1}
    
        res = client.post(url, json=input)
        assert res.status_code == 302
>       assert res.location == url_for('security.login', next="/workflow/activity/action/1/1/cancel",_external=True)
E       AssertionError: assert 'http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Factivity%2Faction%2F1%2F1%2Fcancel' == 'http://test_server.localdomain/login/?next=%2Fworkflow%2Factivity%2Faction%2F1%2F1%2Fcancel'
E         - http://test_server.localdomain/login/?next=%2Fworkflow%2Factivity%2Faction%2F1%2F1%2Fcancel
E         ?        ^^^^ ^^^^^^
E         + http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Factivity%2Faction%2F1%2F1%2Fcancel
E         ?        ^^^^ ^^^^^^

tests/test_views.py:2129: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_cancel_action2[0-200] __________________________

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d39238d68>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
>           state = attributes.instance_state(instance)
E           AttributeError: 'list' object has no attribute '_sa_instance_state'

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1973: AttributeError

During handling of the above exception, another exception occurred:

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d39512c50> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d394dcbe0>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f9d39523e18>
users_index = 0, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d394d6358>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action2(client, users,db, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # not exist item, exist files, exist cancel_pv, exist file_permission
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        FilePermission.init_file_permission(users[users_index]["id"],"1.1","test_file","1")
        add_file(db_records[2][2])
        url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
        redirect_url = url_for("weko_workflow.display_activity",
                               activity_id="1").replace("http://test_server.localdomain","")
        q = Activity.query.filter(Activity.activity_id=="1").first()
        assert q.status == 'N'
        assert q.action_order == 1
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="1").all()
        assert len(q) == 1
>       res = client.post(url, json=input)

tests/test_views.py:2284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1136: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:2164: in cancel_action
    FilePermission.delete_object(permission)
../weko-records-ui/weko_records_ui/models.py:291: in delete_object
    db.session.delete(permission)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d39238d68>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
            state = attributes.instance_state(instance)
        except exc.NO_STATE:
>           raise exc.UnmappedInstanceError(instance)
E           sqlalchemy.orm.exc.UnmappedInstanceError: Class 'builtins.list' is not mapped

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1975: UnmappedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2048 cancel_action: can not get activity_detail
__________________________ test_cancel_action2[1-200] __________________________

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3ac522b0>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
>           state = attributes.instance_state(instance)
E           AttributeError: 'list' object has no attribute '_sa_instance_state'

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1973: AttributeError

During handling of the above exception, another exception occurred:

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d3a57da90> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d3aa21b70>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f9d3a7588c8>
users_index = 1, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d3afcff60>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action2(client, users,db, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # not exist item, exist files, exist cancel_pv, exist file_permission
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        FilePermission.init_file_permission(users[users_index]["id"],"1.1","test_file","1")
        add_file(db_records[2][2])
        url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
        redirect_url = url_for("weko_workflow.display_activity",
                               activity_id="1").replace("http://test_server.localdomain","")
        q = Activity.query.filter(Activity.activity_id=="1").first()
        assert q.status == 'N'
        assert q.action_order == 1
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="1").all()
        assert len(q) == 1
>       res = client.post(url, json=input)

tests/test_views.py:2284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1116: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:2164: in cancel_action
    FilePermission.delete_object(permission)
../weko-records-ui/weko_records_ui/models.py:291: in delete_object
    db.session.delete(permission)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3ac522b0>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
            state = attributes.instance_state(instance)
        except exc.NO_STATE:
>           raise exc.UnmappedInstanceError(instance)
E           sqlalchemy.orm.exc.UnmappedInstanceError: Class 'builtins.list' is not mapped

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1975: UnmappedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2048 cancel_action: can not get activity_detail
__________________________ test_cancel_action2[2-200] __________________________

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3dabc240>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
>           state = attributes.instance_state(instance)
E           AttributeError: 'list' object has no attribute '_sa_instance_state'

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1973: AttributeError

During handling of the above exception, another exception occurred:

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d3cfa1ac8> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d3ce09b70>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f9d3b472bf8>
users_index = 2, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d42272a90>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action2(client, users,db, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # not exist item, exist files, exist cancel_pv, exist file_permission
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        FilePermission.init_file_permission(users[users_index]["id"],"1.1","test_file","1")
        add_file(db_records[2][2])
        url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
        redirect_url = url_for("weko_workflow.display_activity",
                               activity_id="1").replace("http://test_server.localdomain","")
        q = Activity.query.filter(Activity.activity_id=="1").first()
        assert q.status == 'N'
        assert q.action_order == 1
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="1").all()
        assert len(q) == 1
>       res = client.post(url, json=input)

tests/test_views.py:2284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1116: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:2164: in cancel_action
    FilePermission.delete_object(permission)
../weko-records-ui/weko_records_ui/models.py:291: in delete_object
    db.session.delete(permission)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3dabc240>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
            state = attributes.instance_state(instance)
        except exc.NO_STATE:
>           raise exc.UnmappedInstanceError(instance)
E           sqlalchemy.orm.exc.UnmappedInstanceError: Class 'builtins.list' is not mapped

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1975: UnmappedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2048 cancel_action: can not get activity_detail
__________________________ test_cancel_action2[3-200] __________________________

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3d408c50>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
>           state = attributes.instance_state(instance)
E           AttributeError: 'list' object has no attribute '_sa_instance_state'

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1973: AttributeError

During handling of the above exception, another exception occurred:

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d3c421780> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d3c29f470>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f9d42d18268>
users_index = 3, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d40a6b0f0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action2(client, users,db, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # not exist item, exist files, exist cancel_pv, exist file_permission
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        FilePermission.init_file_permission(users[users_index]["id"],"1.1","test_file","1")
        add_file(db_records[2][2])
        url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
        redirect_url = url_for("weko_workflow.display_activity",
                               activity_id="1").replace("http://test_server.localdomain","")
        q = Activity.query.filter(Activity.activity_id=="1").first()
        assert q.status == 'N'
        assert q.action_order == 1
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="1").all()
        assert len(q) == 1
>       res = client.post(url, json=input)

tests/test_views.py:2284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1136: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:2164: in cancel_action
    FilePermission.delete_object(permission)
../weko-records-ui/weko_records_ui/models.py:291: in delete_object
    db.session.delete(permission)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3d408c50>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
            state = attributes.instance_state(instance)
        except exc.NO_STATE:
>           raise exc.UnmappedInstanceError(instance)
E           sqlalchemy.orm.exc.UnmappedInstanceError: Class 'builtins.list' is not mapped

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1975: UnmappedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2048 cancel_action: can not get activity_detail
__________________________ test_cancel_action2[4-200] __________________________

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3b746ac8>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
>           state = attributes.instance_state(instance)
E           AttributeError: 'list' object has no attribute '_sa_instance_state'

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1973: AttributeError

During handling of the above exception, another exception occurred:

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d3ee40e48> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d409b0550>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f9d3f9132f0>
users_index = 4, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d3b364e80>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action2(client, users,db, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # not exist item, exist files, exist cancel_pv, exist file_permission
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        FilePermission.init_file_permission(users[users_index]["id"],"1.1","test_file","1")
        add_file(db_records[2][2])
        url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
        redirect_url = url_for("weko_workflow.display_activity",
                               activity_id="1").replace("http://test_server.localdomain","")
        q = Activity.query.filter(Activity.activity_id=="1").first()
        assert q.status == 'N'
        assert q.action_order == 1
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="1").all()
        assert len(q) == 1
>       res = client.post(url, json=input)

tests/test_views.py:2284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1136: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:2164: in cancel_action
    FilePermission.delete_object(permission)
../weko-records-ui/weko_records_ui/models.py:291: in delete_object
    db.session.delete(permission)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3b746ac8>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
            state = attributes.instance_state(instance)
        except exc.NO_STATE:
>           raise exc.UnmappedInstanceError(instance)
E           sqlalchemy.orm.exc.UnmappedInstanceError: Class 'builtins.list' is not mapped

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1975: UnmappedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2048 cancel_action: can not get activity_detail
__________________________ test_cancel_action2[5-200] __________________________

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3da70d30>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
>           state = attributes.instance_state(instance)
E           AttributeError: 'list' object has no attribute '_sa_instance_state'

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1973: AttributeError

During handling of the above exception, another exception occurred:

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d449c8b70> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d3ccd6470>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f9d3d213bf8>
users_index = 5, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d3d9adcc0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action2(client, users,db, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # not exist item, exist files, exist cancel_pv, exist file_permission
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        FilePermission.init_file_permission(users[users_index]["id"],"1.1","test_file","1")
        add_file(db_records[2][2])
        url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
        redirect_url = url_for("weko_workflow.display_activity",
                               activity_id="1").replace("http://test_server.localdomain","")
        q = Activity.query.filter(Activity.activity_id=="1").first()
        assert q.status == 'N'
        assert q.action_order == 1
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="1").all()
        assert len(q) == 1
>       res = client.post(url, json=input)

tests/test_views.py:2284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1136: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:2164: in cancel_action
    FilePermission.delete_object(permission)
../weko-records-ui/weko_records_ui/models.py:291: in delete_object
    db.session.delete(permission)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d3da70d30>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
            state = attributes.instance_state(instance)
        except exc.NO_STATE:
>           raise exc.UnmappedInstanceError(instance)
E           sqlalchemy.orm.exc.UnmappedInstanceError: Class 'builtins.list' is not mapped

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1975: UnmappedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2048 cancel_action: can not get activity_detail
__________________________ test_cancel_action2[6-200] __________________________

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d389d6ef0>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
>           state = attributes.instance_state(instance)
E           AttributeError: 'list' object has no attribute '_sa_instance_state'

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1973: AttributeError

During handling of the above exception, another exception occurred:

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db = <SQLAlchemy engine=postgresql+psycopg2://invenio:***@postgresql:5432/wekotest>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f9d3b4aa4e0> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f9d38cdcf60>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f9d3af18378>
users_index = 6, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d38cd3be0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_cancel_action2(client, users,db, db_register, db_records, add_file, users_index, status_code, mocker):
        login(client=client, email=users[users_index]['email'])
        # can not get activity_detail
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register["activities"][0],None]):
            url = url_for('weko_workflow.cancel_action',
                          activity_id='1', action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # not exist item, exist files, exist cancel_pv, exist file_permission
        input = {
            "action_version":"1.0.0",
            "commond":"this is test comment.",
            "pid_value":"1.1"
            }
        FilePermission.init_file_permission(users[users_index]["id"],"1.1","test_file","1")
        add_file(db_records[2][2])
        url = url_for('weko_workflow.cancel_action',
                      activity_id='1', action_id=1)
        redirect_url = url_for("weko_workflow.display_activity",
                               activity_id="1").replace("http://test_server.localdomain","")
        q = Activity.query.filter(Activity.activity_id=="1").first()
        assert q.status == 'N'
        assert q.action_order == 1
        assert q.activity_status == ActionStatusPolicy.ACTION_BEGIN
        q = ActivityHistory.query.filter(ActivityHistory.activity_id=="1").all()
        assert len(q) == 1
>       res = client.post(url, json=input)

tests/test_views.py:2284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1116: in decorated_function
    return func(*args, **kwargs)
weko_workflow/views.py:2164: in cancel_action
    FilePermission.delete_object(permission)
../weko-records-ui/weko_records_ui/models.py:291: in delete_object
    db.session.delete(permission)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.session.SignallingSession object at 0x7f9d389d6ef0>
instance = [<FilePermission 1>]

    def delete(self, instance):
        """Mark an instance as deleted.
    
        The database delete operation occurs upon ``flush()``.
    
        """
        if self._warn_on_events:
            self._flush_warning("Session.delete()")
    
        try:
            state = attributes.instance_state(instance)
        except exc.NO_STATE:
>           raise exc.UnmappedInstanceError(instance)
E           sqlalchemy.orm.exc.UnmappedInstanceError: Class 'builtins.list' is not mapped

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1975: UnmappedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2048 cancel_action: can not get activity_detail
_________________________ test_is_user_locked_nologin __________________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_is_user_locked_nologin(client, db_register2):
        url = url_for('weko_workflow.is_user_locked')
        res = client.post(url)
>       assert res.status_code == 302
E       assert 405 == 302
E         +405
E         -302

tests/test_views.py:2441: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_____________________________ test_is_user_locked ______________________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_is_user_locked(client,db_register2, users):
        login(client=client, email=users[2]['email'])
        current_cache.delete("workflow_userlock_activity_5")
        url = url_for('weko_workflow.is_user_locked')
    
        # not exist cache
        res = client.get(url)
        assert res.status_code == 200
        assert json.loads(res.data) == {"is_open": False, "activity_id": ""}
    
        current_cache.set("workflow_userlock_activity_5","1")
>       res = client.get(url)

tests/test_views.py:2463: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @workflow_blueprint.route('/activity/user_lock', methods=["GET"])
    @login_required
    def is_user_locked():
        cache_key = "workflow_userlock_activity_{}".format(str(current_user.get_id()))
        cur_locked_val = str(get_cache_data(cache_key)) or str()
        current_app.logger.error("is_user_locked:{}".format(cur_locked_val))
    
    
        if cur_locked_val:
            work_activity = WorkActivity()
            act = work_activity.get_activity_by_id(cur_locked_val)
>           current_app.logger.error(act.activity_status)
E           AttributeError: 'NoneType' object has no attribute 'activity_status'

weko_workflow/views.py:2425: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2419 is_user_locked:
ERROR    testapp:views.py:2419 is_user_locked:1
_______________________ test_user_unlock_activity_acl[0] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 0

    @pytest.mark.parametrize('users_index', [ i for i in range(7)])
    def test_user_unlock_activity_acl(client,users,db_register2,users_index):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.user_unlock_activity', activity_id='1')
>       res = client.post(url)

tests/test_views.py:2515: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2527: in user_unlock_activity
    data = json.loads(request.data.decode("utf-8"))
/usr/local/lib/python3.6/json/__init__.py:354: in loads
    return _default_decoder.decode(s)
/usr/local/lib/python3.6/json/decoder.py:339: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f9d9782a320>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/local/lib/python3.6/json/decoder.py:357: JSONDecodeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_user_unlock_activity_acl[1] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 1

    @pytest.mark.parametrize('users_index', [ i for i in range(7)])
    def test_user_unlock_activity_acl(client,users,db_register2,users_index):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.user_unlock_activity', activity_id='1')
>       res = client.post(url)

tests/test_views.py:2515: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2527: in user_unlock_activity
    data = json.loads(request.data.decode("utf-8"))
/usr/local/lib/python3.6/json/__init__.py:354: in loads
    return _default_decoder.decode(s)
/usr/local/lib/python3.6/json/decoder.py:339: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f9d9782a320>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/local/lib/python3.6/json/decoder.py:357: JSONDecodeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_user_unlock_activity_acl[2] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 2

    @pytest.mark.parametrize('users_index', [ i for i in range(7)])
    def test_user_unlock_activity_acl(client,users,db_register2,users_index):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.user_unlock_activity', activity_id='1')
>       res = client.post(url)

tests/test_views.py:2515: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2527: in user_unlock_activity
    data = json.loads(request.data.decode("utf-8"))
/usr/local/lib/python3.6/json/__init__.py:354: in loads
    return _default_decoder.decode(s)
/usr/local/lib/python3.6/json/decoder.py:339: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f9d9782a320>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/local/lib/python3.6/json/decoder.py:357: JSONDecodeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_user_unlock_activity_acl[3] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 3

    @pytest.mark.parametrize('users_index', [ i for i in range(7)])
    def test_user_unlock_activity_acl(client,users,db_register2,users_index):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.user_unlock_activity', activity_id='1')
>       res = client.post(url)

tests/test_views.py:2515: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2527: in user_unlock_activity
    data = json.loads(request.data.decode("utf-8"))
/usr/local/lib/python3.6/json/__init__.py:354: in loads
    return _default_decoder.decode(s)
/usr/local/lib/python3.6/json/decoder.py:339: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f9d9782a320>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/local/lib/python3.6/json/decoder.py:357: JSONDecodeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_user_unlock_activity_acl[4] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 4

    @pytest.mark.parametrize('users_index', [ i for i in range(7)])
    def test_user_unlock_activity_acl(client,users,db_register2,users_index):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.user_unlock_activity', activity_id='1')
>       res = client.post(url)

tests/test_views.py:2515: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2527: in user_unlock_activity
    data = json.loads(request.data.decode("utf-8"))
/usr/local/lib/python3.6/json/__init__.py:354: in loads
    return _default_decoder.decode(s)
/usr/local/lib/python3.6/json/decoder.py:339: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f9d9782a320>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/local/lib/python3.6/json/decoder.py:357: JSONDecodeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_user_unlock_activity_acl[5] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 5

    @pytest.mark.parametrize('users_index', [ i for i in range(7)])
    def test_user_unlock_activity_acl(client,users,db_register2,users_index):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.user_unlock_activity', activity_id='1')
>       res = client.post(url)

tests/test_views.py:2515: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2527: in user_unlock_activity
    data = json.loads(request.data.decode("utf-8"))
/usr/local/lib/python3.6/json/__init__.py:354: in loads
    return _default_decoder.decode(s)
/usr/local/lib/python3.6/json/decoder.py:339: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f9d9782a320>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/local/lib/python3.6/json/decoder.py:357: JSONDecodeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_user_unlock_activity_acl[6] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, users_index = 6

    @pytest.mark.parametrize('users_index', [ i for i in range(7)])
    def test_user_unlock_activity_acl(client,users,db_register2,users_index):
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.user_unlock_activity', activity_id='1')
>       res = client.post(url)

tests/test_views.py:2515: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2527: in user_unlock_activity
    data = json.loads(request.data.decode("utf-8"))
/usr/local/lib/python3.6/json/__init__.py:354: in loads
    return _default_decoder.decode(s)
/usr/local/lib/python3.6/json/decoder.py:339: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7f9d9782a320>, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/local/lib/python3.6/json/decoder.py:357: JSONDecodeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__________________________ test_user_unlock_activity ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f9d339a44a8>

    def test_user_unlock_activity(client,users,db_register2,mocker):
        url = url_for('weko_workflow.user_unlock_activity', activity_id='1')
        login(client=client, email=users[2]['email'])
        current_cache.set("workflow_userlock_activity_5","1")
        # is_opened is True
        data = json.dumps({"is_opened": True})
        res = client.post(url,data=data)
        assert res.status_code == 200
>       assert json.loads(res.data) == {"code": 200, "msg": "Not unlock"}
E       AssertionError: assert {'code': 200, 'msg': 'User Unlock Success'} == {'code': 200, 'msg': 'Not unlock'}
E         Common items:
E         {'code': 200}
E         Differing items:
E         {'msg': 'User Unlock Success'} != {'msg': 'Not unlock'}
E         Full diff:
E         - {'code': 200, 'msg': 'Not unlock'}
E         ?                       ^^^^^
E         + {'code': 200, 'msg': 'User Unlock Success'}
E         ?                       ^^^^^^     ++++++++

tests/test_views.py:2527: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_unlock_activity_acl_nologin _______________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_unlock_activity_acl_nologin(client,db_register2):
        """Test of unlock activity."""
        url = url_for('weko_workflow.unlock_activity', activity_id='1')
        input = {'locked_value':'1-1661748792565'}
    
        res = client.post(url, json=input)
        assert res.status_code == 302
>       assert res.location == url_for('security.login',next="/workflow/activity/unlock/1",_external=True)
E       AssertionError: assert 'http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Factivity%2Funlock%2F1' == 'http://test_server.localdomain/login/?next=%2Fworkflow%2Factivity%2Funlock%2F1'
E         - http://test_server.localdomain/login/?next=%2Fworkflow%2Factivity%2Funlock%2F1
E         ?        ^^^^ ^^^^^^
E         + http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Factivity%2Funlock%2F1
E         ?        ^^^^ ^^^^^^

tests/test_views.py:2705: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_check_approval_acl_nologin ________________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_check_approval_acl_nologin(client,db_register2):
        """Test of check approval."""
        url = url_for('weko_workflow.check_approval', activity_id='1')
    
        res = client.get(url)
        assert res.status_code == 302
>       assert res.location == url_for('security.login',next="/workflow/check_approval/1",_external=True)
E       AssertionError: assert 'http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Fcheck_approval%2F1' == 'http://test_server.localdomain/login/?next=%2Fworkflow%2Fcheck_approval%2F1'
E         - http://test_server.localdomain/login/?next=%2Fworkflow%2Fcheck_approval%2F1
E         ?        ^^^^ ^^^^^^
E         + http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Fcheck_approval%2F1
E         ?        ^^^^ ^^^^^^

tests/test_views.py:2779: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
____________________ test_get_feedback_maillist_acl_nologin ____________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_get_feedback_maillist_acl_nologin(client,db_register2):
        """Test of get feedback maillist."""
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
    
        res = client.get(url)
        assert res.status_code == 302
>       assert res.location == url_for('security.login',next="/workflow/get_feedback_maillist/1",_external=True)
E       AssertionError: assert 'http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Fget_feedback_maillist%2F1' == 'http://test_server.localdomain/login/?next=%2Fworkflow%2Fget_feedback_maillist%2F1'
E         - http://test_server.localdomain/login/?next=%2Fworkflow%2Fget_feedback_maillist%2F1
E         ?        ^^^^ ^^^^^^
E         + http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Fget_feedback_maillist%2F1
E         ?        ^^^^ ^^^^^^

tests/test_views.py:2853: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_get_feedback_maillist[0-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d66d5b400; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d2cac9978>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f9d2cac9588> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2382 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[1-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d66d5b400; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d2aeb0080>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f9d2aeb0c18> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2382 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[2-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d66d5b400; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d2a697eb8>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f9d2a697898> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2382 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[3-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d66d5b400; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d2a3b0160>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f9d2a3b0668> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2382 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[4-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d66d5b400; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d2bf66ac8>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f9d2bf66048> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2382 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[5-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d66d5b400; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d5e489cc0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f9d5e489e80> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2382 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[6-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:2904: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f9d66d5b400; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f9d2d39b358>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f9d2d39b748> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
------------------------------ Captured log call -------------------------------
ERROR    testapp:views.py:2382 get_feedback_maillist: argument error
________________________ test_save_activity_acl_nologin ________________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_save_activity_acl_nologin(client,db_register2):
        """Test of save activity."""
        url = url_for('weko_workflow.save_activity')
        input = {"activity_id":"A-20220921-00001","title":"test","shared_user_id":-1}
    
        res = client.post(url, json=input)
        assert res.status_code == 302
>       assert res.location == url_for('security.login',next="/workflow/save_activity_data",_external=True)
E       AssertionError: assert 'http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Fsave_activity_data' == 'http://test_server.localdomain/login/?next=%2Fworkflow%2Fsave_activity_data'
E         - http://test_server.localdomain/login/?next=%2Fworkflow%2Fsave_activity_data
E         ?        ^^^^ ^^^^^^
E         + http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Fsave_activity_data
E         ?        ^^^^ ^^^^^^

tests/test_views.py:2952: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
________________________ test_withdraw_confirm_nologin _________________________

client = <FlaskClient <Flask 'testapp'>>, db_register2 = None

    def test_withdraw_confirm_nologin(client,db_register2):
        """Test of withdraw confirm."""
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                      action_id=1)
        input = {}
    
        res = client.post(url, json=input)
>       assert res.location == url_for('security.login',next="/workflow/activity/detail/1/1/withdraw",
                                        _external=True)
E       AssertionError: assert 'http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Factivity%2Fdetail%2F1%2F1%2Fwithdraw' == 'http://test_server.localdomain/login/?next=%2Fworkflow%2Factivity%2Fdetail%2F1%2F1%2Fwithdraw'
E         - http://test_server.localdomain/login/?next=%2Fworkflow%2Factivity%2Fdetail%2F1%2F1%2Fwithdraw
E         ?        ^^^^ ^^^^^^
E         + http://TEST_SERVER.localdomain/login/?next=%2Fworkflow%2Factivity%2Fdetail%2F1%2F1%2Fwithdraw
E         ?        ^^^^ ^^^^^^

tests/test_views.py:3839: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 0, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:4026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1136: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2284: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 1, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:4026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1116: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2284: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 2, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:4026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1116: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2284: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 3, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:4026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1136: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2284: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 4, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:4026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1136: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2284: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 5, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:4026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1136: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2284: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
__ test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 6, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:4026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:150: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1116: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2284: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_ test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data] _

guest = <FlaskClient <Flask 'testapp'>>
client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
input_data = {'passwd': 'DELETE'}, status_code = 500, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    def test_withdraw_confirm_exception2_guestlogin(guest, client, users, db_register_fullaction, input_data, status_code, code, msg):
        """Test of withdraw confirm."""
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                return_value=(roles, action_users)):
>               res = guest.post(url, json=input)

tests/test_views.py:4051: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1136: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2284: TypeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_1[1-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 403),
        (1, 200),
        (2, 200),
        (3, 403),
        (4, 403),
        (5, 403),
        (6, 200),
    ])
    def test_download_activitylog_1(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #1
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:4150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2983: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4388: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_1[2-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 403),
        (1, 200),
        (2, 200),
        (3, 403),
        (4, 403),
        (5, 403),
        (6, 200),
    ])
    def test_download_activitylog_1(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #1
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:4150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2983: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4388: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_1[6-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 403),
        (1, 200),
        (2, 200),
        (3, 403),
        (4, 403),
        (5, 403),
        (6, 200),
    ])
    def test_download_activitylog_1(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #1
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:4150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2983: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4388: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_2[1-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (1, 200),
        (2, 200),
        (6, 200),
    ])
    def test_download_activitylog_2(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #4
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:4176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2983: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4388: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_2[2-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (1, 200),
        (2, 200),
        (6, 200),
    ])
    def test_download_activitylog_2(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #4
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:4176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2983: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4388: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
______________________ test_download_activitylog_2[6-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (1, 200),
        (2, 200),
        (6, 200),
    ])
    def test_download_activitylog_2(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #4
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:4176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:227: in open
    follow_redirects=follow_redirects,
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2463: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2449: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1866: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2446: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1951: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1820: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:39: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1949: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1935: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2983: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4388: AttributeError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
_______________________ test_ActivityActionResource_post _______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_ActivityActionResource_post(client, db_register , users):
        url = '/depositactivity/{}'.format(db_register['activities'][0].activity_id)
        login(client=client, email=users[2]['email'])
        res = client.get(url)
>       assert res.status_code == 302
E       assert 400 == 302
E         +400
E         -302

tests/test_views.py:4363: AssertionError
------------------------------ Captured log setup ------------------------------
WARNING  testapp:ext.py:255 JSONSCHEMAS_HOST is set to localhost
=============================== warnings summary ===============================
.tox/c1/lib/python3.6/site-packages/babel/core.py:1130
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/babel/core.py:1130: DeprecationWarning: invalid escape sequence \s
    """

.tox/c1/lib/python3.6/site-packages/babel/dates.py:1158
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/babel/dates.py:1158: DeprecationWarning: invalid escape sequence \d
    numbers = re.findall('(\d+)', string)

.tox/c1/lib/python3.6/site-packages/babel/dates.py:1201
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/babel/dates.py:1201: DeprecationWarning: invalid escape sequence \d
    numbers = re.findall('(\d+)', string)

.tox/c1/lib/python3.6/site-packages/babel/localtime/_unix.py:103
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/babel/localtime/_unix.py:103: DeprecationWarning: invalid escape sequence \s
    zone_re = re.compile('\s*ZONE\s*=\s*\"')

.tox/c1/lib/python3.6/site-packages/babel/localtime/_unix.py:104
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/babel/localtime/_unix.py:104: DeprecationWarning: invalid escape sequence \s
    timezone_re = re.compile('\s*TIMEZONE\s*=\s*\"')

.tox/c1/lib/python3.6/site-packages/webassets/filter/__init__.py:51
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/webassets/filter/__init__.py:51: DeprecationWarning: invalid escape sequence \,
    """

.tox/c1/lib/python3.6/site-packages/webassets/filter/replace.py:20
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/webassets/filter/replace.py:20: DeprecationWarning: invalid escape sequence \s
    """

.tox/c1/lib/python3.6/site-packages/semver/__init__.py:278
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/semver/__init__.py:278: DeprecationWarning: invalid escape sequence \d
    NUMERIC = re.compile("^\d+$")

.tox/c1/lib/python3.6/site-packages/semver/__init__.py:684
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/semver/__init__.py:684: DeprecationWarning: invalid escape sequence \s
    range_ = " ".join(re.split("\s+", range_))

.tox/c1/lib/python3.6/site-packages/semver/__init__.py:692
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/semver/__init__.py:692: DeprecationWarning: invalid escape sequence \s
    set_ = re.split("\s+", ' '.join([parse_comparator(comp, loose) for comp in range_.split(" ")]))

.tox/c1/lib/python3.6/site-packages/semver/__init__.py:744
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/semver/__init__.py:744: DeprecationWarning: invalid escape sequence \s
    for c in re.split("\s+", comp.strip())])

.tox/c1/lib/python3.6/site-packages/semver/__init__.py:785
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/semver/__init__.py:785: DeprecationWarning: invalid escape sequence \s
    for c in re.split("\s+", comp.strip())])

.tox/c1/lib/python3.6/site-packages/semver/__init__.py:836
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/semver/__init__.py:836: DeprecationWarning: invalid escape sequence \s
    for c in re.split("\s+", comp.strip())])

.tox/c1/lib/python3.6/site-packages/passlib/context.py:231
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/passlib/context.py:231: DeprecationWarning: invalid escape sequence \;
    elif any(c in source for c in "\n\r\t") or not source.strip(" \t./\;:"):

.tox/c1/lib/python3.6/site-packages/passlib/context.py:2240
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/passlib/context.py:2240: DeprecationWarning: invalid escape sequence \*
    """

.tox/c1/lib/python3.6/site-packages/passlib/context.py:2323
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/passlib/context.py:2323: DeprecationWarning: invalid escape sequence \*
    """

.tox/c1/lib/python3.6/site-packages/passlib/context.py:2406
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/passlib/context.py:2406: DeprecationWarning: invalid escape sequence \*
    """

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:223
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:223: DeprecationWarning: invalid escape sequence \s
    ('\s+', Text),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:316
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:316: DeprecationWarning: invalid escape sequence \]
    (r'(/)(\[' + _dot + '*?\])(' + _dot + r'*\n)',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:333
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:333: DeprecationWarning: invalid escape sequence \}
    (r'\{(,\n|' + _dot + ')*?\}', using(RubyLexer)),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:334
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:334: DeprecationWarning: invalid escape sequence \]
    (r'\[' + _dot + '*?\]', using(RubyLexer)),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:343
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:343: DeprecationWarning: invalid escape sequence \}
    (r'(#\{)(' + _dot + '*?)(\})',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:376
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:376: DeprecationWarning: invalid escape sequence \}
    (r'(#\{)(' + _dot + '*?)(\})',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:425
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:425: DeprecationWarning: invalid escape sequence \]
    (r'(/)(\[' + _dot + '*?\])(' + _dot + r'*\n)',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:445
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:445: DeprecationWarning: invalid escape sequence \}
    (r'\{(,\n|' + _dot + ')*?\}', using(ScalaLexer)),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:446
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:446: DeprecationWarning: invalid escape sequence \]
    (r'\[' + _dot + '*?\]', using(ScalaLexer)),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:455
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:455: DeprecationWarning: invalid escape sequence \}
    (r'(#\{)(' + _dot + '*?)(\})',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:488
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:488: DeprecationWarning: invalid escape sequence \}
    (r'(#\{)(' + _dot + '*?)(\})',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:533
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:533: DeprecationWarning: invalid escape sequence \]
    (r'(/)(\[' + _dot + '*?\])(' + _dot + r'*\n)',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:554
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:554: DeprecationWarning: invalid escape sequence \}
    (r'\{(,\n|' + _dot + ')*?\}', using(ScalaLexer)),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:555
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:555: DeprecationWarning: invalid escape sequence \]
    (r'\[' + _dot + '*?\]', using(ScalaLexer)),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:564
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:564: DeprecationWarning: invalid escape sequence \}
    (r'(#\{)(' + _dot + '*?)(\})',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:597
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/html.py:597: DeprecationWarning: invalid escape sequence \}
    (r'(#\{)(' + _dot + '*?)(\})',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/javascript.py:538
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/javascript.py:538: DeprecationWarning: invalid escape sequence \s
    if re.search('^(import.+(from\s+)?["\']|'

.tox/c1/lib/python3.6/site-packages/pygments/lexers/javascript.py:539
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/javascript.py:539: DeprecationWarning: invalid escape sequence \s
    '(export\s*)?(interface|class|function)\s+)',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/javascript.py:1018
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/javascript.py:1018: DeprecationWarning: invalid escape sequence \s
    if re.search('^\s*@import\s+[<"]', text, re.MULTILINE):

.tox/c1/lib/python3.6/site-packages/pygments/lexers/jvm.py:260
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/jvm.py:260: DeprecationWarning: invalid escape sequence \d
    letter_letter_digit = u'%s(?:%s|\d)*' % (letter, letter)

.tox/c1/lib/python3.6/site-packages/pygments/lexers/jvm.py:692
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/jvm.py:692: DeprecationWarning: invalid escape sequence \w
    u'(?![\w!:?])', Name.Function),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/jvm.py:1261
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/jvm.py:1261: DeprecationWarning: invalid escape sequence \w
    ('`?[a-zA-Z_][\w$]*', Name),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:406
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:406: DeprecationWarning: invalid escape sequence \(
    _prompt_re = re.compile('irb\([a-zA-Z_]\w*\):\d{3}:\d+[>*"\'] '

.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:407
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:407: DeprecationWarning: invalid escape sequence \?
    '|>> |\?> ')

.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:501
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:501: DeprecationWarning: invalid escape sequence \w
    ('[A-Z]\w*', Name.Constant),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:502
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:502: DeprecationWarning: invalid escape sequence \w
    ('@[a-zA-Z_]\w*', Name.Variable.Instance),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:503
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:503: DeprecationWarning: invalid escape sequence \w
    ('@@[a-zA-Z_]\w*', Name.Variable.Class),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:505
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/ruby.py:505: DeprecationWarning: invalid escape sequence \w
    ('[a-zA-Z_]\w*', Name),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/actionscript.py:128
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/actionscript.py:128: DeprecationWarning: invalid escape sequence \.
    typeidentifier = identifier + '(?:\.<\w+>)?'

.tox/c1/lib/python3.6/site-packages/pygments/lexers/actionscript.py:235
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/actionscript.py:235: DeprecationWarning: invalid escape sequence \s
    ('\s+', Text),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/php.py:176
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/php.py:176: DeprecationWarning: invalid escape sequence \}
    (r'\$\{\$+' + _ident_inner + '\}', Name.Variable),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/php.py:217
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/php.py:217: DeprecationWarning: invalid escape sequence \[
    (r'\$' + _ident_inner + '(\[\S+?\]|->' + _ident_inner + ')?',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:441
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:441: DeprecationWarning: invalid escape sequence \(
    (r'(' + qname + ')(\()?', bygroups(Name, Punctuation), 'operator'),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:646
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:646: DeprecationWarning: invalid escape sequence \*
    (ncname + ':\*', Name, 'operator'),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:647
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:647: DeprecationWarning: invalid escape sequence \*
    ('\*:'+ncname, Name.Tag, 'operator'),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:648
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:648: DeprecationWarning: invalid escape sequence \*
    ('\*', Name.Tag, 'operator'),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:875
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/webmisc.py:875: DeprecationWarning: invalid escape sequence \`
    """

.tox/c1/lib/python3.6/site-packages/pygments/lexers/lisp.py:142
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/lisp.py:142: DeprecationWarning: invalid escape sequence \(
    ("(?<=\()(%s)" % '|'.join(re.escape(entry) + ' ' for entry in builtins),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/lisp.py:324
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/lisp.py:324: DeprecationWarning: invalid escape sequence \s
    (r'#+nil' + terminated + '\s*\(', Comment.Preproc, 'commented-form'),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/lisp.py:336
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/lisp.py:336: DeprecationWarning: invalid escape sequence \*
    (r'\*' + symbol + '\*', Name.Variable.Global),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/lisp.py:2157
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/lisp.py:2157: DeprecationWarning: invalid escape sequence \*
    (r'\*' + symbol + '\*', Name.Variable.Global),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:183
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:183: DeprecationWarning: invalid escape sequence \w
    ('[a-zA-Z_]\w*', Name),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:187
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:187: DeprecationWarning: invalid escape sequence \w
    ('[a-zA-Z_]\w*', Name.Function, '#pop'),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:191
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:191: DeprecationWarning: invalid escape sequence \w
    ('[a-zA-Z_]\w*', Name.Class, '#pop')

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:268
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:268: DeprecationWarning: invalid escape sequence \w
    '((\w+)((\.\w+)|(\[[^\]]+\]))*)?'  # field name

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:269
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:269: DeprecationWarning: invalid escape sequence \!
    '(\![sra])?'                       # conversion

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:270
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:270: DeprecationWarning: invalid escape sequence \:
    '(\:(.?[<>=\^])?[-+ ]?#?0?(\d+)?,?(\.\d+)?[E-GXb-gnosx%]?)?'

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:271
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:271: DeprecationWarning: invalid escape sequence \}
    '\}', String.Interpol),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:674
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:674: DeprecationWarning: invalid escape sequence \w
    ('[a-zA-Z_]\w*', Name),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:677
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:677: DeprecationWarning: invalid escape sequence \w
    ('[a-zA-Z_]\w*', Name.Function, '#pop')

.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:694
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/python.py:694: DeprecationWarning: invalid escape sequence \w
    ('[a-zA-Z_]\w*', Name.Class, '#pop')

.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:211
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:211: DeprecationWarning: invalid escape sequence \s
    if re.search('(?:my|our)\s+[$@%(]', text):

.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:229
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:229: DeprecationWarning: invalid escape sequence \w
    PERL6_IDENTIFIER_RANGE = "['\w:-]"

.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:498
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:498: DeprecationWarning: invalid escape sequence \s
    (r'(regex|token|rule)(?!' + PERL6_IDENTIFIER_RANGE + ')(\s*' + PERL6_IDENTIFIER_RANGE + '+)?',

.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:594
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:594: DeprecationWarning: invalid escape sequence \s
    if re.search("(?:my|our|has)\s+(?:" + Perl6Lexer.PERL6_IDENTIFIER_RANGE +

.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:595
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:595: DeprecationWarning: invalid escape sequence \s
    "+\s+)?[$@%&(]", text):

.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:601
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:601: DeprecationWarning: invalid escape sequence \s
    if re.match('^\s*$', line):

.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:605
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:605: DeprecationWarning: invalid escape sequence \s
    if re.match('^\s*(?:use\s+)?v6(?:\.\d(?:\.\d)?)?;', line):

.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:608
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/perl.py:608: DeprecationWarning: invalid escape sequence \s
    class_decl = re.match('^\s*(?:(?P<scope>my|our)\s+)?(?:module|class|role|enum|grammar)', line)

.tox/c1/lib/python3.6/site-packages/pygments/lexers/iolang.py:52
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/iolang.py:52: DeprecationWarning: invalid escape sequence \w
    ('[a-zA-Z_]\w*', Name),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/scripting.py:107
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/scripting.py:107: DeprecationWarning: invalid escape sequence \(
    ('\(', Punctuation, '#pop'),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/scripting.py:699
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/scripting.py:699: DeprecationWarning: invalid escape sequence \(
    ('\(\*', Comment.Multiline, '#push'),

.tox/c1/lib/python3.6/site-packages/pygments/lexers/scripting.py:700
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/pygments/lexers/scripting.py:700: DeprecationWarning: invalid escape sequence \*
    ('\*\)', Comment.Multiline, '#pop'),

.tox/c1/lib/python3.6/site-packages/arrow/parser.py:24
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/arrow/parser.py:24: DeprecationWarning: invalid escape sequence \[
    _ESCAPE_RE = re.compile('\[[^\[\]]*\]')

.tox/c1/lib/python3.6/site-packages/arrow/parser.py:26
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/arrow/parser.py:26: DeprecationWarning: invalid escape sequence \d
    _ONE_OR_MORE_DIGIT_RE = re.compile('\d+')

.tox/c1/lib/python3.6/site-packages/arrow/parser.py:27
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/arrow/parser.py:27: DeprecationWarning: invalid escape sequence \d
    _ONE_OR_TWO_DIGIT_RE = re.compile('\d{1,2}')

.tox/c1/lib/python3.6/site-packages/arrow/parser.py:28
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/arrow/parser.py:28: DeprecationWarning: invalid escape sequence \d
    _FOUR_DIGIT_RE = re.compile('\d{4}')

.tox/c1/lib/python3.6/site-packages/arrow/parser.py:29
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/arrow/parser.py:29: DeprecationWarning: invalid escape sequence \d
    _TWO_DIGIT_RE = re.compile('\d{2}')

.tox/c1/lib/python3.6/site-packages/arrow/parser.py:30
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/arrow/parser.py:30: DeprecationWarning: invalid escape sequence \-
    _TZ_RE = re.compile('[+\-]?\d{2}:?(\d{2})?')

.tox/c1/lib/python3.6/site-packages/arrow/parser.py:31
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/arrow/parser.py:31: DeprecationWarning: invalid escape sequence \w
    _TZ_NAME_RE = re.compile('\w[\w+\-/]+')

.tox/c1/lib/python3.6/site-packages/arrow/parser.py:49
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/arrow/parser.py:49: DeprecationWarning: invalid escape sequence \d
    'X': re.compile('\d+'),

.tox/c1/lib/python3.6/site-packages/arrow/parser.py:310
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/arrow/parser.py:310: DeprecationWarning: invalid escape sequence \-
    _TZINFO_RE = re.compile('([+\-])?(\d\d):?(\d\d)?')

.tox/c1/lib/python3.6/site-packages/elasticsearch_dsl/document.py:215
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/elasticsearch_dsl/document.py:215: DeprecationWarning: invalid escape sequence \s
    """

.tox/c1/lib/python3.6/site-packages/elementpath/tdop_parser.py:434
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/elementpath/tdop_parser.py:434: DeprecationWarning: invalid escape sequence \s
    s.replace(r'\ ', '\s+')

.tox/c1/lib/python3.6/site-packages/elementpath/tdop_parser.py:441
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/elementpath/tdop_parser.py:441: DeprecationWarning: invalid escape sequence \s
    s = '%s\s*%s' % (s[:-4], s[-4:])

.tox/c1/lib/python3.6/site-packages/elementpath/tdop_parser.py:439
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/elementpath/tdop_parser.py:439: DeprecationWarning: invalid escape sequence \s
    s = '%s\s*%s' % (s[:-2], s[-2:])

.tox/c1/lib/python3.6/site-packages/elementpath/xpath1_parser.py:32
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/elementpath/xpath1_parser.py:32: DeprecationWarning: invalid escape sequence \-
    XML_NCNAME_PATTERN = u"[{0}][\-.0-9\u00B7\u0300-\u036F\u203F-\u2040{0}]*".format(XML_NAME_CHARACTER)

.tox/c1/lib/python3.6/site-packages/elementpath/xpath1_parser.py:115
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/elementpath/xpath1_parser.py:115: DeprecationWarning: invalid escape sequence \s
    axis_pattern_template = '\\b%s(?=\s*\\:\\:|\s*\\(\\:.*\\:\\)\s*\\:\\:)'

.tox/c1/lib/python3.6/site-packages/elementpath/xpath1_parser.py:169
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/elementpath/xpath1_parser.py:169: DeprecationWarning: invalid escape sequence \s
    function_pattern_template = '\\b%s(?=\s*\\(|\s*\\(\\:.*\\:\\)\\()'

.tox/c1/lib/python3.6/site-packages/elementpath/xpath2_parser.py:1045
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/elementpath/xpath2_parser.py:1045: DeprecationWarning: invalid escape sequence \s
    pattern='\\battribute(?=\s*\\:\\:|\s*\\(\\:.*\\:\\)\s*\\:\\:|\s*\\(|\s*\\(\\:.*\\:\\)\\()')

.tox/c1/lib/python3.6/site-packages/xmlschema/regex.py:39
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/xmlschema/regex.py:39: DeprecationWarning: invalid escape sequence \-
    u"\-.0-9:A-Z_a-z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-"

.tox/c1/lib/python3.6/site-packages/xmlschema/codepoints.py:31
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/xmlschema/codepoints.py:31: DeprecationWarning: invalid escape sequence \%
    return u'\%s' % unicode_chr(cp)

.tox/c1/lib/python3.6/site-packages/xmlschema/codepoints.py:35
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/xmlschema/codepoints.py:35: DeprecationWarning: invalid escape sequence \%
    start_char = u'\%s' % unicode_chr(cp[0])

.tox/c1/lib/python3.6/site-packages/xmlschema/codepoints.py:40
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/xmlschema/codepoints.py:40: DeprecationWarning: invalid escape sequence \%
    end_char = u'\%s' % unicode_chr(cp[1])

.tox/c1/lib/python3.6/site-packages/validators/url.py:5
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:5: DeprecationWarning: invalid escape sequence \.
    ip_middle_octet = u"(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5]))"

.tox/c1/lib/python3.6/site-packages/validators/url.py:6
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:6: DeprecationWarning: invalid escape sequence \.
    ip_last_octet = u"(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))"

.tox/c1/lib/python3.6/site-packages/validators/url.py:13
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:13: DeprecationWarning: invalid escape sequence \S
    u"(?:\S+(?::\S*)?@)?"

.tox/c1/lib/python3.6/site-packages/validators/url.py:19
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:19: DeprecationWarning: invalid escape sequence \.
    u"(?:(?:169\.254|192\.168)" + ip_middle_octet + ip_last_octet + u")|"

.tox/c1/lib/python3.6/site-packages/validators/url.py:20
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:20: DeprecationWarning: invalid escape sequence \.
    u"(?:172\.(?:1[6-9]|2\d|3[0-1])" + ip_middle_octet + ip_last_octet + u"))"

.tox/c1/lib/python3.6/site-packages/validators/url.py:32
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:32: DeprecationWarning: invalid escape sequence \d
    u"(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])"

.tox/c1/lib/python3.6/site-packages/validators/url.py:39
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:39: DeprecationWarning: invalid escape sequence \.
    u"(?:\.(?:[a-z\u00a1-\uffff0-9]-?)*[a-z\u00a1-\uffff0-9]+)*"

.tox/c1/lib/python3.6/site-packages/validators/url.py:41
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:41: DeprecationWarning: invalid escape sequence \.
    u"(?:\.(?:[a-z\u00a1-\uffff]{2,}))"

.tox/c1/lib/python3.6/site-packages/validators/url.py:44
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:44: DeprecationWarning: invalid escape sequence \d
    u"(?::\d{2,5})?"

.tox/c1/lib/python3.6/site-packages/validators/url.py:46
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:46: DeprecationWarning: invalid escape sequence \S
    u"(?:/\S*)?"

.tox/c1/lib/python3.6/site-packages/validators/url.py:48
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/validators/url.py:48: DeprecationWarning: invalid escape sequence \?
    u"(?:\?\S*)?"

.tox/c1/lib/python3.6/site-packages/jsonpath_ng/ext/string.py:18
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/jsonpath_ng/ext/string.py:18: DeprecationWarning: invalid escape sequence \(
    SUB = re.compile("sub\(/(.*)/,\s+(.*)\)")

.tox/c1/lib/python3.6/site-packages/jsonpath_ng/ext/string.py:19
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/jsonpath_ng/ext/string.py:19: DeprecationWarning: invalid escape sequence \(
    SPLIT = re.compile("split\((.),\s+(\d+),\s+(\d+|-1)\)")

.tox/c1/lib/python3.6/site-packages/jsonpath_ng/ext/string.py:20
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/jsonpath_ng/ext/string.py:20: DeprecationWarning: invalid escape sequence \(
    STR = re.compile("str\(\)")

.tox/c1/bin/bagit.py:926
  /code/modules/weko-workflow/.tox/c1/bin/bagit.py:926: DeprecationWarning: invalid escape sequence \c
    """

.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py:102
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py:102: DeprecationWarning: invalid escape sequence \*
    '''

.tox/c1/lib/python3.6/site-packages/b2handle/handleexceptions.py:128
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/handleexceptions.py:128: DeprecationWarning: invalid escape sequence \s
    pat = re.compile('>[\s]+<')

.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

.tox/c1/lib/python3.6/site-packages/past/types/oldstr.py:33
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/past/types/oldstr.py:33: DeprecationWarning: invalid escape sequence \d
    """

.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:177
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:177: DeprecationWarning: invalid escape sequence \*
    '''

.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:197
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:197: DeprecationWarning: invalid escape sequence \*
    '''

.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:230
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:230: DeprecationWarning: invalid escape sequence \*
    '''

.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:248
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/handleclient.py:248: DeprecationWarning: invalid escape sequence \*
    '''

.tox/c1/lib/python3.6/site-packages/citeproc/formatter/rst.py:8
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/citeproc/formatter/rst.py:8: DeprecationWarning: invalid escape sequence \*
    text = text.replace('*', '\*')

.tox/c1/lib/python3.6/site-packages/citeproc/formatter/rst.py:9
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/citeproc/formatter/rst.py:9: DeprecationWarning: invalid escape sequence \`
    text = text.replace('`', '\`')

.tox/c1/lib/python3.6/site-packages/citeproc/model.py:671
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/citeproc/model.py:671: DeprecationWarning: invalid escape sequence \d
    m = re.search('\d+', first)

.tox/c1/lib/python3.6/site-packages/citeproc/source/bibtex/bibtex.py:156
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/citeproc/source/bibtex/bibtex.py:156: DeprecationWarning: invalid escape sequence \d
    RE_DAY = '(?P<day>\d+)'

.tox/c1/lib/python3.6/site-packages/citeproc/source/bibtex/bibtex.py:157
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/citeproc/source/bibtex/bibtex.py:157: DeprecationWarning: invalid escape sequence \w
    RE_MONTH = '(?P<month>\w+)'

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sickle/utils.py:20: DeprecationWarning: invalid escape sequence \{
    return re.search('(\{.*\})', element.tag).group(1)

tests/test_admin.py: 23 warnings
tests/test_api.py: 7 warnings
tests/test_cli.py: 2 warnings
tests/test_romeo.py: 3 warnings
tests/test_sessions.py: 1 warning
tests/test_tasks.py: 1 warning
tests/test_utils.py: 88 warnings
tests/test_views.py: 315 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/flask_caching/__init__.py:241: DeprecationWarning: Using the initialization functions in flask_caching.backend is deprecated.  Use the a full path to backend classes directly.
    category=DeprecationWarning,

tests/test_admin.py: 598 warnings
tests/test_api.py: 182 warnings
tests/test_cli.py: 52 warnings
tests/test_romeo.py: 78 warnings
tests/test_sessions.py: 26 warnings
tests/test_tasks.py: 26 warnings
tests/test_utils.py: 2288 warnings
tests/test_views.py: 8190 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/invenio_admin/ext.py:73: PendingDeprecationWarning: Usage of model and modelview kwargs are deprecated in favor of view_class, args and kwargs.
    PendingDeprecationWarning

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/passlib/pwd.py:363: DeprecationWarning: invalid escape sequence \*
    """

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/passlib/pwd.py:616: DeprecationWarning: invalid escape sequence \*
    """

tests/test_admin.py: 23 warnings
tests/test_api.py: 7 warnings
tests/test_cli.py: 2 warnings
tests/test_romeo.py: 3 warnings
tests/test_sessions.py: 1 warning
tests/test_tasks.py: 1 warning
tests/test_utils.py: 88 warnings
tests/test_views.py: 315 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/flask_admin/model/base.py:1416: UserWarning: Fields missing from ruleset: created_userId,created_date,updated_userId,updated_date
    warnings.warn(text)

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/resync/w3c_datetime.py:105: DeprecationWarning: invalid escape sequence \d
    "(\d\d):(\d\d))$", s)

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/resync/list_base_with_index.py:412: DeprecationWarning: invalid escape sequence \w
    return(re.match('file:', uri) or not re.match('\w{3,4}:', uri))

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/resync/mapper.py:132: DeprecationWarning: invalid escape sequence \w
    path = re.sub('[^\w\-\.]', '_', path)

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/resync/mapper.py:134: DeprecationWarning: invalid escape sequence \.
    path = re.sub('[_\.]+$', '', path)

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/resync/mapper.py:135: DeprecationWarning: invalid escape sequence \.
    path = re.sub('^[_\.]+', '', path)

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/resync/resource_list_builder.py:53: DeprecationWarning: invalid escape sequence \d
    self.exclude_files = ['sitemap\d{0,5}.xml']

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest
  /code/modules/weko-workflow/.tox/c1/src/pypdf2/PyPDF2/generic.py:348: DeprecationWarning: invalid escape sequence \c
    b_("c") : b_("\c"),

tests/test_utils.py::test_process_send_reminder_mail
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/postgresql/base.py:3258: SAWarning: Predicate of partial index uq_item_type_name_name ignored during reflection
    % idx_name

-- Docs: https://docs.pytest.org/en/stable/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                  Stmts   Miss Branch BrPart  Cover
-----------------------------------------------------------------------
weko_workflow/__init__.py                 4      0      0      0   100%
weko_workflow/admin.py                  277     42     99     10    82%
weko_workflow/api.py                   1250    409    438     83    63%
weko_workflow/bundles.py                 14      0      0      0   100%
weko_workflow/cli.py                    109     22     42     15    74%
weko_workflow/config.py                  94      0      0      0   100%
weko_workflow/errors.py                  18      0     10      0   100%
weko_workflow/ext.py                     21      0     10      2    94%
weko_workflow/models.py                 303     13     76     10    93%
weko_workflow/romeo.py                   22      0      0      0   100%
weko_workflow/schema/marshmallow.py      87      0     56      0   100%
weko_workflow/schema/utils.py            22      6     14      4    67%
weko_workflow/scopes.py                   6      0      0      0   100%
weko_workflow/sessions.py                13      5      4      1    53%
weko_workflow/tasks.py                    7      0      0      0   100%
weko_workflow/utils.py                 2049    571    946     96    70%
weko_workflow/version.py                  2      0      0      0   100%
weko_workflow/views.py                 1400    477    510     46    62%
-----------------------------------------------------------------------
TOTAL                                  5698   1545   2205    267    70%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

=========================== short test summary info ============================
FAILED tests/test_admin.py::TestFlowSettingView::test_get_actions - Assertion...
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_index_acl[1-200] - ...
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl[1-200]
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_save_workflow_role
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_get_language_workflows
FAILED tests/test_api.py::test_WorkActivity_get_activity_index_search - sqlal...
FAILED tests/test_api.py::test_WorkActivity_upt_activity_detail - assert <Act...
FAILED tests/test_cli.py::test_init_workflow_tables - assert ('(psycopg2.Inte...
FAILED tests/test_tasks.py::test_cancel_expired_usage_report_activities - Fai...
FAILED tests/test_utils.py::test_item_metadata_validation_2 - assert 6 == 2
FAILED tests/test_utils.py::test_handle_check_required_pattern_and_either - A...
FAILED tests/test_utils.py::test_delete_bucket - sqlalchemy.exc.IntegrityErro...
FAILED tests/test_utils.py::test_set_bucket_default_size - AttributeError: 'R...
FAILED tests/test_utils.py::test_get_parent_pid_with_type - AttributeError: '...
FAILED tests/test_utils.py::test_prepare_edit_workflow - invenio_pidstore.err...
FAILED tests/test_utils.py::test_handle_finish_workflow - ModuleNotFoundError...
FAILED tests/test_utils.py::test_get_url_root - AssertionError: assert 'http:...
FAILED tests/test_utils.py::test_get_item_info - TypeError: not all arguments...
FAILED tests/test_utils.py::test_delete_guest_activity - assert None == True
FAILED tests/test_utils.py::test___init_activity_detail_data_for_guest - sqla...
FAILED tests/test_utils.py::test_update_system_data_for_activity - assert '{"...
FAILED tests/test_utils.py::test_prepare_doi_link_workflow - sqlalchemy.exc.P...
FAILED tests/test_utils.py::test_get_index_id - BaseException
FAILED tests/test_utils.py::test_make_activitylog_tsv - AttributeError: 'Base...
FAILED tests/test_utils.py::test_is_terms_of_use_only - NameError: name 'is_t...
FAILED tests/test_utils.py::test_grant_access_rights_to_all_open_restricted_files
FAILED tests/test_views.py::test_index_acl_nologin - AssertionError: assert '...
FAILED tests/test_views.py::test_index_acl[0-200] - FileNotFoundError: [Errno...
FAILED tests/test_views.py::test_index_acl[1-200] - FileNotFoundError: [Errno...
FAILED tests/test_views.py::test_index_acl[2-200] - FileNotFoundError: [Errno...
FAILED tests/test_views.py::test_index_acl[3-200] - FileNotFoundError: [Errno...
FAILED tests/test_views.py::test_index_acl[4-200] - FileNotFoundError: [Errno...
FAILED tests/test_views.py::test_index_acl[5-200] - FileNotFoundError: [Errno...
FAILED tests/test_views.py::test_index_acl[6-200] - FileNotFoundError: [Errno...
FAILED tests/test_views.py::test_init_activity_acl[0-200] - IndexError: list ...
FAILED tests/test_views.py::test_init_activity_acl[1-200] - IndexError: list ...
FAILED tests/test_views.py::test_init_activity_acl[2-200] - IndexError: list ...
FAILED tests/test_views.py::test_init_activity_acl[3-200] - IndexError: list ...
FAILED tests/test_views.py::test_init_activity_acl[4-200] - IndexError: list ...
FAILED tests/test_views.py::test_init_activity_acl[5-200] - IndexError: list ...
FAILED tests/test_views.py::test_init_activity_acl[6-200] - IndexError: list ...
FAILED tests/test_views.py::test_init_activity_guest_users[0-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[1-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[2-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[3-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[4-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[5-200] - IndexErro...
FAILED tests/test_views.py::test_init_activity_guest_users[6-200] - IndexErro...
FAILED tests/test_views.py::test_previous_action_acl_nologin - AssertionError...
FAILED tests/test_views.py::test_previous_action[0-200] - sqlalchemy.orm.exc....
FAILED tests/test_views.py::test_previous_action[3-200] - sqlalchemy.orm.exc....
FAILED tests/test_views.py::test_previous_action[4-200] - sqlalchemy.orm.exc....
FAILED tests/test_views.py::test_previous_action[5-200] - sqlalchemy.orm.exc....
FAILED tests/test_views.py::test_next_action[1-200] - assert 200 == 500
FAILED tests/test_views.py::test_next_action[2-200] - assert 200 == 500
FAILED tests/test_views.py::test_next_action[6-200] - assert 200 == 500
FAILED tests/test_views.py::test_cancel_action_acl_nologin - AssertionError: ...
FAILED tests/test_views.py::test_cancel_action2[0-200] - sqlalchemy.orm.exc.U...
FAILED tests/test_views.py::test_cancel_action2[1-200] - sqlalchemy.orm.exc.U...
FAILED tests/test_views.py::test_cancel_action2[2-200] - sqlalchemy.orm.exc.U...
FAILED tests/test_views.py::test_cancel_action2[3-200] - sqlalchemy.orm.exc.U...
FAILED tests/test_views.py::test_cancel_action2[4-200] - sqlalchemy.orm.exc.U...
FAILED tests/test_views.py::test_cancel_action2[5-200] - sqlalchemy.orm.exc.U...
FAILED tests/test_views.py::test_cancel_action2[6-200] - sqlalchemy.orm.exc.U...
FAILED tests/test_views.py::test_is_user_locked_nologin - assert 405 == 302
FAILED tests/test_views.py::test_is_user_locked - AttributeError: 'NoneType' ...
FAILED tests/test_views.py::test_user_unlock_activity_acl[0] - json.decoder.J...
FAILED tests/test_views.py::test_user_unlock_activity_acl[1] - json.decoder.J...
FAILED tests/test_views.py::test_user_unlock_activity_acl[2] - json.decoder.J...
FAILED tests/test_views.py::test_user_unlock_activity_acl[3] - json.decoder.J...
FAILED tests/test_views.py::test_user_unlock_activity_acl[4] - json.decoder.J...
FAILED tests/test_views.py::test_user_unlock_activity_acl[5] - json.decoder.J...
FAILED tests/test_views.py::test_user_unlock_activity_acl[6] - json.decoder.J...
FAILED tests/test_views.py::test_user_unlock_activity - AssertionError: asser...
FAILED tests/test_views.py::test_unlock_activity_acl_nologin - AssertionError...
FAILED tests/test_views.py::test_check_approval_acl_nologin - AssertionError:...
FAILED tests/test_views.py::test_get_feedback_maillist_acl_nologin - Assertio...
FAILED tests/test_views.py::test_get_feedback_maillist[0-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[1-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[2-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[3-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[4-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[5-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[6-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_save_activity_acl_nologin - AssertionError: ...
FAILED tests/test_views.py::test_withdraw_confirm_nologin - AssertionError: a...
FAILED tests/test_views.py::test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_download_activitylog_1[1-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_1[2-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_1[6-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_2[1-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_2[2-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_2[6-200] - AttributeErr...
FAILED tests/test_views.py::test_ActivityActionResource_post - assert 400 == 302
ERROR tests/test_views.py::test_next_action_usage_application[0-200] - sqlalc...
==== 101 failed, 358 passed, 12460 warnings, 1 error in 8577.62s (2:22:57) =====
ERROR: InvocationError for command /code/modules/weko-workflow/.tox/c1/bin/pytest --cov=weko_workflow tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-report=html --cov-config=tox.ini --basetemp=/code/modules/weko-workflow/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
