GLOB sdist-make: /code/modules/invenio-records-rest/setup.py
c1 create: /code/modules/invenio-records-rest/.tox/c1
c1 installdeps: pytest>=3, pytest-cov, -rrequirements2.txt
c1 inst: /code/modules/invenio-records-rest/.tox/.tmp/package/1/invenio-records-rest-1.4.2.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,dcxml==0.1.0,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@98eb36e1dfc66256fa7ea62237e9879acb906e9d#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,invenio-records-rest @ file:///code/modules/invenio-records-rest/.tox/.tmp/package/1/invenio-records-rest-1.4.2.zip,invenio-records-ui==1.0.0,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,pytest-flask==0.15.1,pytest-invenio==1.2.1,pytest-mock==3.2.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,tika==2.6.0,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_records&subdirectory=modules/weko-records,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://github.com/RCOSDP/weko.git@9e2ff42cef3fe897016441f305f67d5a18580e9c#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='3410809379'
c1 run-test: commands[0] | pytest --cov=invenio_records_rest tests -v --cov-branch --cov-report=term --cov-report=xml --cov-report=html --cov-config=tox.ini --basetemp=/code/modules/invenio-records-rest/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/invenio-records-rest/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/invenio-records-rest, inifile:
plugins: celery-4.4.4, flask-0.15.1, cov-2.9.0, mock-3.2.0, invenio-1.2.1
collecting ... collected 114 items

tests/test_custom_endpoints.py::test_get_record[app0] ERROR              [  0%]
tests/test_custom_endpoints.py::test_get_records_list[test_custom_endpoints_app0] ERROR [  1%]
tests/test_custom_fields.py::test_load_custom_fields ERROR               [  2%]
tests/test_custom_fields.py::test_custom_generated_fields PASSED         [  3%]
tests/test_error_handlers.py::test_custom_error_handlers[app0] ERROR     [  4%]
tests/test_examples_app.py::test_example_app ERROR                       [  5%]
tests/test_ext.py::test_version PASSED                                   [  6%]
tests/test_ext.py::test_init PASSED                                      [  7%]
tests/test_facets.py::test_terms_filter PASSED                           [  7%]
tests/test_facets.py::test_range_filter PASSED                           [  8%]
tests/test_facets.py::test_create_filter_dsl PASSED                      [  9%]
tests/test_facets.py::test_post_filter ERROR                             [ 10%]
tests/test_facets.py::test_query_filter ERROR                            [ 11%]
tests/test_facets.py::test_aggregations ERROR                            [ 12%]
tests/test_facets.py::test_default_facets_factory ERROR                  [ 13%]
tests/test_links.py::test_default_links_factory_with_additional ERROR    [ 14%]
tests/test_links.py::test_old_signature_backward_compatibility[app0] ERROR [ 14%]
tests/test_marshmallow_loader.py::test_marshmallow_load ERROR            [ 15%]
tests/test_marshmallow_loader.py::test_marshmallow_load_errors ERROR     [ 16%]
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors ERROR [ 17%]
tests/test_marshmallow_loader.py::test_marshmallow_errors PASSED         [ 18%]
tests/test_marshmallow_loader.py::test_json_pid_checker_loader ERROR     [ 19%]
tests/test_permissions.py::test_default_permissions ERROR                [ 20%]
tests/test_pid_resolver.py::test_record_resolution ERROR                 [ 21%]
tests/test_serializer_base.py::test_preprocessor_mixin_record ERROR      [ 21%]
tests/test_serializer_base.py::test_preprocessor_mixin_searchhit PASSED  [ 22%]
tests/test_serializer_citeproc.py::test_serialize PASSED                 [ 23%]
tests/test_serializer_citeproc.py::test_serializer_args PASSED           [ 24%]
tests/test_serializer_citeproc.py::test_nonexistent_style PASSED         [ 25%]
tests/test_serializer_citeproc.py::test_serializer_in_request ERROR      [ 26%]
tests/test_serializer_datacite.py::test_serialize[DataCite31Serializer] FAILED [ 27%]
tests/test_serializer_datacite.py::test_serialize[DataCite40Serializer] FAILED [ 28%]
tests/test_serializer_datacite.py::test_serialize[DataCite41Serializer] FAILED [ 28%]
tests/test_serializer_datacite.py::test_serialize_search[DataCite31Serializer] PASSED [ 29%]
tests/test_serializer_datacite.py::test_serialize_search[DataCite40Serializer] PASSED [ 30%]
tests/test_serializer_datacite.py::test_serialize_search[DataCite41Serializer] PASSED [ 31%]
tests/test_serializer_dc.py::test_serialize FAILED                       [ 32%]
tests/test_serializer_dc.py::test_serialize_search PASSED                [ 33%]
tests/test_serializer_json.py::test_serialize ERROR                      [ 34%]
tests/test_serializer_json.py::test_serialize_search ERROR               [ 35%]
tests/test_serializer_json.py::test_serialize_pretty ERROR               [ 35%]
tests/test_serializer_jsonld.py::test_serialize ERROR                    [ 36%]
tests/test_serializer_jsonld.py::test_serialize_search FAILED            [ 37%]
tests/test_serializer_jsonld.py::test_transform_jsonld ERROR             [ 38%]
tests/test_serializer_marshmallow.py::test_transform_record FAILED       [ 39%]
tests/test_serializer_marshmallow.py::test_transform_search_hit FAILED   [ 40%]
tests/test_serializer_marshmallow.py::test_transform_record_default_schema FAILED [ 41%]
tests/test_serializer_response.py::test_record_responsify ERROR          [ 42%]
tests/test_serializer_response.py::test_search_responsify ERROR          [ 42%]
tests/test_sorter.py::test_parse_sort_field PASSED                       [ 43%]
tests/test_sorter.py::test_reverse_order PASSED                          [ 44%]
tests/test_sorter.py::test_eval_field_string ERROR                       [ 45%]
tests/test_sorter.py::test_eval_field_callable PASSED                    [ 46%]
tests/test_sorter.py::test_eval_field_dict PASSED                        [ 47%]
tests/test_sorter.py::test_geolocation_sort ERROR                        [ 48%]
tests/test_sorter.py::test_default_sorter_factory ERROR                  [ 49%]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0] ERROR [ 50%]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple_with_default[app0] ERROR [ 50%]
tests/test_utils.py::test_build_default_endpoint_prefixes_two_simple_endpoints[app0] ERROR [ 51%]
tests/test_utils.py::test_build_default_endpoint_prefixes_redundant_default[app0] ERROR [ 52%]
tests/test_utils.py::test_build_default_endpoint_prefixes_two_endpoints_with_default[app0] ERROR [ 53%]
tests/test_utils.py::test_get_default_endpoint_for_inconsistent ERROR    [ 54%]
tests/test_views_item_delete.py::test_valid_delete ERROR                 [ 55%]
tests/test_views_item_delete.py::test_delete_deleted ERROR               [ 56%]
tests/test_views_item_delete.py::test_delete_notfound ERROR              [ 57%]
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error ERROR [ 57%]
tests/test_views_item_get.py::test_item_get ERROR                        [ 58%]
tests/test_views_item_get.py::test_item_get_etag ERROR                   [ 59%]
tests/test_views_item_get.py::test_item_get_norecord ERROR               [ 60%]
tests/test_views_item_get.py::test_item_get_invalid_mimetype ERROR       [ 61%]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json] ERROR [ 62%]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8] ERROR [ 63%]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json] ERROR [ 64%]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8] ERROR [ 64%]
tests/test_views_item_patch.py::test_invalid_patch[] ERROR               [ 65%]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8] ERROR [ 66%]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json] ERROR [ 67%]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8] ERROR [ 68%]
tests/test_views_item_put.py::test_valid_put[application/json] ERROR     [ 69%]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8] ERROR [ 70%]
tests/test_views_item_put.py::test_valid_put_etag[application/json] ERROR [ 71%]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8] ERROR [ 71%]
tests/test_views_item_put.py::test_put_on_deleted[application/json] ERROR [ 72%]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8] ERROR [ 73%]
tests/test_views_item_put.py::test_invalid_put[] ERROR                   [ 74%]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8] ERROR     [ 75%]
tests/test_views_item_put.py::test_validation_error[application/json] ERROR [ 76%]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8] ERROR [ 77%]
tests/test_views_list_post.py::test_valid_create[application/json] ERROR [ 78%]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8] ERROR [ 78%]
tests/test_views_list_post.py::test_invalid_create[application/json] ERROR [ 79%]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8] ERROR [ 80%]
tests/test_views_list_post.py::test_validation_error[application/json] ERROR [ 81%]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8] ERROR [ 82%]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json] ERROR [ 83%]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8] ERROR [ 84%]
tests/test_views_options.py::test_options_view ERROR                     [ 85%]
tests/test_views_options.py::test_use_options[app0] ERROR                [ 85%]
tests/test_views_search.py::test_json_result_serializer ERROR            [ 86%]
tests/test_views_search.py::test_page_size ERROR                         [ 87%]
tests/test_views_search.py::test_page_size_without_size_in_request ERROR [ 88%]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0] ERROR [ 89%]
tests/test_views_search.py::test_es_query_syntax[app0] ERROR             [ 90%]
tests/test_views_search.py::test_elasticsearch_exception[app0] ERROR     [ 91%]
tests/test_views_search.py::test_pagination ERROR                        [ 92%]
tests/test_views_search.py::test_page_links ERROR                        [ 92%]
tests/test_views_search.py::test_query ERROR                             [ 93%]
tests/test_views_search.py::test_sort ERROR                              [ 94%]
tests/test_views_search.py::test_invalid_accept ERROR                    [ 95%]
tests/test_views_search.py::test_aggregations_info ERROR                 [ 96%]
tests/test_views_search.py::test_filters ERROR                           [ 97%]
tests/test_views_search.py::test_query_wrong ERROR                       [ 98%]
tests/test_views_serializers.py::test_default_serializer[app0] ERROR     [ 99%]
tests/test_views_suggesters.py::test_valid_suggest[app0] ERROR           [100%]

==================================== ERRORS ====================================
___________________ ERROR at setup of test_get_record[app0] ____________________

request = <SubRequest '_configure_application' for <Function test_get_record[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08cef7aeb8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
tests/conftest.py:281: in app
    InvenioAccounts(app)
../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ce857d30>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ce857d30> and <flask.blueprints.Blueprint object at 0x7f08cee6b208>. Both share the same name "security". Blueprints that are created on the fly need unique names.

.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____ ERROR at setup of test_get_records_list[test_custom_endpoints_app0] ______

request = <SubRequest '_configure_application' for <Function test_get_records_list[test_custom_endpoints_app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08ce80b908>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
.tox/c1/lib/python3.6/site-packages/six.py:718: in reraise
    raise value.with_traceback(tb)
tests/conftest.py:281: in app
    InvenioAccounts(app)
../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ce857d30>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ce857d30> and <flask.blueprints.Blueprint object at 0x7f08cee6b208>. Both share the same name "security". Blueprints that are created on the fly need unique names.

.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
__________________ ERROR at setup of test_load_custom_fields ___________________

request = <SubRequest '_configure_application' for <Function test_load_custom_fields>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08cea5a940>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
tests/conftest.py:281: in app
    InvenioAccounts(app)
../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ced795f8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ced795f8> and <flask.blueprints.Blueprint object at 0x7f08cecbf6a0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
______________ ERROR at setup of test_custom_error_handlers[app0] ______________

request = <SubRequest '_configure_application' for <Function test_custom_error_handlers[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08ce924780>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
tests/conftest.py:281: in app
    InvenioAccounts(app)
../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ceb1f550>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ceb1f550> and <flask.blueprints.Blueprint object at 0x7f08ce9e65f8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
______________________ ERROR at setup of test_example_app ______________________

    @pytest.yield_fixture
    def example_app():
        """Example app fixture."""
        current_dir = os.getcwd()
    
        # Go to example directory
        project_dir = dirname(dirname(abspath(__file__)))
        exampleapp_dir = join(project_dir, 'examples')
        os.chdir(exampleapp_dir)
    
        # Setup application
>       assert subprocess.call('./app-setup.sh', shell=True) == 0
E       assert 1 == 0
E         -1
E         +0

../tests/test_examples_app.py:32: AssertionError
---------------------------- Captured stderr setup -----------------------------
ERROR: ../invenio-db is not a valid editable requirement. It should either be a path to a local project or a VCS URL (beginning with bzr+http, bzr+https, bzr+ssh, bzr+sftp, bzr+ftp, bzr+lp, bzr+file, git+http, git+https, git+ssh, git+git, git+file, hg+file, hg+http, hg+https, hg+ssh, hg+static-http, svn+ssh, svn+http, svn+https, svn+svn, svn+file).
______________________ ERROR at setup of test_post_filter ______________________

request = <SubRequest '_configure_application' for <Function test_post_filter>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08ce6dbf98>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ce8582b0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ce8582b0> and <flask.blueprints.Blueprint object at 0x7f08ce6dbef0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____________________ ERROR at setup of test_query_filter ______________________

request = <SubRequest '_configure_application' for <Function test_query_filter>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08cebe5b70>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ce695b70>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ce695b70> and <flask.blueprints.Blueprint object at 0x7f08ce758208>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____________________ ERROR at setup of test_aggregations ______________________

request = <SubRequest '_configure_application' for <Function test_aggregations>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08ce69d320>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ce5d8eb8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ce5d8eb8> and <flask.blueprints.Blueprint object at 0x7f08ce5d5e48>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
________________ ERROR at setup of test_default_facets_factory _________________

request = <SubRequest '_configure_application' for <Function test_default_facets_factory>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08ce75ce80>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ce739240>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ce739240> and <flask.blueprints.Blueprint object at 0x7f08f6cf6eb8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_________ ERROR at setup of test_default_links_factory_with_additional _________

request = <SubRequest '_configure_application' for <Function test_default_links_factory_with_additional>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08ce7396d8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ce6235c0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ce6235c0> and <flask.blueprints.Blueprint object at 0x7f08ce606588>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
______ ERROR at setup of test_old_signature_backward_compatibility[app0] _______

request = <SubRequest '_configure_application' for <Function test_old_signature_backward_compatibility[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6bd78d0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6bfc940>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6bfc940> and <flask.blueprints.Blueprint object at 0x7f08ce623a90>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_marshmallow_load ____________________

request = <SubRequest '_configure_application' for <Function test_marshmallow_load>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6bad7f0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6bcccc0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6bcccc0> and <flask.blueprints.Blueprint object at 0x7f08f6bfcf98>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
________________ ERROR at setup of test_marshmallow_load_errors ________________

request = <SubRequest '_configure_application' for <Function test_marshmallow_load_errors>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6bca710>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ce5780b8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ce5780b8> and <flask.blueprints.Blueprint object at 0x7f08f6cd3630>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
____________ ERROR at setup of test_marshmallow_load_nested_errors _____________

request = <SubRequest '_configure_application' for <Function test_marshmallow_load_nested_errors>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08ce584860>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08ce54e438>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08ce54e438> and <flask.blueprints.Blueprint object at 0x7f08f6aa8940>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
________________ ERROR at setup of test_json_pid_checker_loader ________________

request = <SubRequest '_configure_application' for <Function test_json_pid_checker_loader>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6c2c7f0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6b64ba8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6b64ba8> and <flask.blueprints.Blueprint object at 0x7f08ce56e940>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
__________________ ERROR at setup of test_default_permissions __________________

request = <SubRequest '_configure_application' for <Function test_default_permissions>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6c485c0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6c4dc88>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6c4dc88> and <flask.blueprints.Blueprint object at 0x7f08f6b64048>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_record_resolution ___________________

request = <SubRequest '_configure_application' for <Function test_record_resolution>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6c88470>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6aa3048>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6aa3048> and <flask.blueprints.Blueprint object at 0x7f08f6c524a8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______________ ERROR at setup of test_preprocessor_mixin_record _______________

request = <SubRequest '_configure_application' for <Function test_preprocessor_mixin_record>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6aab860>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6a723c8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6a723c8> and <flask.blueprints.Blueprint object at 0x7f08f6a8a780>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_________________ ERROR at setup of test_serializer_in_request _________________

request = <SubRequest '_configure_application' for <Function test_serializer_in_request>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6a14ba8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6cc37b8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6cc37b8> and <flask.blueprints.Blueprint object at 0x7f08f6a3bfd0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______________________ ERROR at setup of test_serialize _______________________

request = <SubRequest '_configure_application' for <Function test_serialize>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f66a2eb8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6730940>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6730940> and <flask.blueprints.Blueprint object at 0x7f08f69d05f8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_serialize_search ____________________

request = <SubRequest '_configure_application' for <Function test_serialize_search>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6823400>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f684fc88>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f684fc88> and <flask.blueprints.Blueprint object at 0x7f08f6851400>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_serialize_pretty ____________________

request = <SubRequest '_configure_application' for <Function test_serialize_pretty>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f67abda0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6772cc0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6772cc0> and <flask.blueprints.Blueprint object at 0x7f08f682a6a0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______________________ ERROR at setup of test_serialize _______________________

request = <SubRequest '_configure_application' for <Function test_serialize>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6700b70>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f670d8d0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f670d8d0> and <flask.blueprints.Blueprint object at 0x7f08f68bf0f0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_transform_jsonld ____________________

request = <SubRequest '_configure_application' for <Function test_transform_jsonld>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f66e1978>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6718c18>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6718c18> and <flask.blueprints.Blueprint object at 0x7f08f69f82b0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_record_responsify ___________________

request = <SubRequest '_configure_application' for <Function test_record_responsify>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f689aa90>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f645eac8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f645eac8> and <flask.blueprints.Blueprint object at 0x7f08f691a5c0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_search_responsify ___________________

request = <SubRequest '_configure_application' for <Function test_search_responsify>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f63f4160>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6375898>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6375898> and <flask.blueprints.Blueprint object at 0x7f08f6673a58>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_eval_field_string ___________________

request = <SubRequest '_configure_application' for <Function test_eval_field_string>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6540cc0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f63b1cc0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f63b1cc0> and <flask.blueprints.Blueprint object at 0x7f08f65ad978>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_geolocation_sort ____________________

request = <SubRequest '_configure_application' for <Function test_geolocation_sort>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6474390>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f68cc240>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f68cc240> and <flask.blueprints.Blueprint object at 0x7f08f68aec88>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
________________ ERROR at setup of test_default_sorter_factory _________________

request = <SubRequest '_configure_application' for <Function test_default_sorter_factory>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f66c2320>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f659c0b8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f659c0b8> and <flask.blueprints.Blueprint object at 0x7f08f66b99b0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____ ERROR at setup of test_build_default_endpoint_prefixes_simple[app0] ______

request = <SubRequest '_configure_application' for <Function test_build_default_endpoint_prefixes_simple[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f659eb70>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f65ebfd0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f65ebfd0> and <flask.blueprints.Blueprint object at 0x7f08f63ef240>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_ ERROR at setup of test_build_default_endpoint_prefixes_simple_with_default[app0] _

request = <SubRequest '_configure_application' for <Function test_build_default_endpoint_prefixes_simple_with_default[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f65d38d0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../.tox/c1/lib/python3.6/site-packages/six.py:718: in reraise
    raise value.with_traceback(tb)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f65ebfd0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f65ebfd0> and <flask.blueprints.Blueprint object at 0x7f08f63ef240>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_ ERROR at setup of test_build_default_endpoint_prefixes_two_simple_endpoints[app0] _

request = <SubRequest '_configure_application' for <Function test_build_default_endpoint_prefixes_two_simple_endpoints[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f63f8668>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../.tox/c1/lib/python3.6/site-packages/six.py:718: in reraise
    raise value.with_traceback(tb)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f65ebfd0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f65ebfd0> and <flask.blueprints.Blueprint object at 0x7f08f63ef240>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_ ERROR at setup of test_build_default_endpoint_prefixes_redundant_default[app0] _

request = <SubRequest '_configure_application' for <Function test_build_default_endpoint_prefixes_redundant_default[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f65eb470>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../.tox/c1/lib/python3.6/site-packages/six.py:718: in reraise
    raise value.with_traceback(tb)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f65ebfd0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f65ebfd0> and <flask.blueprints.Blueprint object at 0x7f08f63ef240>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_ ERROR at setup of test_build_default_endpoint_prefixes_two_endpoints_with_default[app0] _

request = <SubRequest '_configure_application' for <Function test_build_default_endpoint_prefixes_two_endpoints_with_default[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f636fcf8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../.tox/c1/lib/python3.6/site-packages/six.py:718: in reraise
    raise value.with_traceback(tb)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f65ebfd0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f65ebfd0> and <flask.blueprints.Blueprint object at 0x7f08f63ef240>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_________ ERROR at setup of test_get_default_endpoint_for_inconsistent _________

request = <SubRequest '_configure_application' for <Function test_get_default_endpoint_for_inconsistent>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f643bda0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../.tox/c1/lib/python3.6/site-packages/six.py:718: in reraise
    raise value.with_traceback(tb)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f65ebfd0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f65ebfd0> and <flask.blueprints.Blueprint object at 0x7f08f63ef240>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____________________ ERROR at setup of test_valid_delete ______________________

request = <SubRequest '_configure_application' for <Function test_valid_delete>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f63e8898>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f63f8c50>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f63f8c50> and <flask.blueprints.Blueprint object at 0x7f08f65689e8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
____________________ ERROR at setup of test_delete_deleted _____________________

request = <SubRequest '_configure_application' for <Function test_delete_deleted>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6354d68>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f64afa58>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f64afa58> and <flask.blueprints.Blueprint object at 0x7f08f63e3a20>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
____________________ ERROR at setup of test_delete_notfound ____________________

request = <SubRequest '_configure_application' for <Function test_delete_notfound>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f64a4630>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f64af898>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f64af898> and <flask.blueprints.Blueprint object at 0x7f08f6570198>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____________ ERROR at setup of test_delete_with_sqldatabase_error _____________

request = <SubRequest '_configure_application' for <Function test_delete_with_sqldatabase_error>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f656b978>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f63bf668>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f63bf668> and <flask.blueprints.Blueprint object at 0x7f08f6562908>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______________________ ERROR at setup of test_item_get ________________________

request = <SubRequest '_configure_application' for <Function test_item_get>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f66547b8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f66c3358>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f66c3358> and <flask.blueprints.Blueprint object at 0x7f08f63e6898>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____________________ ERROR at setup of test_item_get_etag _____________________

request = <SubRequest '_configure_application' for <Function test_item_get_etag>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f640a0f0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6653390>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6653390> and <flask.blueprints.Blueprint object at 0x7f08f62876a0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_item_get_norecord ___________________

request = <SubRequest '_configure_application' for <Function test_item_get_norecord>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f639e4e0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f63a1710>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f63a1710> and <flask.blueprints.Blueprint object at 0x7f08f6653da0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______________ ERROR at setup of test_item_get_invalid_mimetype _______________

request = <SubRequest '_configure_application' for <Function test_item_get_invalid_mimetype>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f63a6128>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6298a90>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6298a90> and <flask.blueprints.Blueprint object at 0x7f08f63a1b00>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______ ERROR at setup of test_valid_patch[application/json-patch+json] ________

request = <SubRequest '_configure_application' for <Function test_valid_patch[application/json-patch+json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f64dfa20>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f6264e80>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f6264e80> and <flask.blueprints.Blueprint object at 0x7f08f612d6a0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_ ERROR at setup of test_valid_patch[application/json-patch+json;charset=utf-8] _

request = <SubRequest '_configure_application' for <Function test_valid_patch[application/json-patch+json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6289668>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f662d2e8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f662d2e8> and <flask.blueprints.Blueprint object at 0x7f08f6269f60>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
______ ERROR at setup of test_patch_deleted[application/json-patch+json] _______

request = <SubRequest '_configure_application' for <Function test_patch_deleted[application/json-patch+json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6623550>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f614a6a0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f614a6a0> and <flask.blueprints.Blueprint object at 0x7f08f662db00>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_ ERROR at setup of test_patch_deleted[application/json-patch+json;charset=utf-8] _

request = <SubRequest '_configure_application' for <Function test_patch_deleted[application/json-patch+json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f614a898>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f634aac8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f634aac8> and <flask.blueprints.Blueprint object at 0x7f08f60db828>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
____________________ ERROR at setup of test_invalid_patch[] ____________________

request = <SubRequest '_configure_application' for <Function test_invalid_patch[]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f632aa58>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f60ebeb8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f60ebeb8> and <flask.blueprints.Blueprint object at 0x7f08f607c6d8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____________ ERROR at setup of test_invalid_patch[;charset=utf-8] _____________

request = <SubRequest '_configure_application' for <Function test_invalid_patch[;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6103fd0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f62de2e8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f62de2e8> and <flask.blueprints.Blueprint object at 0x7f08f6066f60>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____ ERROR at setup of test_validation_error[application/json-patch+json] _____

request = <SubRequest '_configure_application' for <Function test_validation_error[application/json-patch+json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f615a4e0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5f51550>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5f51550> and <flask.blueprints.Blueprint object at 0x7f08f62de4e0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_ ERROR at setup of test_validation_error[application/json-patch+json;charset=utf-8] _

request = <SubRequest '_configure_application' for <Function test_validation_error[application/json-patch+json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f61861d0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f60afa58>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f60afa58> and <flask.blueprints.Blueprint object at 0x7f08f5f51a58>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
______________ ERROR at setup of test_valid_put[application/json] ______________

request = <SubRequest '_configure_application' for <Function test_valid_put[application/json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f60cb748>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f605ae48>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f605ae48> and <flask.blueprints.Blueprint object at 0x7f08f61f9ef0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______ ERROR at setup of test_valid_put[application/json;charset=utf-8] _______

request = <SubRequest '_configure_application' for <Function test_valid_put[application/json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6054fd0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5faf240>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5faf240> and <flask.blueprints.Blueprint object at 0x7f08f5f49e48>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________ ERROR at setup of test_valid_put_etag[application/json] ____________

request = <SubRequest '_configure_application' for <Function test_valid_put_etag[application/json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5faf7b8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5f7a5c0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5f7a5c0> and <flask.blueprints.Blueprint object at 0x7f08f5f98400>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
____ ERROR at setup of test_valid_put_etag[application/json;charset=utf-8] _____

request = <SubRequest '_configure_application' for <Function test_valid_put_etag[application/json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5f7abe0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5f339b0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5f339b0> and <flask.blueprints.Blueprint object at 0x7f08f6213908>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________ ERROR at setup of test_put_on_deleted[application/json] ____________

request = <SubRequest '_configure_application' for <Function test_put_on_deleted[application/json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5f3a048>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f61ced68>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f61ced68> and <flask.blueprints.Blueprint object at 0x7f08f5f339e8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
____ ERROR at setup of test_put_on_deleted[application/json;charset=utf-8] _____

request = <SubRequest '_configure_application' for <Function test_put_on_deleted[application/json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f61ce208>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5ee00f0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5ee00f0> and <flask.blueprints.Blueprint object at 0x7f08f6231c88>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____________________ ERROR at setup of test_invalid_put[] _____________________

request = <SubRequest '_configure_application' for <Function test_invalid_put[]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f61a69e8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f61944e0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f61944e0> and <flask.blueprints.Blueprint object at 0x7f08f5e4db00>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
______________ ERROR at setup of test_invalid_put[;charset=utf-8] ______________

request = <SubRequest '_configure_application' for <Function test_invalid_put[;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5e2c630>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5e0f860>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5e0f860> and <flask.blueprints.Blueprint object at 0x7f08f6194f60>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
__________ ERROR at setup of test_validation_error[application/json] ___________

request = <SubRequest '_configure_application' for <Function test_validation_error[application/json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5e1b080>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f622dba8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f622dba8> and <flask.blueprints.Blueprint object at 0x7f08f5e0fda0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___ ERROR at setup of test_validation_error[application/json;charset=utf-8] ____

request = <SubRequest '_configure_application' for <Function test_validation_error[application/json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5e73c18>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5e02f60>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5e02f60> and <flask.blueprints.Blueprint object at 0x7f08f622d0f0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
____________ ERROR at setup of test_valid_create[application/json] _____________

request = <SubRequest '_configure_application' for <Function test_valid_create[application/json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5dd8be0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5de9390>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5de9390> and <flask.blueprints.Blueprint object at 0x7f08f60295c0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____ ERROR at setup of test_valid_create[application/json;charset=utf-8] ______

request = <SubRequest '_configure_application' for <Function test_valid_create[application/json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f6030550>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5e9b710>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5e9b710> and <flask.blueprints.Blueprint object at 0x7f08f5de9cf8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________ ERROR at setup of test_invalid_create[application/json] ____________

request = <SubRequest '_configure_application' for <Function test_invalid_create[application/json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f601d128>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5eb8a90>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5eb8a90> and <flask.blueprints.Blueprint object at 0x7f08f5e9bb00>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
____ ERROR at setup of test_invalid_create[application/json;charset=utf-8] _____

request = <SubRequest '_configure_application' for <Function test_invalid_create[application/json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5ca59e8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5c94e48>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5c94e48> and <flask.blueprints.Blueprint object at 0x7f08f5c7c6a0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
__________ ERROR at setup of test_validation_error[application/json] ___________

request = <SubRequest '_configure_application' for <Function test_validation_error[application/json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5c46f60>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5d0e1d0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5d0e1d0> and <flask.blueprints.Blueprint object at 0x7f08f5fe4dd8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___ ERROR at setup of test_validation_error[application/json;charset=utf-8] ____

request = <SubRequest '_configure_application' for <Function test_validation_error[application/json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5d0d0f0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5db5550>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5db5550> and <flask.blueprints.Blueprint object at 0x7f08f5c50dd8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____ ERROR at setup of test_jsonschema_validation_error[application/json] _____

request = <SubRequest '_configure_application' for <Function test_jsonschema_validation_error[application/json]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5aea390>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5fd68d0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5fd68d0> and <flask.blueprints.Blueprint object at 0x7f08f5dbf940>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_ ERROR at setup of test_jsonschema_validation_error[application/json;charset=utf-8] _

request = <SubRequest '_configure_application' for <Function test_jsonschema_validation_error[application/json;charset=utf-8]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f60043c8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5fe9c18>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5fe9c18> and <flask.blueprints.Blueprint object at 0x7f08f5ff9240>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____________________ ERROR at setup of test_options_view ______________________

request = <SubRequest '_configure_application' for <Function test_options_view>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5b12be0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5ac6fd0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5ac6fd0> and <flask.blueprints.Blueprint object at 0x7f08f5a94278>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_use_options[app0] ___________________

request = <SubRequest '_configure_application' for <Function test_use_options[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5aaa8d0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5c66358>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5c66358> and <flask.blueprints.Blueprint object at 0x7f08f5a1d668>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
________________ ERROR at setup of test_json_result_serializer _________________

request = <SubRequest '_configure_application' for <Function test_json_result_serializer>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5c62668>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5afd6a0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5afd6a0> and <flask.blueprints.Blueprint object at 0x7f08f5c665f8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______________________ ERROR at setup of test_page_size _______________________

request = <SubRequest '_configure_application' for <Function test_page_size>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5a1ae10>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5a159b0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5a159b0> and <flask.blueprints.Blueprint object at 0x7f08f5afda20>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________ ERROR at setup of test_page_size_without_size_in_request ___________

request = <SubRequest '_configure_application' for <Function test_page_size_without_size_in_request>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5a32748>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5a57d68>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5a57d68> and <flask.blueprints.Blueprint object at 0x7f08f5ceaf28>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______ ERROR at setup of test_page_size_exceed_max_result_window[app0] ________

request = <SubRequest '_configure_application' for <Function test_page_size_exceed_max_result_window[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5a7de48>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5bda0f0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5bda0f0> and <flask.blueprints.Blueprint object at 0x7f08f5b724e0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_________________ ERROR at setup of test_es_query_syntax[app0] _________________

request = <SubRequest '_configure_application' for <Function test_es_query_syntax[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5bee898>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../.tox/c1/lib/python3.6/site-packages/six.py:718: in reraise
    raise value.with_traceback(tb)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5bda0f0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5bda0f0> and <flask.blueprints.Blueprint object at 0x7f08f5b724e0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_____________ ERROR at setup of test_elasticsearch_exception[app0] _____________

request = <SubRequest '_configure_application' for <Function test_elasticsearch_exception[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5ba28d0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../.tox/c1/lib/python3.6/site-packages/six.py:718: in reraise
    raise value.with_traceback(tb)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5bda0f0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5bda0f0> and <flask.blueprints.Blueprint object at 0x7f08f5b724e0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
______________________ ERROR at setup of test_pagination _______________________

request = <SubRequest '_configure_application' for <Function test_pagination>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f59634e0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../.tox/c1/lib/python3.6/site-packages/six.py:718: in reraise
    raise value.with_traceback(tb)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5bda0f0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5bda0f0> and <flask.blueprints.Blueprint object at 0x7f08f5b724e0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
______________________ ERROR at setup of test_page_links _______________________

request = <SubRequest '_configure_application' for <Function test_page_links>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5ccdc18>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f58662b0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f58662b0> and <flask.blueprints.Blueprint object at 0x7f08f5ba2908>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_________________________ ERROR at setup of test_query _________________________

request = <SubRequest '_configure_application' for <Function test_query>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5bccf28>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5b61908>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5b61908> and <flask.blueprints.Blueprint object at 0x7f08f59f2e48>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_________________________ ERROR at setup of test_sort __________________________

request = <SubRequest '_configure_application' for <Function test_sort>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5c0cfd0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5cfeac8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5cfeac8> and <flask.blueprints.Blueprint object at 0x7f08f598a668>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
____________________ ERROR at setup of test_invalid_accept _____________________

request = <SubRequest '_configure_application' for <Function test_invalid_accept>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5963ef0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5cf7cc0>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5cf7cc0> and <flask.blueprints.Blueprint object at 0x7f08f5cfe1d0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
___________________ ERROR at setup of test_aggregations_info ___________________

request = <SubRequest '_configure_application' for <Function test_aggregations_info>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5cec4e0>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f5d84048>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f5d84048> and <flask.blueprints.Blueprint object at 0x7f08f5d62d30>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
________________________ ERROR at setup of test_filters ________________________

request = <SubRequest '_configure_application' for <Function test_filters>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f5bca470>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f59bb3c8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f59bb3c8> and <flask.blueprints.Blueprint object at 0x7f08f57977b8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
______________________ ERROR at setup of test_query_wrong ______________________

request = <SubRequest '_configure_application' for <Function test_query_wrong>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f59c7518>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f58d06d8>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f58d06d8> and <flask.blueprints.Blueprint object at 0x7f08f59bbda0>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
_______________ ERROR at setup of test_default_serializer[app0] ________________

request = <SubRequest '_configure_application' for <Function test_default_serializer[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f58cd128>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f587da90>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f587da90> and <flask.blueprints.Blueprint object at 0x7f08f58d0ac8>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
__________________ ERROR at setup of test_valid_suggest[app0] __________________

request = <SubRequest '_configure_application' for <Function test_valid_suggest[app0]>>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f08f58579e8>

    @pytest.fixture(autouse=True)
    def _configure_application(request, monkeypatch):
        """Use `pytest.mark.options` decorator to pass options to your application
        factory::
    
            @pytest.mark.options(debug=False)
            def test_something(app):
                assert not app.debug, 'the application works not in debug mode!'
    
        """
        if 'app' not in request.fixturenames:
            return
    
>       app = getfixturevalue(request, 'app')

../.tox/c1/lib/python3.6/site-packages/pytest_flask/plugin.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.tox/c1/lib/python3.6/site-packages/pytest_flask/pytest_compat.py:3: in getfixturevalue
    return request.getfixturevalue(value)
../tests/conftest.py:281: in app
    InvenioAccounts(app)
../../invenio-accounts/invenio_accounts/ext.py:70: in __init__
    self.init_app(app, sessionstore=sessionstore)
../../invenio-accounts/invenio_accounts/ext.py:177: in init_app
    register_blueprint=register_blueprint)
../.tox/c1/lib/python3.6/site-packages/flask_security/core.py:507: in init_app
    app.register_blueprint(create_blueprint(state, __name__))
../.tox/c1/lib/python3.6/site-packages/flask/app.py:98: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Flask 'testapp'>
blueprint = <flask.blueprints.Blueprint object at 0x7f08f57b6e80>, options = {}
first_registration = False

    @setupmethod
    def register_blueprint(self, blueprint, **options):
        """Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.
    
        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.
    
        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.
    
        .. versionadded:: 0.7
        """
        first_registration = False
    
        if blueprint.name in self.blueprints:
            assert self.blueprints[blueprint.name] is blueprint, (
                "A name collision occurred between blueprints %r and %r. Both"
                ' share the same name "%s". Blueprints that are created on the'
                " fly need unique names."
>               % (blueprint, self.blueprints[blueprint.name], blueprint.name)
            )
E           AssertionError: A name collision occurred between blueprints <flask.blueprints.Blueprint object at 0x7f08f57b6e80> and <flask.blueprints.Blueprint object at 0x7f08f5694710>. Both share the same name "security". Blueprints that are created on the fly need unique names.

../.tox/c1/lib/python3.6/site-packages/flask/app.py:1160: AssertionError
=================================== FAILURES ===================================
_____________________ test_serialize[DataCite31Serializer] _____________________

self = <sqlalchemy.util._collections.ScopedRegistry object at 0x7f08fb8b1fd0>

    def __call__(self):
        key = self.scopefunc()
        try:
>           return self.registry[key]
E           KeyError: 139676669859648

../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1005: KeyError

During handling of the above exception, another exception occurred:

serializer = <class 'invenio_records_rest.serializers.datacite.DataCite31Serializer'>

    @pytest.mark.parametrize('serializer', [DataCite31Serializer,
                                            DataCite40Serializer,
                                            DataCite41Serializer])
    def test_serialize(serializer):
        pid = PersistentIdentifier(pid_type='recid', pid_value='2')
        record = Record({'doi': '10.1234/foo'})
        s = serializer(SimpleSchema)
>       data = s.serialize(pid, record)

../tests/test_serializer_datacite.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../invenio_records_rest/serializers/datacite.py:42: in serialize
    self.transform_record(pid, record, links_factory))
../invenio_records_rest/serializers/marshmallow.py:35: in transform_record
    links_factory=links_factory, **kwargs), context)
../invenio_records_rest/serializers/base.py:234: in preprocess_record
    mapping_key_lang = get_mapping(metadata.get('item_type_id'))
../invenio_records_rest/serializers/base.py:167: in get_mapping
    item_type = ItemTypes.get_by_id(item_type_id)
../../weko-records/weko_records/api.py:642: in get_by_id
    with db.session.no_autoflush:
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:176: in get
    return getattr(self.registry(), name)
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1007: in __call__
    return self.registry.setdefault(key, self.createfunc())
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:3181: in __call__
    return self.class_(**local_kw)
../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:141: in __init__
    self.app = app = db.get_app()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SQLAlchemy engine=None>, reference_app = None

    def get_app(self, reference_app=None):
        """Helper method that implements the logic to look up an
        application."""
    
        if reference_app is not None:
            return reference_app
    
        if current_app:
            return current_app._get_current_object()
    
        if self.app is not None:
            return self.app
    
        raise RuntimeError(
>           'No application found. Either work inside a view function or push'
            ' an application context. See'
            ' http://flask-sqlalchemy.pocoo.org/contexts/.'
        )
E       RuntimeError: No application found. Either work inside a view function or push an application context. See http://flask-sqlalchemy.pocoo.org/contexts/.

../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:912: RuntimeError
_____________________ test_serialize[DataCite40Serializer] _____________________

self = <sqlalchemy.util._collections.ScopedRegistry object at 0x7f08fb8b1fd0>

    def __call__(self):
        key = self.scopefunc()
        try:
>           return self.registry[key]
E           KeyError: 139676669859648

../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1005: KeyError

During handling of the above exception, another exception occurred:

serializer = <class 'invenio_records_rest.serializers.datacite.DataCite40Serializer'>

    @pytest.mark.parametrize('serializer', [DataCite31Serializer,
                                            DataCite40Serializer,
                                            DataCite41Serializer])
    def test_serialize(serializer):
        pid = PersistentIdentifier(pid_type='recid', pid_value='2')
        record = Record({'doi': '10.1234/foo'})
        s = serializer(SimpleSchema)
>       data = s.serialize(pid, record)

../tests/test_serializer_datacite.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../invenio_records_rest/serializers/datacite.py:42: in serialize
    self.transform_record(pid, record, links_factory))
../invenio_records_rest/serializers/marshmallow.py:35: in transform_record
    links_factory=links_factory, **kwargs), context)
../invenio_records_rest/serializers/base.py:234: in preprocess_record
    mapping_key_lang = get_mapping(metadata.get('item_type_id'))
../invenio_records_rest/serializers/base.py:167: in get_mapping
    item_type = ItemTypes.get_by_id(item_type_id)
../../weko-records/weko_records/api.py:642: in get_by_id
    with db.session.no_autoflush:
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:176: in get
    return getattr(self.registry(), name)
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1007: in __call__
    return self.registry.setdefault(key, self.createfunc())
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:3181: in __call__
    return self.class_(**local_kw)
../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:141: in __init__
    self.app = app = db.get_app()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SQLAlchemy engine=None>, reference_app = None

    def get_app(self, reference_app=None):
        """Helper method that implements the logic to look up an
        application."""
    
        if reference_app is not None:
            return reference_app
    
        if current_app:
            return current_app._get_current_object()
    
        if self.app is not None:
            return self.app
    
        raise RuntimeError(
>           'No application found. Either work inside a view function or push'
            ' an application context. See'
            ' http://flask-sqlalchemy.pocoo.org/contexts/.'
        )
E       RuntimeError: No application found. Either work inside a view function or push an application context. See http://flask-sqlalchemy.pocoo.org/contexts/.

../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:912: RuntimeError
_____________________ test_serialize[DataCite41Serializer] _____________________

self = <sqlalchemy.util._collections.ScopedRegistry object at 0x7f08fb8b1fd0>

    def __call__(self):
        key = self.scopefunc()
        try:
>           return self.registry[key]
E           KeyError: 139676669859648

../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1005: KeyError

During handling of the above exception, another exception occurred:

serializer = <class 'invenio_records_rest.serializers.datacite.DataCite41Serializer'>

    @pytest.mark.parametrize('serializer', [DataCite31Serializer,
                                            DataCite40Serializer,
                                            DataCite41Serializer])
    def test_serialize(serializer):
        pid = PersistentIdentifier(pid_type='recid', pid_value='2')
        record = Record({'doi': '10.1234/foo'})
        s = serializer(SimpleSchema)
>       data = s.serialize(pid, record)

../tests/test_serializer_datacite.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../invenio_records_rest/serializers/datacite.py:42: in serialize
    self.transform_record(pid, record, links_factory))
../invenio_records_rest/serializers/marshmallow.py:35: in transform_record
    links_factory=links_factory, **kwargs), context)
../invenio_records_rest/serializers/base.py:234: in preprocess_record
    mapping_key_lang = get_mapping(metadata.get('item_type_id'))
../invenio_records_rest/serializers/base.py:167: in get_mapping
    item_type = ItemTypes.get_by_id(item_type_id)
../../weko-records/weko_records/api.py:642: in get_by_id
    with db.session.no_autoflush:
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:176: in get
    return getattr(self.registry(), name)
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1007: in __call__
    return self.registry.setdefault(key, self.createfunc())
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:3181: in __call__
    return self.class_(**local_kw)
../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:141: in __init__
    self.app = app = db.get_app()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SQLAlchemy engine=None>, reference_app = None

    def get_app(self, reference_app=None):
        """Helper method that implements the logic to look up an
        application."""
    
        if reference_app is not None:
            return reference_app
    
        if current_app:
            return current_app._get_current_object()
    
        if self.app is not None:
            return self.app
    
        raise RuntimeError(
>           'No application found. Either work inside a view function or push'
            ' an application context. See'
            ' http://flask-sqlalchemy.pocoo.org/contexts/.'
        )
E       RuntimeError: No application found. Either work inside a view function or push an application context. See http://flask-sqlalchemy.pocoo.org/contexts/.

../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:912: RuntimeError
________________________________ test_serialize ________________________________

self = <sqlalchemy.util._collections.ScopedRegistry object at 0x7f08fb8b1fd0>

    def __call__(self):
        key = self.scopefunc()
        try:
>           return self.registry[key]
E           KeyError: 139676669859648

../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1005: KeyError

During handling of the above exception, another exception occurred:

    def test_serialize():
        """Test JSON serialize."""
        pid = PersistentIdentifier(pid_type='recid', pid_value='2')
        record = Record({'titles': ['DC test']})
>       data = DublinCoreSerializer(SimpleSchema).serialize(pid, record)

../tests/test_serializer_dc.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../invenio_records_rest/serializers/dc.py:36: in serialize
    self.transform_record(pid, record, links_factory))
../invenio_records_rest/serializers/marshmallow.py:35: in transform_record
    links_factory=links_factory, **kwargs), context)
../invenio_records_rest/serializers/base.py:234: in preprocess_record
    mapping_key_lang = get_mapping(metadata.get('item_type_id'))
../invenio_records_rest/serializers/base.py:167: in get_mapping
    item_type = ItemTypes.get_by_id(item_type_id)
../../weko-records/weko_records/api.py:642: in get_by_id
    with db.session.no_autoflush:
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:176: in get
    return getattr(self.registry(), name)
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1007: in __call__
    return self.registry.setdefault(key, self.createfunc())
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:3181: in __call__
    return self.class_(**local_kw)
../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:141: in __init__
    self.app = app = db.get_app()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SQLAlchemy engine=None>, reference_app = None

    def get_app(self, reference_app=None):
        """Helper method that implements the logic to look up an
        application."""
    
        if reference_app is not None:
            return reference_app
    
        if current_app:
            return current_app._get_current_object()
    
        if self.app is not None:
            return self.app
    
        raise RuntimeError(
>           'No application found. Either work inside a view function or push'
            ' an application context. See'
            ' http://flask-sqlalchemy.pocoo.org/contexts/.'
        )
E       RuntimeError: No application found. Either work inside a view function or push an application context. See http://flask-sqlalchemy.pocoo.org/contexts/.

../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:912: RuntimeError
____________________________ test_serialize_search _____________________________

    def test_serialize_search():
        """Test JSON serialize."""
        def fetcher(obj_uuid, data):
            assert obj_uuid in ['1', '2']
            return PersistentIdentifier(pid_type='recid', pid_value=data['recid'])
    
        data = json.loads(JSONLDSerializer(
            CONTEXT, schema_class=_TestSchema, expanded=True).serialize_search(
                fetcher,
                dict(
                    hits=dict(
                        hits=[
                            {'_source': dict(title='title1', recid='1'),
                             '_id': '1', '_version': 1},
                            {'_source': dict(title='title2', recid='2'),
                             '_id': '2', '_version': 1},
                        ],
                        total=2,
                    ),
>                   aggregations={},
                )
        ))

../tests/test_serializer_jsonld.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../invenio_records_rest/serializers/json.py:128: in serialize_search
    ) for hit in search_result['hits']['hits']],
../invenio_records_rest/serializers/json.py:128: in <listcomp>
    ) for hit in search_result['hits']['hits']],
../invenio_records_rest/serializers/jsonld.py:74: in transform_search_hit
    pid, record_hit, links_factory, **kwargs
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_records_rest.serializers.jsonld.JSONLDSerializer object at 0x7f08f67ab7f0>
pid = <PersistentIdentifier recid:1 (None)>
record_hit = {'_id': '1', '_source': {'recid': '1', 'title': 'title1'}, '_version': 1}
links_factory = None, kwargs = {}

    def transform_search_hit(self, pid, record_hit, links_factory=None,
                             **kwargs):
        """Transform search result hit into an intermediate representation.
    
        This method should delegate the record preprocessing to the
        preprocessor mixin's preprocess_search_hit method.
    
        :param pid: Persistent identifier instance.
        :param pid: Persistent identifier instance.
        :param record_hit: Record metadata retrieved via search.
        :param links_factory: Factory function for record links.
        """
>       raise NotImplementedError()
E       NotImplementedError

../invenio_records_rest/serializers/base.py:107: NotImplementedError
____________________________ test_transform_record _____________________________

self = <sqlalchemy.util._collections.ScopedRegistry object at 0x7f08fb8b1fd0>

    def __call__(self):
        key = self.scopefunc()
        try:
>           return self.registry[key]
E           KeyError: 139676669859648

../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1005: KeyError

During handling of the above exception, another exception occurred:

    def test_transform_record():
        """Test marshmallow serializer."""
        serializer = SimpleMarshmallowSerializer(_TestSchema)
        data = serializer.transform_record(
            PersistentIdentifier(pid_type='recid', pid_value='1'),
            Record({'title': 'test'}),
>           marshmallow_context=dict(author='test2')
        )

../tests/test_serializer_marshmallow.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../invenio_records_rest/serializers/marshmallow.py:35: in transform_record
    links_factory=links_factory, **kwargs), context)
../invenio_records_rest/serializers/base.py:234: in preprocess_record
    mapping_key_lang = get_mapping(metadata.get('item_type_id'))
../invenio_records_rest/serializers/base.py:167: in get_mapping
    item_type = ItemTypes.get_by_id(item_type_id)
../../weko-records/weko_records/api.py:642: in get_by_id
    with db.session.no_autoflush:
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:176: in get
    return getattr(self.registry(), name)
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1007: in __call__
    return self.registry.setdefault(key, self.createfunc())
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:3181: in __call__
    return self.class_(**local_kw)
../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:141: in __init__
    self.app = app = db.get_app()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SQLAlchemy engine=None>, reference_app = None

    def get_app(self, reference_app=None):
        """Helper method that implements the logic to look up an
        application."""
    
        if reference_app is not None:
            return reference_app
    
        if current_app:
            return current_app._get_current_object()
    
        if self.app is not None:
            return self.app
    
        raise RuntimeError(
>           'No application found. Either work inside a view function or push'
            ' an application context. See'
            ' http://flask-sqlalchemy.pocoo.org/contexts/.'
        )
E       RuntimeError: No application found. Either work inside a view function or push an application context. See http://flask-sqlalchemy.pocoo.org/contexts/.

../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:912: RuntimeError
__________________________ test_transform_search_hit ___________________________

self = <sqlalchemy.util._collections.ScopedRegistry object at 0x7f08fb8b1fd0>

    def __call__(self):
        key = self.scopefunc()
        try:
>           return self.registry[key]
E           KeyError: 139676669859648

../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1005: KeyError

During handling of the above exception, another exception occurred:

    def test_transform_search_hit():
        """Test marshmallow serializer."""
        serializer = SimpleMarshmallowSerializer(_TestSchema)
        data = serializer.transform_record(
            PersistentIdentifier(pid_type='recid', pid_value='1'),
            Record({'title': 'test'}),
>           marshmallow_context=dict(author='test2')
        )

../tests/test_serializer_marshmallow.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../invenio_records_rest/serializers/marshmallow.py:35: in transform_record
    links_factory=links_factory, **kwargs), context)
../invenio_records_rest/serializers/base.py:234: in preprocess_record
    mapping_key_lang = get_mapping(metadata.get('item_type_id'))
../invenio_records_rest/serializers/base.py:167: in get_mapping
    item_type = ItemTypes.get_by_id(item_type_id)
../../weko-records/weko_records/api.py:642: in get_by_id
    with db.session.no_autoflush:
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:176: in get
    return getattr(self.registry(), name)
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1007: in __call__
    return self.registry.setdefault(key, self.createfunc())
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:3181: in __call__
    return self.class_(**local_kw)
../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:141: in __init__
    self.app = app = db.get_app()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SQLAlchemy engine=None>, reference_app = None

    def get_app(self, reference_app=None):
        """Helper method that implements the logic to look up an
        application."""
    
        if reference_app is not None:
            return reference_app
    
        if current_app:
            return current_app._get_current_object()
    
        if self.app is not None:
            return self.app
    
        raise RuntimeError(
>           'No application found. Either work inside a view function or push'
            ' an application context. See'
            ' http://flask-sqlalchemy.pocoo.org/contexts/.'
        )
E       RuntimeError: No application found. Either work inside a view function or push an application context. See http://flask-sqlalchemy.pocoo.org/contexts/.

../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:912: RuntimeError
_____________________ test_transform_record_default_schema _____________________

self = <sqlalchemy.util._collections.ScopedRegistry object at 0x7f08fb8b1fd0>

    def __call__(self):
        key = self.scopefunc()
        try:
>           return self.registry[key]
E           KeyError: 139676669859648

../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1005: KeyError

During handling of the above exception, another exception occurred:

    def test_transform_record_default_schema():
        """Test marshmallow serializer without providing a schema."""
        serializer = SimpleMarshmallowSerializer()
        data = serializer.transform_record(
            PersistentIdentifier(pid_type='recid', pid_value='1'),
>           Record({'title': 'test'})
        )

../tests/test_serializer_marshmallow.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../invenio_records_rest/serializers/marshmallow.py:35: in transform_record
    links_factory=links_factory, **kwargs), context)
../invenio_records_rest/serializers/base.py:234: in preprocess_record
    mapping_key_lang = get_mapping(metadata.get('item_type_id'))
../invenio_records_rest/serializers/base.py:167: in get_mapping
    item_type = ItemTypes.get_by_id(item_type_id)
../../weko-records/weko_records/api.py:642: in get_by_id
    with db.session.no_autoflush:
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:176: in get
    return getattr(self.registry(), name)
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/_collections.py:1007: in __call__
    return self.registry.setdefault(key, self.createfunc())
../.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:3181: in __call__
    return self.class_(**local_kw)
../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:141: in __init__
    self.app = app = db.get_app()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <SQLAlchemy engine=None>, reference_app = None

    def get_app(self, reference_app=None):
        """Helper method that implements the logic to look up an
        application."""
    
        if reference_app is not None:
            return reference_app
    
        if current_app:
            return current_app._get_current_object()
    
        if self.app is not None:
            return self.app
    
        raise RuntimeError(
>           'No application found. Either work inside a view function or push'
            ' an application context. See'
            ' http://flask-sqlalchemy.pocoo.org/contexts/.'
        )
E       RuntimeError: No application found. Either work inside a view function or push an application context. See http://flask-sqlalchemy.pocoo.org/contexts/.

../.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:912: RuntimeError
=============================== warnings summary ===============================
tests/test_custom_endpoints.py::test_get_record[app0]
  /code/modules/invenio-records-rest/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_endpoints.py::test_get_record[app0]
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_custom_fields.py::test_load_custom_fields
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_error_handlers.py::test_custom_error_handlers[app0]
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_post_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_query_filter
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_aggregations
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_facets.py::test_default_facets_factory
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_default_links_factory_with_additional
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_links.py::test_old_signature_backward_compatibility[app0]
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_marshmallow_load_nested_errors
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_marshmallow_loader.py::test_json_pid_checker_loader
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_permissions.py::test_default_permissions
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_pid_resolver.py::test_record_resolution
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_base.py::test_preprocessor_mixin_record
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_citeproc.py::test_serializer_in_request
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_search
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_json.py::test_serialize_pretty
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_serialize
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_jsonld.py::test_transform_jsonld
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_record_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_serializer_response.py::test_search_responsify
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_eval_field_string
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_geolocation_sort
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_sorter.py::test_default_sorter_factory
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_utils.py::test_build_default_endpoint_prefixes_simple[app0]
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_valid_delete
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_deleted
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_notfound
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_delete.py::test_delete_with_sqldatabase_error
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_etag
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_norecord
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_get.py::test_item_get_invalid_mimetype
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_valid_patch[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_patch_deleted[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_invalid_patch[;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_patch.py::test_validation_error[application/json-patch+json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_valid_put_etag[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_put_on_deleted[application/json;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_invalid_put[;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_item_put.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_valid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_invalid_create[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_list_post.py::test_jsonschema_validation_error[application/json;charset=utf-8]
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_options_view
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_options.py::test_use_options[app0]
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_json_result_serializer
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_without_size_in_request
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_size_exceed_max_result_window[app0]
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_page_links
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_query
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_sort
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_invalid_accept
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_aggregations_info
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_filters
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_search.py::test_query_wrong
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_serializers.py::test_default_serializer[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
tests/test_views_suggesters.py::test_valid_suggest[app0]
  /code/modules/invenio-records-rest/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
tests/test_custom_fields.py::test_custom_generated_fields
  /code/modules/invenio-records-rest/invenio_records_rest/schemas/fields/marshmallow_contrib.py:24: DeprecationWarning: inspect.getargspec() is deprecated since Python 3.0, use inspect.signature() or inspect.getfullargspec()
    return list(inspect.getargspec(func).args)

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                                          Stmts   Miss Branch BrPart  Cover
-----------------------------------------------------------------------------------------------
invenio_records_rest/__init__.py                                  6      0      0      0   100%
invenio_records_rest/_compat.py                                  12      8      2      0    29%
invenio_records_rest/config.py                                   26      0      2      1    96%
invenio_records_rest/errors.py                                   73     19     34      0    82%
invenio_records_rest/ext.py                                      42     12     16      1    71%
invenio_records_rest/facets.py                                   67     21     26      1    66%
invenio_records_rest/links.py                                    14      9      2      0    31%
invenio_records_rest/loaders/__init__.py                          7      0      0      0   100%
invenio_records_rest/loaders/marshmallow.py                      46     18     16      1    56%
invenio_records_rest/proxies.py                                   6      0      2      0   100%
invenio_records_rest/query.py                                    27     20      4      0    23%
invenio_records_rest/schemas/__init__.py                          4      0      0      0   100%
invenio_records_rest/schemas/fields/__init__.py                   9      0      0      0   100%
invenio_records_rest/schemas/fields/datetime.py                  13      5      2      0    67%
invenio_records_rest/schemas/fields/generated.py                 18      0     10      0   100%
invenio_records_rest/schemas/fields/marshmallow_contrib.py       36      9     20      6    70%
invenio_records_rest/schemas/fields/persistentidentifier.py       9      2      2      0    82%
invenio_records_rest/schemas/fields/sanitizedhtml.py             12      2      2      0    86%
invenio_records_rest/schemas/fields/sanitizedunicode.py          16      8      4      0    50%
invenio_records_rest/schemas/fields/trimmedstring.py              7      2      2      0    78%
invenio_records_rest/schemas/json.py                             43     18     31      2    54%
invenio_records_rest/serializers/__init__.py                      9      0      0      0   100%
invenio_records_rest/serializers/base.py                        103     58     46      1    40%
invenio_records_rest/serializers/citeproc.py                     59      8     12      3    82%
invenio_records_rest/serializers/datacite.py                     45      0     12      0   100%
invenio_records_rest/serializers/dc.py                           17      0      4      0   100%
invenio_records_rest/serializers/json.py                         69     48     46      3    28%
invenio_records_rest/serializers/jsonld.py                       33     15     12      0    49%
invenio_records_rest/serializers/marshmallow.py                  20      0      2      0   100%
invenio_records_rest/serializers/response.py                     69     51     24      0    19%
invenio_records_rest/sorter.py                                   67     39     36      1    38%
invenio_records_rest/utils.py                                    86     60     32      1    28%
invenio_records_rest/version.py                                   3      0      0      0   100%
invenio_records_rest/views.py                                   530    451    197      0    12%
-----------------------------------------------------------------------------------------------
TOTAL                                                          1603    883    600     21    42%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

======== 8 failed, 19 passed, 5865 warnings, 87 error in 43.33 seconds =========
ERROR: InvocationError for command /code/modules/invenio-records-rest/.tox/c1/bin/pytest --cov=invenio_records_rest tests -v --cov-branch --cov-report=term --cov-report=xml --cov-report=html --cov-config=tox.ini --basetemp=/code/modules/invenio-records-rest/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
