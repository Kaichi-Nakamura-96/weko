GLOB sdist-make: /code/modules/weko-admin/setup.py
c1 inst-nodeps: /code/modules/weko-admin/.tox/.tmp/package/1/weko-admin-0.1.0.dev20170000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.1,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.7,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==8.0.4,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==5.0,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,Flask==1.0.4,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.3.3,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.11.0,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,Flask-OAuthlib==0.9.5,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.1.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.4,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,iniconfig==1.1.1,intervals==0.8.0,invenio-access==1.1.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_iiif&subdirectory=modules/invenio-iiif,invenio-indexer==1.0.2,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_s3&subdirectory=modules/invenio-s3,invenio-search==1.1.0,invenio-search-ui==1.0.0a9,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,kombu==4.6.10,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==3.0.5,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.0.9,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==6.1.2,pytest-cov==4.0.0,pytest-mock==3.6.1,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.12.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,testpath==0.3.1,toml==0.10.2,tomli==1.2.3,tornado==4.5.3,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,validators==0.12.0,vine==1.3.0,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_accounts&subdirectory=modules/weko-accounts,weko-admin @ file:///code/modules/weko-admin/.tox/.tmp/package/1/weko-admin-0.1.0.dev20170000.zip,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_records&subdirectory=modules/weko-records,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://github.com/RCOSDP/weko.git@76430b4c7fb0c43f0e7c651235e280a7adbcc333#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='2861928937'
c1 run-test: commands[0] | pytest --cov=weko_admin tests -v -vv -s --cov-branch --cov-report=term --cov-report=html --basetemp=/code/modules/weko-admin/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-6.1.2, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-admin/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-admin
plugins: cov-4.0.0, celery-4.4.7, mock-3.6.1
collecting ... collected 358 items

tests/test_admin.py::TestStyleSettingView::test_index /admin/stylesetting/
PASSED
tests/test_admin.py::TestStyleSettingView::test_upload_editor[footer-data0-<div>this is contents</div>-200-res_data0] /admin/stylesetting/upload_editor
PASSED
tests/test_admin.py::TestStyleSettingView::test_upload_editor[footer-data1-<div>this is new content</div>-200-res_data1] /admin/stylesetting/upload_editor
PASSED
tests/test_admin.py::TestStyleSettingView::test_upload_editor[header-data2-<div>this is contents</div>-200-res_data2] /admin/stylesetting/upload_editor
PASSED
tests/test_admin.py::TestStyleSettingView::test_upload_editor[header-data3-<div>this is new content</div>-200-res_data3] /admin/stylesetting/upload_editor
PASSED
tests/test_admin.py::TestStyleSettingView::test_upload_editor[error-data4-None-500-None] /admin/stylesetting/upload_editor
PASSED
tests/test_admin.py::TestStyleSettingView::test_upload_editor[error-data5-None-500-None] /admin/stylesetting/upload_editor
PASSED
tests/test_admin.py::TestStyleSettingView::test_get_contents PASSED
tests/test_admin.py::TestStyleSettingView::test_cmp_files PASSED
tests/test_admin.py::TestReportView::test_index ERROR
tests/test_admin.py::TestReportView::test_get_file_stats_output /admin/report/stats_file_output
PASSED
tests/test_admin.py::TestReportView::test_get_user_report_data /admin/report/user_report_data
PASSED
tests/test_admin.py::TestReportView::test_set_email_schedule /admin/report/set_email_schedule
PASSED
tests/test_admin.py::TestReportView::test_get_email_address /admin/report/get_email_address
PASSED
tests/test_admin.py::test_FeedbackMailView_index /admin/feedbackmail/
PASSED
tests/test_admin.py::test_LanguageSettingView_index /admin/language/
PASSED
tests/test_admin.py::test_WebApiAccount_index /admin/webapiaccount/
PASSED
tests/test_admin.py::test_StatsSettingsView_index ERROR
tests/test_admin.py::TestLogAnalysisSettings::test_index /admin/loganalysissetting/
PASSED
tests/test_admin.py::TestLogAnalysisSettings::test_parse_form_data PASSED
tests/test_admin.py::test_RankingSettingsView_indes /admin/rankingsettings/
PASSED
tests/test_admin.py::test_SearchSettingsView_index ERROR
tests/test_admin.py::test_SiteLicenseSettingsView_index ERROR
tests/test_admin.py::test_SiteLicenseSendMailSettingsView_index ERROR
tests/test_admin.py::test_FilePreviewSettingsView_index ERROR
tests/test_admin.py::TestItemExportSettingsView::test_index ERROR
tests/test_admin.py::TestItemExportSettingsView::test_get_current_settings ERROR
tests/test_admin.py::test_SiteInfoView_index /admin/site_info/
PASSED
tests/test_admin.py::TestIdentifierSettingView::test_validator_halfwidth_input PASSED
tests/test_admin.py::TestIdentifierSettingView::test_validate_form PASSED
tests/test_admin.py::TestIdentifierSettingView::test_on_model_change PASSED
tests/test_admin.py::TestIdentifierSettingView::test_on_form_prefill PASSED
tests/test_admin.py::TestIdentifierSettingView::test_get_comunity_list PASSED
tests/test_admin.py::test_RestrictedAccessSettingView_index ERROR
tests/test_admin.py::TestFacetSearchSettingView::test_search_placeholder PASSED
tests/test_admin.py::TestFacetSearchSettingView::test_create_view PASSED
tests/test_admin.py::TestFacetSearchSettingView::test_edit_view FAILED
tests/test_admin.py::TestFacetSearchSettingView::test_details_view FAILED
tests/test_admin.py::TestFacetSearchSettingView::test_delete FAILED
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[0-False-200] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[1-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[2-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[3-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[4-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_guest ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_raise ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[0-False-200] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[1-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[2-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[3-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[4-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_guest ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_param1 ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_param2 ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_param3 ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_param4 ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_chk_executing ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_chk_err ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_return ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_return2 ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[0-False-200] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[1-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[2-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[3-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[4-False-403] ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_running ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_iserror ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_guest ERROR
tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_err ERROR
tests/test_api.py::test_is_restricted_user PASSED
tests/test_api.py::test_is_crawler PASSED
tests/test_api.py::test_is_crawler2 PASSED
tests/test_api.py::test_send_site_license_mail PASSED
tests/test_api.py::TestTempDirInfo::test_init PASSED
tests/test_api.py::TestTempDirInfo::test_set PASSED
tests/test_api.py::TestTempDirInfo::test_delete PASSED
tests/test_api.py::TestTempDirInfo::test_get PASSED
tests/test_api.py::TestTempDirInfo::test_get_all PASSED
tests/test_api.py::test_validate_csrf_header PASSED
tests/test_cli.py::test_init_lifetime PASSED
tests/test_cli.py::test_insert_lang_to_db PASSED
tests/test_cli.py::test_save_api_certification PASSED
tests/test_cli.py::test_update_api_certification PASSED
tests/test_cli.py::test_save_report_unit PASSED
tests/test_cli.py::test_save_report_target PASSED
tests/test_cli.py::test_add_billing_user PASSED
tests/test_cli.py::test_toggle_active_billing_user PASSED
tests/test_cli.py::test_create_settings PASSED
tests/test_cli.py::test_create_default_settings PASSED
tests/test_cli.py::test_create_default_affiliation_settings PASSED
tests/test_cli.py::test_insert_facet_search_to_db PASSED
tests/test_models.py::TestSessionLifetime::test_lifetime PASSED
tests/test_models.py::TestSessionLifetime::test_create PASSED
tests/test_models.py::TestSessionLifetime::test_get_validtime PASSED
tests/test_models.py::TestSessionLifetime::test_is_anonymous PASSED
tests/test_models.py::TestSearchManagement::test_null_data PASSED
tests/test_models.py::TestSearchManagement::test_create PASSED
tests/test_models.py::TestAdminLangSettings::test_load_lang PASSED
tests/test_models.py::TestAdminLangSettings::test_create PASSED
tests/test_models.py::TestAdminLangSettings::test_update_lang PASSED
tests/test_models.py::TestApiCertificate::test_update_cert_data PASSED
tests/test_models.py::TestApiCertificate::test_insert_new_api_cert PASSED
tests/test_models.py::TestApiCertificate::test_update_api_cert PASSED
tests/test_models.py::TestStatisticUnit::test_create PASSED
tests/test_models.py::TestStatisticTarget::test_create PASSED
tests/test_models.py::TestLogAnalysisRestrictedIpAddress::test_get_all PASSED
tests/test_models.py::TestLogAnalysisRestrictedIpAddress::test_update_table PASSED
tests/test_models.py::TestLogAnalysisRestrictedIpAddress::test_iter PASSED
tests/test_models.py::TestLogAnalysisRestrictedCrawlerList::test_get_all PASSED
tests/test_models.py::TestLogAnalysisRestrictedCrawlerList::test_get_all_active PASSED
tests/test_models.py::TestLogAnalysisRestrictedCrawlerList::test_add_list PASSED
tests/test_models.py::TestLogAnalysisRestrictedCrawlerList::test_update_or_insert_list PASSED
tests/test_models.py::TestLogAnalysisRestrictedCrawlerList::test_iter PASSED
tests/test_models.py::TestBillingPermission::test_create PASSED
tests/test_models.py::TestBillingPermission::test_activation PASSED
tests/test_models.py::TestBillingPermission::test_get_billing_information_by_id PASSED
tests/test_models.py::TestStaticsEmail::test_insert_email_address PASSED
tests/test_models.py::TestStaticsEmail::test_get_all_emails PASSED
tests/test_models.py::TestStaticsEmail::test_delete_all_row PASSED
tests/test_models.py::TestRankingSettings::test_null_data PASSED
tests/test_models.py::TestRankingSettings::test_update PASSED
tests/test_models.py::TestRankingSettings::test_delete PASSED
tests/test_models.py::TestFeedbackMailSetting::test_null_data PASSED
tests/test_models.py::TestFeedbackMailSetting::test_create PASSED
tests/test_models.py::TestFeedbackMailSetting::test_get_all_feedback_email_setting PASSED
tests/test_models.py::TestFeedbackMailSetting::test_update PASSED
tests/test_models.py::TestFeedbackMailSetting::test_delete PASSED
tests/test_models.py::TestAdminSettings::test_null_data PASSED
tests/test_models.py::TestAdminSettings::test_get ERROR
tests/test_models.py::TestAdminSettings::test_update ERROR
tests/test_models.py::TestAdminSettings::test_delete ERROR
tests/test_models.py::TestSiteInfo::test_null_data PASSED
tests/test_models.py::TestSiteInfo::test_get PASSED
tests/test_models.py::TestSiteInfo::test_update PASSED
tests/test_models.py::TestFeedbackMailHistory::test_get_sequence PASSED
tests/test_models.py::TestFeedbackMailHistory::test_create PASSED
tests/test_models.py::TestFeedbackMailHistory::test_upate_lastest_status PASSED
tests/test_models.py::TestFeedbackMailFailed::test_delete_by_history_id PASSED
tests/test_models.py::TestFeedbackMailFailed::test_create PASSED
tests/test_models.py::test_Identifier_repr PASSED
tests/test_models.py::TestFacetSearchSetting::test_null_data FAILED
tests/test_models.py::TestFacetSearchSetting::test_get_all ERROR
tests/test_models.py::TestFacetSearchSetting::test_create FAILED
tests/test_models.py::TestFacetSearchSetting::test_delete ERROR
tests/test_models.py::TestFacetSearchSetting::test_update_by_id ERROR
tests/test_models.py::TestFacetSearchSetting::test_get_activated_facets_mapping ERROR
tests/test_permissions.py::test_admin_permission_factory PASSED
tests/test_tasks.py::test_send_all_reports PASSED
tests/test_tasks.py::test_check_send_all_reports ERROR
tests/test_tasks.py::test_send_feedback_mail PASSED
tests/test_tasks.py::test_due_to_run PASSED
tests/test_tasks.py::test_check_send_site_access_report ERROR
tests/test_tasks.py::test_clean_temp_info PASSED
tests/test_tasks.py::test_is_reindex_running_not_running PASSED
tests/test_tasks.py::test_is_reindex_running_active PASSED
tests/test_tasks.py::test_is_reindex_running_reserved PASSED
tests/test_tasks.py::test_is_reindex_running_waiting PASSED
tests/test_tasks.py::test_reindex_EStoES ERROR
tests/test_tasks.py::test_reindex_DBtoES ERROR
tests/test_tasks.py::test_reindex_raise ERROR
tests/test_utils.py::test_get_response_json ERROR
tests/test_utils.py::test_allowed_file PASSED
tests/test_utils.py::test_get_search_setting PASSED
tests/test_utils.py::test_get_admin_lang_setting PASSED
tests/test_utils.py::test_update_admin_lang_setting PASSED
tests/test_utils.py::test_get_selected_language PASSED
tests/test_utils.py::test_get_api_certification_type PASSED
tests/test_utils.py::test_get_current_api_certification PASSED
tests/test_utils.py::test_save_api_certification PASSED
tests/test_utils.py::test_create_crossref_url PASSED
tests/test_utils.py::test_validate_certification PASSED
tests/test_utils.py::test_get_initial_stats_report PASSED
tests/test_utils.py::test_get_unit_stats_report PASSED
tests/test_utils.py::test_get_user_report_data PASSED
tests/test_utils.py::test_package_reports PASSED
tests/test_utils.py::test_make_stats_file PASSED
tests/test_utils.py::test_write_report_file_rows PASSED
tests/test_utils.py::test_reset_redis_cache PASSED
tests/test_utils.py::test_is_exists_key_in_redis PASSED
tests/test_utils.py::test_is_exists_key_or_empty_in_redis PASSED
tests/test_utils.py::test_get_redis_cache PASSED
tests/test_utils.py::test_get_system_default_language PASSED
tests/test_utils.py::TestStatisticMail::test_get_send_time PASSED
tests/test_utils.py::TestStatisticMail::test_send_mail_to_all PASSED
tests/test_utils.py::TestStatisticMail::test_get_banned_mail PASSED
tests/test_utils.py::TestStatisticMail::test_convert_download_count_to_int PASSED
tests/test_utils.py::TestStatisticMail::test_get_list_statistic_data PASSED
tests/test_utils.py::TestStatisticMail::test_get_item_information PASSED
tests/test_utils.py::TestStatisticMail::test_get_item_view PASSED
tests/test_utils.py::TestStatisticMail::test_get_item_download PASSED
tests/test_utils.py::TestStatisticMail::test_find_value_in_dict PASSED
tests/test_utils.py::TestStatisticMail::test_get_file_in_item PASSED
tests/test_utils.py::TestStatisticMail::test_fill_email_data PASSED
tests/test_utils.py::TestStatisticMail::test_send_mail PASSED
tests/test_utils.py::TestStatisticMail::test_build_statistic_mail_subject PASSED
tests/test_utils.py::TestStatisticMail::test_build_mail_data_to_string PASSED
tests/test_utils.py::TestStatisticMail::test_get_author_name PASSED
tests/test_utils.py::test_str_to_bool PASSED
tests/test_utils.py::TestFeedbackMail::test_search_author_mail PASSED
tests/test_utils.py::TestFeedbackMail::test_get_feed_back_email_setting PASSED
tests/test_utils.py::TestFeedbackMail::test_update_feedback_email_setting PASSED
tests/test_utils.py::TestFeedbackMail::test_convert_feedback_email_data_to_string PASSED
tests/test_utils.py::TestFeedbackMail::test_get_list_manual_email PASSED
tests/test_utils.py::TestFeedbackMail::test_handle_update_message PASSED
tests/test_utils.py::TestFeedbackMail::test_validate_feedback_mail_setting PASSED
tests/test_utils.py::TestFeedbackMail::test_load_feedback_mail_history PASSED
tests/test_utils.py::TestFeedbackMail::test_load_feedback_failed_mail PASSED
tests/test_utils.py::TestFeedbackMail::test_get_email_name PASSED
tests/test_utils.py::TestFeedbackMail::test_get_newest_email PASSED
tests/test_utils.py::TestFeedbackMail::test_get_total_page PASSED
tests/test_utils.py::TestFeedbackMail::test_get_mail_data_by_history_id PASSED
tests/test_utils.py::TestFeedbackMail::test_update_history_after_resend PASSED
tests/test_utils.py::test_validation_site_info PASSED
tests/test_utils.py::test_format_site_info_data PASSED
tests/test_utils.py::test_get_site_name_for_current_language PASSED
tests/test_utils.py::test_get_notify_for_current_language PASSED
tests/test_utils.py::test_build_init_display_index PASSED
tests/test_utils.py::test_get_init_display_index PASSED
tests/test_utils.py::test_get_restricted_access ERROR
tests/test_utils.py::test_update_restricted_access ERROR
tests/test_utils.py::TestUsageReport::test_init PASSED
tests/test_utils.py::TestUsageReport::test_get_activities_per_page PASSED
tests/test_utils.py::TestUsageReport::test_count_activities PASSED
tests/test_utils.py::TestUsageReport::test_format_usage_report_data PASSED
tests/test_utils.py::TestUsageReport::test_send_reminder_mail PASSED
tests/test_utils.py::TestUsageReport::test_get_site_info PASSED
tests/test_utils.py::TestUsageReport::test_get_usage_report_email_and_url PASSED
tests/test_utils.py::TestUsageReport::test_build_user_info PASSED
tests/test_utils.py::TestUsageReport::test_get_default_mail_sender PASSED
tests/test_utils.py::test_get_facet_search ERROR
tests/test_utils.py::test_get_item_mapping_list ERROR
tests/test_utils.py::test_create_facet_search_query ERROR
tests/test_utils.py::test_store_facet_search_query_in_redis PASSED
tests/test_utils.py::test_get_query_key_by_permission PASSED
tests/test_utils.py::test_get_facet_search_query PASSED
tests/test_utils.py::test_is_exits_facet ERROR
tests/test_utils.py::test_overwrite_the_memory_config_with_db PASSED
tests/test_utils.py::test_get_title_facets ERROR
tests/test_views.py::test_has_admin_access /login/
PASSED
tests/test_views.py::test_set_lifetime /accounts/settings/session/lifetime/200
PASSED
tests/test_views.py::test_lifetime /accounts/settings/session/
PASSED
tests/test_views.py::test_session_info_offline /accounts/settings/session/offline/info
PASSED
tests/test_views.py::test_get_lang_list PASSED
tests/test_views.py::test_save_lang_list_acl[0-True] PASSED
tests/test_views.py::test_save_lang_list_acl[1-True] PASSED
tests/test_views.py::test_save_lang_list_acl[2-False] PASSED
tests/test_views.py::test_save_lang_list_acl[3-False] PASSED
tests/test_views.py::test_save_lang_list_acl[4-False] PASSED
tests/test_views.py::test_save_lang_list_acl_guest PASSED
tests/test_views.py::test_save_lang_list PASSED
tests/test_views.py::test_get_selected_lang PASSED
tests/test_views.py::test_get_api_cert_type PASSED
tests/test_views.py::test_get_curr_api_cert PASSED
tests/test_views.py::test_save_api_cert_data_acl[0-True] PASSED
tests/test_views.py::test_save_api_cert_data_acl[1-False] PASSED
tests/test_views.py::test_save_api_cert_data_acl[2-False] PASSED
tests/test_views.py::test_save_api_cert_data_acl[3-False] PASSED
tests/test_views.py::test_save_api_cert_data_acl[4-False] PASSED
tests/test_views.py::test_save_api_cert_data_acl_guest PASSED
tests/test_views.py::test_save_api_cert_data PASSED
tests/test_views.py::test_get_init_selection PASSED
tests/test_views.py::test_get_email_author_acl[0-True] PASSED
tests/test_views.py::test_get_email_author_acl[1-True] PASSED
tests/test_views.py::test_get_email_author_acl[2-True] PASSED
tests/test_views.py::test_get_email_author_acl[3-True] PASSED
tests/test_views.py::test_get_email_author_acl[4-True] PASSED
tests/test_views.py::test_get_email_author_acl_guest PASSED
tests/test_views.py::test_get_email_author PASSED
tests/test_views.py::test_update_feedback_mail_acl[0-True] PASSED
tests/test_views.py::test_update_feedback_mail_acl[1-True] PASSED
tests/test_views.py::test_update_feedback_mail_acl[2-False] PASSED
tests/test_views.py::test_update_feedback_mail_acl[3-False] PASSED
tests/test_views.py::test_update_feedback_mail_acl[4-False] PASSED
tests/test_views.py::test_update_feedback_mail_guest PASSED
tests/test_views.py::test_update_feedback_mail PASSED
tests/test_views.py::test_get_feedback_mail_acl[0-True] PASSED
tests/test_views.py::test_get_feedback_mail_acl[1-True] PASSED
tests/test_views.py::test_get_feedback_mail_acl[2-False] PASSED
tests/test_views.py::test_get_feedback_mail_acl[3-False] PASSED
tests/test_views.py::test_get_feedback_mail_acl[4-False] PASSED
tests/test_views.py::test_get_feedback_mail_acl_guest PASSED
tests/test_views.py::test_get_feedback_mail PASSED
tests/test_views.py::test_get_send_mail_history PASSED
tests/test_views.py::test_get_failed_mail_acl[0-True] PASSED
tests/test_views.py::test_get_failed_mail_acl[1-True] PASSED
tests/test_views.py::test_get_failed_mail_acl[2-False] PASSED
tests/test_views.py::test_get_failed_mail_acl[3-False] PASSED
tests/test_views.py::test_get_failed_mail_acl[4-False] PASSED
tests/test_views.py::test_get_failed_mail_acl_guest PASSED
tests/test_views.py::test_get_failed_mail PASSED
tests/test_views.py::test_resend_failed_mail_acl[0-True] PASSED
tests/test_views.py::test_resend_failed_mail_acl[1-True] PASSED
tests/test_views.py::test_resend_failed_mail_acl[2-False] PASSED
tests/test_views.py::test_resend_failed_mail_acl[3-False] PASSED
tests/test_views.py::test_resend_failed_mail_acl[4-False] PASSED
tests/test_views.py::test_resend_failed_mail_guest PASSED
tests/test_views.py::test_resend_failed_mail PASSED
tests/test_views.py::test_manual_send_site_license_mail_acl[0-True] ERROR
tests/test_views.py::test_manual_send_site_license_mail_acl[1-True] ERROR
tests/test_views.py::test_manual_send_site_license_mail_acl[2-False] ERROR
tests/test_views.py::test_manual_send_site_license_mail_acl[3-False] ERROR
tests/test_views.py::test_manual_send_site_license_mail_acl[4-False] ERROR
tests/test_views.py::test_manual_send_site_license_mail_guest ERROR
tests/test_views.py::test_manual_send_site_license_mail PASSED
tests/test_views.py::test_update_site_info_acl[0-True] PASSED
tests/test_views.py::test_update_site_info_acl[1-True] PASSED
tests/test_views.py::test_update_site_info_acl[2-False] PASSED
tests/test_views.py::test_update_site_info_acl[3-False] PASSED
tests/test_views.py::test_update_site_info_acl[4-False] PASSED
tests/test_views.py::test_update_site_info_guest PASSED
tests/test_views.py::test_update_site_info PASSED
tests/test_views.py::test_get_site_info PASSED
tests/test_views.py::test_get_avatar PASSED
tests/test_views.py::test_get_ogp_image PASSED
tests/test_views.py::test_get_search_init_display_index PASSED
tests/test_views.py::test_save_restricted_access_acl[0-True] PASSED
tests/test_views.py::test_save_restricted_access_acl[1-True] PASSED
tests/test_views.py::test_save_restricted_access_acl[2-False] PASSED
tests/test_views.py::test_save_restricted_access_acl[3-False] PASSED
tests/test_views.py::test_save_restricted_access_acl[4-False] PASSED
tests/test_views.py::test_save_restricted_access_guest PASSED
tests/test_views.py::test_save_restricted_access PASSED
tests/test_views.py::test_get_usage_report_activities_acl[0-True] PASSED
tests/test_views.py::test_get_usage_report_activities_acl[1-True] PASSED
tests/test_views.py::test_get_usage_report_activities_acl[2-False] PASSED
tests/test_views.py::test_get_usage_report_activities_acl[3-False] PASSED
tests/test_views.py::test_get_usage_report_activities_acl[4-False] PASSED
tests/test_views.py::test_get_usage_report_activities_guest PASSED
tests/test_views.py::test_get_usage_report_activities PASSED
tests/test_views.py::test_send_mail_reminder_usage_report_acl[0-True] PASSED
tests/test_views.py::test_send_mail_reminder_usage_report_acl[1-True] PASSED
tests/test_views.py::test_send_mail_reminder_usage_report_acl[2-False] PASSED
tests/test_views.py::test_send_mail_reminder_usage_report_acl[3-False] PASSED
tests/test_views.py::test_send_mail_reminder_usage_report_acl[4-False] PASSED
tests/test_views.py::test_send_mail_reminder_usage_report_guest PASSED
tests/test_views.py::test_send_mail_reminder_usage_report PASSED
tests/test_views.py::test_save_facet_search_acl[0-True] PASSED
tests/test_views.py::test_save_facet_search_acl[1-True] PASSED
tests/test_views.py::test_save_facet_search_acl[2-False] PASSED
tests/test_views.py::test_save_facet_search_acl[3-False] PASSED
tests/test_views.py::test_save_facet_search_acl[4-False] PASSED
tests/test_views.py::test_save_facet_search_guest PASSED
tests/test_views.py::test_save_facet_search PASSED
tests/test_views.py::test_remove_facet_search_acl[0-True] PASSED
tests/test_views.py::test_remove_facet_search_acl[1-True] PASSED
tests/test_views.py::test_remove_facet_search_acl[2-False] PASSED
tests/test_views.py::test_remove_facet_search_acl[3-False] PASSED
tests/test_views.py::test_remove_facet_search_acl[4-False] PASSED
tests/test_views.py::test_remove_facet_search_guest PASSED
tests/test_views.py::test_remove_facet_search PASSED
tests/test_views.py::test_dbsession_clean PASSED
tests/test_weko_admin.py::test_version PASSED
tests/test_weko_admin.py::test_init PASSED
tests/test_weko_admin.py::test_view /accounts/settings/session/
PASSED
tests/test_weko_admin.py::test_role_has_access /login/
PASSED
tests/test_weko_admin.py::test_is_accessible_to_role /login/
PASSED
tests/test_weko_admin.py::test_set_default_language /login/
PASSED
tests/test_weko_admin.py::test_make_session_permanent /test_path
/test_path
PASSED

==================================== ERRORS ====================================
_________________ ERROR at setup of TestReportView.test_index __________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4ad61be80>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4ad66c518>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4ad61b940>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4ad6d0a20>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4ad61ba90>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4ad66c518>
cursor = <sqlite3.Cursor object at 0x7fb4adaa3d50>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4ad61ba90>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4ad66c518>
cursor = <sqlite3.Cursor object at 0x7fb4adaa3d50>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4ad61ba90>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
________________ ERROR at setup of test_StatsSettingsView_index ________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4aabf26d8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4aac50eb8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4aabf2390>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4aabea240>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4aabf2320>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4aac50eb8>
cursor = <sqlite3.Cursor object at 0x7fb4aac62c00>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4aabf2320>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4aac50eb8>
cursor = <sqlite3.Cursor object at 0x7fb4aac62c00>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4aabf2320>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_______________ ERROR at setup of test_SearchSettingsView_index ________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4ab1514a8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4acec7cf8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4ab151358>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4ad2818d0>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4ab151400>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4acec7cf8>
cursor = <sqlite3.Cursor object at 0x7fb4ab48cdc0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4ab151400>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4acec7cf8>
cursor = <sqlite3.Cursor object at 0x7fb4ab48cdc0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4ab151400>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_____________ ERROR at setup of test_SiteLicenseSettingsView_index _____________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4ac3d0160>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4abc4f198>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 18:45:20.928171', '2023-03-24 18:45:20.928175', 0, '123.456.789.012', '987.654.321.098')
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4ac3d0320>, [{'finish_ip_address': '987.654.321.098', 'organization_id': 0, 'start_ip_address': '123.456.789.012'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4abce6898>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4ac3d0fd0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4abc4f198>
cursor = <sqlite3.Cursor object at 0x7fb4aa60c3b0>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 18:45:20.928171', '2023-03-24 18:45:20.928175', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4ac3d0fd0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: sitelicense_ip_address.organization_no

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def site_license(db):
        license=dict()
        result = SiteLicenseInfo(
            organization_id=0,
            organization_name="test data",
            receive_mail_flag="T",
            mail_address="test@mail.com",
            domain_name="test_domain",
        )
        db.session.add(result)
        addr1 = SiteLicenseIpAddress(
            organization_id=0,
            start_ip_address="123.456.789.012",
            finish_ip_address="987.654.321.098"
        )
        #addr2 = SiteLicenseIpAddress(
        #    organization_id=0,
        #    start_ip_address="567.890.123.456",
        #    finish_ip_address="543.210.987.654"
        #)
        db.session.add(addr1)
        #db.session.add(addr2)
        license["Info"]=result
        #license["address"] = [addr1,addr2]
        license["address"] = [addr1]
>       db.session.commit()

tests/conftest.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1116: in _emit_insert_statements
    statement, params
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4abc4f198>
cursor = <sqlite3.Cursor object at 0x7fb4aa60c3b0>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 18:45:20.928171', '2023-03-24 18:45:20.928175', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4ac3d0fd0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: sitelicense_ip_address.organization_no [SQL: 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'] [parameters: ('2023-03-24 18:45:20.928171', '2023-03-24 18:45:20.928175', 0, '123.456.789.012', '987.654.321.098')] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
_________ ERROR at setup of test_SiteLicenseSendMailSettingsView_index _________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4aa43deb8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4aa43ac50>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4aa43d3c8>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a9f1d940>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4aa43dda0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4aa43ac50>
cursor = <sqlite3.Cursor object at 0x7fb4aa245180>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4aa43dda0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4aa43ac50>
cursor = <sqlite3.Cursor object at 0x7fb4aa245180>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4aa43dda0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_____________ ERROR at setup of test_FilePreviewSettingsView_index _____________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4aa311048>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4aa2fb470>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4aa311128>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4aa1df0b8>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4aa2f3518>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4aa2fb470>
cursor = <sqlite3.Cursor object at 0x7fb4aa31f0a0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4aa2f3518>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4aa2fb470>
cursor = <sqlite3.Cursor object at 0x7fb4aa31f0a0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4aa2f3518>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
___________ ERROR at setup of TestItemExportSettingsView.test_index ____________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a9c7eeb8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a9c7e160>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a9e7e4e0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a9c934e0>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a9e7e160>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a9c7e160>
cursor = <sqlite3.Cursor object at 0x7fb4a9c7bf80>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a9e7e160>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a9c7e160>
cursor = <sqlite3.Cursor object at 0x7fb4a9c7bf80>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a9e7e160>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
____ ERROR at setup of TestItemExportSettingsView.test_get_current_settings ____

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a9a23208>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a9a06da0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a9a230f0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a9a237f0>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a9a23198>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a9a06da0>
cursor = <sqlite3.Cursor object at 0x7fb4a9a10880>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a9a23198>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a9a06da0>
cursor = <sqlite3.Cursor object at 0x7fb4a9a10880>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a9a23198>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
___________ ERROR at setup of test_RestrictedAccessSettingView_index ___________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a8af6208>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a8b63080>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a8af6278>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a8af1e80>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a8af6320>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a8b63080>
cursor = <sqlite3.Cursor object at 0x7fb4a9237dc0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a8af6320>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a8b63080>
cursor = <sqlite3.Cursor object at 0x7fb4a9237dc0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a8af6320>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_index_acl[0-False-200] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a8376be0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a839bb00>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a836d8d0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a8397748>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a836da20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a839bb00>
cursor = <sqlite3.Cursor object at 0x7fb4a88d4340>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a836da20>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a839bb00>
cursor = <sqlite3.Cursor object at 0x7fb4a88d4340>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a836da20>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_index_acl[1-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a7f39898>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a8644898>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a7f39278>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a864dd68>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a7f39748>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a8644898>
cursor = <sqlite3.Cursor object at 0x7fb4a9832dc0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a7f39748>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a8644898>
cursor = <sqlite3.Cursor object at 0x7fb4a9832dc0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a7f39748>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_index_acl[2-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a831c470>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a8310be0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a831c710>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a8326240>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a831c630>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a8310be0>
cursor = <sqlite3.Cursor object at 0x7fb4a831dce0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a831c630>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a8310be0>
cursor = <sqlite3.Cursor object at 0x7fb4a831dce0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a831c630>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_index_acl[3-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a80c2160>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a80b3160>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a80c21d0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a80beba8>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a80c2278>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a80b3160>
cursor = <sqlite3.Cursor object at 0x7fb4a80b9c00>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a80c2278>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a80b3160>
cursor = <sqlite3.Cursor object at 0x7fb4a80b9c00>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a80c2278>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_index_acl[4-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a7bf4ac8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a7bf4048>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a7bf4dd8>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a7c0a208>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a7bf4f28>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a7bf4048>
cursor = <sqlite3.Cursor object at 0x7fb4a7c15a40>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a7bf4f28>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a7bf4048>
cursor = <sqlite3.Cursor object at 0x7fb4a7c15a40>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a7bf4f28>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_index_guest _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a77c72b0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a77b1588>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a77c7320>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a77be2e8>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a77c73c8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a77b1588>
cursor = <sqlite3.Cursor object at 0x7fb4a77d98f0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a77c73c8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a77b1588>
cursor = <sqlite3.Cursor object at 0x7fb4a77d98f0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a77c73c8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_index_raise _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a72a9a20>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a7455400>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a72a9ac8>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a7461208>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a72a9978>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a7455400>
cursor = <sqlite3.Cursor object at 0x7fb4a72c77a0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a72a9978>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a7455400>
cursor = <sqlite3.Cursor object at 0x7fb4a72c77a0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a72a9978>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_acl[0-False-200] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a6cb3e80>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a6d4da58>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a6cb3f98>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a6d5f390>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6cb3da0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a6d4da58>
cursor = <sqlite3.Cursor object at 0x7fb4a6d5c650>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6cb3da0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a6d4da58>
cursor = <sqlite3.Cursor object at 0x7fb4a6d5c650>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6cb3da0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_acl[1-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a6ac4c88>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a6aa9828>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a6ac4f60>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a6abe748>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6ac4e10>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a6aa9828>
cursor = <sqlite3.Cursor object at 0x7fb4a69f4500>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6ac4e10>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a6aa9828>
cursor = <sqlite3.Cursor object at 0x7fb4a69f4500>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6ac4e10>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_acl[2-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a6727320>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a670cac8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a67271d0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a671dda0>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a67270b8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a670cac8>
cursor = <sqlite3.Cursor object at 0x7fb4a64c53b0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a67270b8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a670cac8>
cursor = <sqlite3.Cursor object at 0x7fb4a64c53b0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a67270b8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_acl[3-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a6240e48>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a62e8f98>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a6240eb8>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a623d7b8>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6240ba8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a62e8f98>
cursor = <sqlite3.Cursor object at 0x7fb4a6077260>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6240ba8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a62e8f98>
cursor = <sqlite3.Cursor object at 0x7fb4a6077260>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6240ba8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_acl[4-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a6aa66d8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a6493588>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a6aa6198>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a6002470>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6aa62b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a6493588>
cursor = <sqlite3.Cursor object at 0x7fb4a5ea3180>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6aa62b0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a6493588>
cursor = <sqlite3.Cursor object at 0x7fb4a5ea3180>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a6aa62b0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_guest _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a5cbc9e8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a57e1d68>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a5cbc240>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a5cb9438>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a5cbc4a8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a57e1d68>
cursor = <sqlite3.Cursor object at 0x7fb4a57c1f80>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a5cbc4a8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a57e1d68>
cursor = <sqlite3.Cursor object at 0x7fb4a57c1f80>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a5cbc4a8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_param1 _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a58d6518>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a58c27f0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a58d6e80>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a58d3be0>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a58d64a8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a58c27f0>
cursor = <sqlite3.Cursor object at 0x7fb4a58c8e30>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a58d64a8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a58c27f0>
cursor = <sqlite3.Cursor object at 0x7fb4a58c8e30>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a58d64a8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_param2 _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a4fda4e0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a4fc70b8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a4fda550>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a4af8dd8>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a4fda5f8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a4fc70b8>
cursor = <sqlite3.Cursor object at 0x7fb4a4fd4ce0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a4fda5f8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a4fc70b8>
cursor = <sqlite3.Cursor object at 0x7fb4a4fd4ce0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a4fda5f8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_param3 _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a4ce84a8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a4ccb668>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a4ce8ba8>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a46d93c8>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a4ce8fd0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a4ccb668>
cursor = <sqlite3.Cursor object at 0x7fb4a4cdcc00>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a4ce8fd0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a4ccb668>
cursor = <sqlite3.Cursor object at 0x7fb4a4cdcc00>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a4ce8fd0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_param4 _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a4996208>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a49a7438>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a4996320>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a48fbb38>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a49962e8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a49a7438>
cursor = <sqlite3.Cursor object at 0x7fb4a4907a40>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a49962e8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a49a7438>
cursor = <sqlite3.Cursor object at 0x7fb4a4907a40>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a49962e8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_chk_executing _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a45650b8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a45554a8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a4565358>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a44ab240>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a4565208>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a45554a8>
cursor = <sqlite3.Cursor object at 0x7fb4a44c18f0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a4565208>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a45554a8>
cursor = <sqlite3.Cursor object at 0x7fb4a44c18f0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a4565208>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_chk_err _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a3f88780>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a399bba8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a3f88630>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a3f85630>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a3f88f60>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a399bba8>
cursor = <sqlite3.Cursor object at 0x7fb4a3fa47a0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a3f88f60>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a399bba8>
cursor = <sqlite3.Cursor object at 0x7fb4a3fa47a0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a3f88f60>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_return _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a3713518>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a371d0b8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a3713588>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a36f7f60>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a3713630>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a371d0b8>
cursor = <sqlite3.Cursor object at 0x7fb4a3721650>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a3713630>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a371d0b8>
cursor = <sqlite3.Cursor object at 0x7fb4a3721650>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a3713630>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_reindex_return2 _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a3a2aa90>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a3b13550>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a3a2aa20>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a3b22b70>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a3a2a9e8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a3b13550>
cursor = <sqlite3.Cursor object at 0x7fb4a3a31570>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a3a2a9e8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a3b13550>
cursor = <sqlite3.Cursor object at 0x7fb4a3a31570>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a3a2a9e8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_check_reindex_is_running_acl[0-False-200] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a37eb438>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2f8c3c8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a37ebf98>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a2fa6b70>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a37ebef0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2f8c3c8>
cursor = <sqlite3.Cursor object at 0x7fb4a381f3b0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a37ebef0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2f8c3c8>
cursor = <sqlite3.Cursor object at 0x7fb4a381f3b0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a37ebef0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_check_reindex_is_running_acl[1-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a2fc60b8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2fca320>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a2fdfbe0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a2fe3c88>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a2fdfe10>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2fca320>
cursor = <sqlite3.Cursor object at 0x7fb4a2f15260>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a2fdfe10>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2fca320>
cursor = <sqlite3.Cursor object at 0x7fb4a2f15260>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a2fdfe10>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_check_reindex_is_running_acl[2-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a29fda20>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2433a90>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a29fdb70>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a29fb048>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a29fdcf8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2433a90>
cursor = <sqlite3.Cursor object at 0x7fb4a2a09110>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a29fdcf8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2433a90>
cursor = <sqlite3.Cursor object at 0x7fb4a2a09110>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a29fdcf8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_check_reindex_is_running_acl[3-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a286c588>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a20d4860>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a286c5f8>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a237d860>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a286c6a0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a20d4860>
cursor = <sqlite3.Cursor object at 0x7fb4a20b0f80>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a286c6a0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a20d4860>
cursor = <sqlite3.Cursor object at 0x7fb4a20b0f80>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a286c6a0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_check_reindex_is_running_acl[4-False-403] _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a22fd710>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2698e80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a22fd7b8>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a22ea550>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a22fd748>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2698e80>
cursor = <sqlite3.Cursor object at 0x7fb4a26a4ea0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a22fd748>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a2698e80>
cursor = <sqlite3.Cursor object at 0x7fb4a26a4ea0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a22fd748>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_check_reindex_is_running_running _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a1f010f0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a21d1fd0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a1f01390>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a1eee208>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a1f01160>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a21d1fd0>
cursor = <sqlite3.Cursor object at 0x7fb4a21dfdc0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a1f01160>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a21d1fd0>
cursor = <sqlite3.Cursor object at 0x7fb4a21dfdc0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a1f01160>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_check_reindex_iserror _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a19a3c18>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a1980eb8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a19a3978>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a1999940>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a19a32e8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a1980eb8>
cursor = <sqlite3.Cursor object at 0x7fb4a1994b90>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a19a32e8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a1980eb8>
cursor = <sqlite3.Cursor object at 0x7fb4a1994b90>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a19a32e8>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_check_reindex_is_running_guest _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a1822128>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a1802780>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a18220b8>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a1811c50>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a1822c88>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a1802780>
cursor = <sqlite3.Cursor object at 0x7fb4a15efab0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a1822c88>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a1802780>
cursor = <sqlite3.Cursor object at 0x7fb4a15efab0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a1822c88>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_ ERROR at setup of TestsReindexElasticSearchView.test_ReindexElasticSearchView_check_reindex_is_running_err _

self = <sqlalchemy.engine.base.Connection object at 0x7fb4a0d1be10>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a0d082e8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4a0d1bf28>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4a0d25668>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a0d1b630>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a0d082e8>
cursor = <sqlite3.Cursor object at 0x7fb4a14b39d0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a0d1b630>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a0d082e8>
cursor = <sqlite3.Cursor object at 0x7fb4a14b39d0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4a0d1b630>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_________________ ERROR at setup of TestAdminSettings.test_get _________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4983b1278>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb498415780>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4983b1160>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4983b1860>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4983b1208>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb498415780>
cursor = <sqlite3.Cursor object at 0x7fb498418a40>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4983b1208>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb498415780>
cursor = <sqlite3.Cursor object at 0x7fb498418a40>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4983b1208>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_______________ ERROR at setup of TestAdminSettings.test_update ________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb498171160>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4981d8898>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4981711d0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb498171748>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb498171278>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4981d8898>
cursor = <sqlite3.Cursor object at 0x7fb4981e8730>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb498171278>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4981d8898>
cursor = <sqlite3.Cursor object at 0x7fb4981e8730>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb498171278>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_______________ ERROR at setup of TestAdminSettings.test_delete ________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb49bacf080>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49ba14e80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb49bacf048>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb49baa0f28>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb49bacf4e0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49ba14e80>
cursor = <sqlite3.Cursor object at 0x7fb4990b1ab0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb49bacf4e0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49ba14e80>
cursor = <sqlite3.Cursor object at 0x7fb4990b1ab0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb49bacf4e0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
____________ ERROR at setup of TestFacetSearchSetting.test_get_all _____________

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def facet_search_settings(db):
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/conftest.py:908: TypeError
_____________ ERROR at setup of TestFacetSearchSetting.test_delete _____________

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def facet_search_settings(db):
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/conftest.py:908: TypeError
__________ ERROR at setup of TestFacetSearchSetting.test_update_by_id __________

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def facet_search_settings(db):
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/conftest.py:908: TypeError
__ ERROR at setup of TestFacetSearchSetting.test_get_activated_facets_mapping __

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def facet_search_settings(db):
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/conftest.py:908: TypeError
________________ ERROR at setup of test_check_send_all_reports _________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4990ca780>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb497ad9f98>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4990cacf8>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb49a9dc860>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4990ca1d0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb497ad9f98>
cursor = <sqlite3.Cursor object at 0x7fb49720a6c0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4990ca1d0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb497ad9f98>
cursor = <sqlite3.Cursor object at 0x7fb49720a6c0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4990ca1d0>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_____________ ERROR at setup of test_check_send_site_access_report _____________

self = <sqlalchemy.engine.base.Connection object at 0x7fb49a9dfb38>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49e9fc438>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb49a9dfcc0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb49ba6dc88>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb49a9dfc88>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49e9fc438>
cursor = <sqlite3.Cursor object at 0x7fb49c8709d0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb49a9dfc88>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49e9fc438>
cursor = <sqlite3.Cursor object at 0x7fb49c8709d0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb49a9dfc88>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
____________________ ERROR at setup of test_reindex_EStoES _____________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb494360198>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4943454e0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb494360080>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb494360780>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb494360128>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4943454e0>
cursor = <sqlite3.Cursor object at 0x7fb4942f15e0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb494360128>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4943454e0>
cursor = <sqlite3.Cursor object at 0x7fb4942f15e0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb494360128>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
____________________ ERROR at setup of test_reindex_DBtoES _____________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb495255be0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb494dd0278>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb495251be0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb495255978>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb495251c88>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb494dd0278>
cursor = <sqlite3.Cursor object at 0x7fb4977fe2d0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb495251c88>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb494dd0278>
cursor = <sqlite3.Cursor object at 0x7fb4977fe2d0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb495251c88>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_____________________ ERROR at setup of test_reindex_raise _____________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb495d97940>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49634bd68>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb495d97320>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb495d05f28>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb495d97470>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49634bd68>
cursor = <sqlite3.Cursor object at 0x7fb496bd75e0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb495d97470>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49634bd68>
cursor = <sqlite3.Cursor object at 0x7fb496bd75e0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb495d97470>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
___________________ ERROR at setup of test_get_response_json ___________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb49bea93c8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49c8f03c8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 18:54:40.997843', '2023-03-24 18:54:40.997847', 0, '123.456.789.012', '987.654.321.098')
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb49bea9828>, [{'finish_ip_address': '987.654.321.098', 'organization_id': 0, 'start_ip_address': '123.456.789.012'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb49c758320>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb49bea9710>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49c8f03c8>
cursor = <sqlite3.Cursor object at 0x7fb49883c180>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 18:54:40.997843', '2023-03-24 18:54:40.997847', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb49bea9710>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: sitelicense_ip_address.organization_no

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def site_license(db):
        license=dict()
        result = SiteLicenseInfo(
            organization_id=0,
            organization_name="test data",
            receive_mail_flag="T",
            mail_address="test@mail.com",
            domain_name="test_domain",
        )
        db.session.add(result)
        addr1 = SiteLicenseIpAddress(
            organization_id=0,
            start_ip_address="123.456.789.012",
            finish_ip_address="987.654.321.098"
        )
        #addr2 = SiteLicenseIpAddress(
        #    organization_id=0,
        #    start_ip_address="567.890.123.456",
        #    finish_ip_address="543.210.987.654"
        #)
        db.session.add(addr1)
        #db.session.add(addr2)
        license["Info"]=result
        #license["address"] = [addr1,addr2]
        license["address"] = [addr1]
>       db.session.commit()

tests/conftest.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1116: in _emit_insert_statements
    statement, params
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb49c8f03c8>
cursor = <sqlite3.Cursor object at 0x7fb49883c180>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 18:54:40.997843', '2023-03-24 18:54:40.997847', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb49bea9710>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: sitelicense_ip_address.organization_no [SQL: 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'] [parameters: ('2023-03-24 18:54:40.997843', '2023-03-24 18:54:40.997847', 0, '123.456.789.012', '987.654.321.098')] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
_________________ ERROR at setup of test_get_restricted_access _________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb491992198>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb490c26390>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb491992080>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb491992780>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb491992128>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb490c26390>
cursor = <sqlite3.Cursor object at 0x7fb492797ce0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb491992128>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb490c26390>
cursor = <sqlite3.Cursor object at 0x7fb492797ce0>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb491992128>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
_______________ ERROR at setup of test_update_restricted_access ________________

self = <sqlalchemy.engine.base.Connection object at 0x7fb4923b1208>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a7446a90>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4923b10f0>, [{'id': 1, 'name': 'items_display_settings...'usage_report_workflow_access': {'expiration_date_access': 500, 'expiration_date_access_unlimited_chk': False}}}, ...])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4923b17f0>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4923b1198>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
>                       cursor, statement, parameters, context

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a7446a90>
cursor = <sqlite3.Cursor object at 0x7fb4923f8f80>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4923b1198>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: admin_settings.id

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def admin_settings(db):
        settings = list()
        settings.append(AdminSettings(id=1,name='items_display_settings',settings={"items_display_email": False, "items_search_author": "name", "item_display_open_date": False}))
        settings.append(AdminSettings(id=2,name='storage_check_settings',settings={"day": 0, "cycle": "weekly", "threshold_rate": 80}))
        settings.append(AdminSettings(id=3,name='site_license_mail_settings',settings={"auto_send_flag": False}))
        settings.append(AdminSettings(id=4,name='default_properties_settings',settings={"show_flag": True}))
        settings.append(AdminSettings(id=5,name='item_export_settings',settings={"allow_item_exporting": True, "enable_contents_exporting": True}))
        settings.append(AdminSettings(id=6,name="restricted_access",settings={"content_file_download": {"expiration_date": 30,"expiration_date_unlimited_chk": False,"download_limit": 10,"download_limit_unlimited_chk": False,},"usage_report_workflow_access": {"expiration_date_access": 500,"expiration_date_access_unlimited_chk": False,},"terms_and_conditions": []}))
        settings.append(AdminSettings(id=7,name="display_stats_settings",settings={"display_stats":False}))
        settings.append(AdminSettings(id=8,name='convert_pdf_settings',settings={"path":"/tmp/file","pdf_ttl":1800}))
        settings.append(AdminSettings(id=8,name="elastic_reindex_settings",settings={"has_errored": False}))
        db.session.add_all(settings)
>       db.session.commit()

tests/conftest.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1216: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb4a7446a90>
cursor = <sqlite3.Cursor object at 0x7fb4923f8f80>
statement = 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'
parameters = ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date"...s": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4923b1198>

    def do_executemany(self, cursor, statement, parameters, context=None):
>       cursor.executemany(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: admin_settings.id [SQL: 'INSERT INTO admin_settings (id, name, settings) VALUES (?, ?, ?)'] [parameters: ((1, 'items_display_settings', '{"items_display_email": false, "items_search_author": "name", "item_display_open_date": false}'), (2, 'storage_check_settings', '{"day": 0, "cycle": "weekly", "threshold_rate": 80}'), (3, 'site_license_mail_settings', '{"auto_send_flag": false}'), (4, 'default_properties_settings', '{"show_flag": true}'), (5, 'item_export_settings', '{"allow_item_exporting": true, "enable_contents_exporting": true}'), (6, 'restricted_access', '{"content_file_download": {"expiration_date": 30, "expiration_date_unlimited_chk": false, "download_limit": 10, "download_limit_unlimited_chk": false}, "usage_report_workflow_access": {"expiration_date_access": 500, "expiration_date_access_unlimited_chk": false}, "terms_and_conditions": []}'), (7, 'display_stats_settings', '{"display_stats": false}'), (8, 'convert_pdf_settings', '{"path": "/tmp/file", "pdf_ttl": 1800}'), (8, 'elastic_reindex_settings', '{"has_errored": false}'))] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:533: IntegrityError
___________________ ERROR at setup of test_get_facet_search ____________________

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def facet_search_settings(db):
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/conftest.py:908: TypeError
_________________ ERROR at setup of test_get_item_mapping_list _________________

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def facet_search_settings(db):
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/conftest.py:908: TypeError
_______________ ERROR at setup of test_create_facet_search_query _______________

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def facet_search_settings(db):
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/conftest.py:908: TypeError
____________________ ERROR at setup of test_is_exits_facet _____________________

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def facet_search_settings(db):
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/conftest.py:908: TypeError
___________________ ERROR at setup of test_get_title_facets ____________________
file /code/modules/weko-admin/tests/test_utils.py, line 2072
  def test_get_title_facets(i18n_app, users, facet_search_setting):
E       fixture 'facet_search_setting' not found
>       available fixtures: actions, activities, admin_app, admin_db, admin_settings, api, api_certificate, app, authors, base_app, billing_permissions, cache, cache_config, capfd, capfdbinary, caplog, capsys, capsysbinary, celery_app, celery_class_tasks, celery_config, celery_enable_logging, celery_includes, celery_parameters, celery_session_app, celery_session_worker, celery_worker, celery_worker_parameters, celery_worker_pool, class_mocker, client, cov, db, depends_on_current_app, doctest_namespace, facet_search_settings, feedback_mail_faileds, feedback_mail_histories, feedback_mail_settings, file_instance, flows, i18n_app, identifier, index_style, indexes, instance_path, item_type, language_setting, location, log_crawler_list, mail_config, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, ranking_settings, record_property, record_testsuite_property, record_xml_attribute, records, recwarn, redis_connect, reindex_settings, restricted_ip_addr, script_info, search_class, search_management, session_lifetime, session_mocker, site_info, site_infos, site_license, statistic_email_addrs, statistic_target, statistic_unit, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, use_celery_app_trap, users
>       use 'pytest --fixtures [testpath]' for help on them.

/code/modules/weko-admin/tests/test_utils.py:2072
_______ ERROR at setup of test_manual_send_site_license_mail_acl[0-True] _______

self = <sqlalchemy.engine.base.Connection object at 0x7fb47f1acb38>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47f19b7f0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:27.228659', '2023-03-24 19:04:27.228664', 0, '123.456.789.012', '987.654.321.098')
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb47f1ac908>, [{'finish_ip_address': '987.654.321.098', 'organization_id': 0, 'start_ip_address': '123.456.789.012'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb47f1340b8>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47f1ac2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47f19b7f0>
cursor = <sqlite3.Cursor object at 0x7fb47f141880>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:27.228659', '2023-03-24 19:04:27.228664', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47f1ac2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: sitelicense_ip_address.organization_no

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def site_license(db):
        license=dict()
        result = SiteLicenseInfo(
            organization_id=0,
            organization_name="test data",
            receive_mail_flag="T",
            mail_address="test@mail.com",
            domain_name="test_domain",
        )
        db.session.add(result)
        addr1 = SiteLicenseIpAddress(
            organization_id=0,
            start_ip_address="123.456.789.012",
            finish_ip_address="987.654.321.098"
        )
        #addr2 = SiteLicenseIpAddress(
        #    organization_id=0,
        #    start_ip_address="567.890.123.456",
        #    finish_ip_address="543.210.987.654"
        #)
        db.session.add(addr1)
        #db.session.add(addr2)
        license["Info"]=result
        #license["address"] = [addr1,addr2]
        license["address"] = [addr1]
>       db.session.commit()

tests/conftest.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1116: in _emit_insert_statements
    statement, params
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47f19b7f0>
cursor = <sqlite3.Cursor object at 0x7fb47f141880>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:27.228659', '2023-03-24 19:04:27.228664', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47f1ac2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: sitelicense_ip_address.organization_no [SQL: 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'] [parameters: ('2023-03-24 19:04:27.228659', '2023-03-24 19:04:27.228664', 0, '123.456.789.012', '987.654.321.098')] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
_______ ERROR at setup of test_manual_send_site_license_mail_acl[1-True] _______

self = <sqlalchemy.engine.base.Connection object at 0x7fb47efab898>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47efa17b8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:33.438769', '2023-03-24 19:04:33.438773', 0, '123.456.789.012', '987.654.321.098')
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb47efaba20>, [{'finish_ip_address': '987.654.321.098', 'organization_id': 0, 'start_ip_address': '123.456.789.012'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb47eef12e8>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47efab908>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47efa17b8>
cursor = <sqlite3.Cursor object at 0x7fb47ef06880>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:33.438769', '2023-03-24 19:04:33.438773', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47efab908>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: sitelicense_ip_address.organization_no

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def site_license(db):
        license=dict()
        result = SiteLicenseInfo(
            organization_id=0,
            organization_name="test data",
            receive_mail_flag="T",
            mail_address="test@mail.com",
            domain_name="test_domain",
        )
        db.session.add(result)
        addr1 = SiteLicenseIpAddress(
            organization_id=0,
            start_ip_address="123.456.789.012",
            finish_ip_address="987.654.321.098"
        )
        #addr2 = SiteLicenseIpAddress(
        #    organization_id=0,
        #    start_ip_address="567.890.123.456",
        #    finish_ip_address="543.210.987.654"
        #)
        db.session.add(addr1)
        #db.session.add(addr2)
        license["Info"]=result
        #license["address"] = [addr1,addr2]
        license["address"] = [addr1]
>       db.session.commit()

tests/conftest.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1116: in _emit_insert_statements
    statement, params
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47efa17b8>
cursor = <sqlite3.Cursor object at 0x7fb47ef06880>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:33.438769', '2023-03-24 19:04:33.438773', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47efab908>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: sitelicense_ip_address.organization_no [SQL: 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'] [parameters: ('2023-03-24 19:04:33.438769', '2023-03-24 19:04:33.438773', 0, '123.456.789.012', '987.654.321.098')] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
______ ERROR at setup of test_manual_send_site_license_mail_acl[2-False] _______

self = <sqlalchemy.engine.base.Connection object at 0x7fb47ed4d4a8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47ed38390>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:39.590225', '2023-03-24 19:04:39.590229', 0, '123.456.789.012', '987.654.321.098')
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb47ed4d080>, [{'finish_ip_address': '987.654.321.098', 'organization_id': 0, 'start_ip_address': '123.456.789.012'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb47ed43208>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47ed4ddd8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47ed38390>
cursor = <sqlite3.Cursor object at 0x7fb47ed488f0>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:39.590225', '2023-03-24 19:04:39.590229', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47ed4ddd8>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: sitelicense_ip_address.organization_no

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def site_license(db):
        license=dict()
        result = SiteLicenseInfo(
            organization_id=0,
            organization_name="test data",
            receive_mail_flag="T",
            mail_address="test@mail.com",
            domain_name="test_domain",
        )
        db.session.add(result)
        addr1 = SiteLicenseIpAddress(
            organization_id=0,
            start_ip_address="123.456.789.012",
            finish_ip_address="987.654.321.098"
        )
        #addr2 = SiteLicenseIpAddress(
        #    organization_id=0,
        #    start_ip_address="567.890.123.456",
        #    finish_ip_address="543.210.987.654"
        #)
        db.session.add(addr1)
        #db.session.add(addr2)
        license["Info"]=result
        #license["address"] = [addr1,addr2]
        license["address"] = [addr1]
>       db.session.commit()

tests/conftest.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1116: in _emit_insert_statements
    statement, params
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47ed38390>
cursor = <sqlite3.Cursor object at 0x7fb47ed488f0>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:39.590225', '2023-03-24 19:04:39.590229', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47ed4ddd8>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: sitelicense_ip_address.organization_no [SQL: 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'] [parameters: ('2023-03-24 19:04:39.590225', '2023-03-24 19:04:39.590229', 0, '123.456.789.012', '987.654.321.098')] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
______ ERROR at setup of test_manual_send_site_license_mail_acl[3-False] _______

self = <sqlalchemy.engine.base.Connection object at 0x7fb47f93abe0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47f903a90>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:47.937834', '2023-03-24 19:04:47.937838', 0, '123.456.789.012', '987.654.321.098')
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb47f93a898>, [{'finish_ip_address': '987.654.321.098', 'organization_id': 0, 'start_ip_address': '123.456.789.012'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb47f948fd0>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47f93a860>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47f903a90>
cursor = <sqlite3.Cursor object at 0x7fb4807683b0>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:47.937834', '2023-03-24 19:04:47.937838', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47f93a860>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: sitelicense_ip_address.organization_no

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def site_license(db):
        license=dict()
        result = SiteLicenseInfo(
            organization_id=0,
            organization_name="test data",
            receive_mail_flag="T",
            mail_address="test@mail.com",
            domain_name="test_domain",
        )
        db.session.add(result)
        addr1 = SiteLicenseIpAddress(
            organization_id=0,
            start_ip_address="123.456.789.012",
            finish_ip_address="987.654.321.098"
        )
        #addr2 = SiteLicenseIpAddress(
        #    organization_id=0,
        #    start_ip_address="567.890.123.456",
        #    finish_ip_address="543.210.987.654"
        #)
        db.session.add(addr1)
        #db.session.add(addr2)
        license["Info"]=result
        #license["address"] = [addr1,addr2]
        license["address"] = [addr1]
>       db.session.commit()

tests/conftest.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1116: in _emit_insert_statements
    statement, params
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb47f903a90>
cursor = <sqlite3.Cursor object at 0x7fb4807683b0>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:47.937834', '2023-03-24 19:04:47.937838', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb47f93a860>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: sitelicense_ip_address.organization_no [SQL: 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'] [parameters: ('2023-03-24 19:04:47.937834', '2023-03-24 19:04:47.937838', 0, '123.456.789.012', '987.654.321.098')] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
______ ERROR at setup of test_manual_send_site_license_mail_acl[4-False] _______

self = <sqlalchemy.engine.base.Connection object at 0x7fb4906e6ba8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb48f54e630>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:54.037573', '2023-03-24 19:04:54.037577', 0, '123.456.789.012', '987.654.321.098')
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb4906e67f0>, [{'finish_ip_address': '987.654.321.098', 'organization_id': 0, 'start_ip_address': '123.456.789.012'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb48fa2c2b0>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4906e6080>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb48f54e630>
cursor = <sqlite3.Cursor object at 0x7fb48dcbfc00>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:54.037573', '2023-03-24 19:04:54.037577', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4906e6080>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: sitelicense_ip_address.organization_no

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def site_license(db):
        license=dict()
        result = SiteLicenseInfo(
            organization_id=0,
            organization_name="test data",
            receive_mail_flag="T",
            mail_address="test@mail.com",
            domain_name="test_domain",
        )
        db.session.add(result)
        addr1 = SiteLicenseIpAddress(
            organization_id=0,
            start_ip_address="123.456.789.012",
            finish_ip_address="987.654.321.098"
        )
        #addr2 = SiteLicenseIpAddress(
        #    organization_id=0,
        #    start_ip_address="567.890.123.456",
        #    finish_ip_address="543.210.987.654"
        #)
        db.session.add(addr1)
        #db.session.add(addr2)
        license["Info"]=result
        #license["address"] = [addr1,addr2]
        license["address"] = [addr1]
>       db.session.commit()

tests/conftest.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1116: in _emit_insert_statements
    statement, params
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb48f54e630>
cursor = <sqlite3.Cursor object at 0x7fb48dcbfc00>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:54.037573', '2023-03-24 19:04:54.037577', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb4906e6080>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: sitelicense_ip_address.organization_no [SQL: 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'] [parameters: ('2023-03-24 19:04:54.037573', '2023-03-24 19:04:54.037577', 0, '123.456.789.012', '987.654.321.098')] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
__________ ERROR at setup of test_manual_send_site_license_mail_guest __________

self = <sqlalchemy.engine.base.Connection object at 0x7fb48cca4710>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb493af2d30>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:59.329474', '2023-03-24 19:04:59.329478', 0, '123.456.789.012', '987.654.321.098')
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb48cca4ef0>, [{'finish_ip_address': '987.654.321.098', 'organization_id': 0, 'start_ip_address': '123.456.789.012'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7fb4864826d8>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb48cca47b8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb493af2d30>
cursor = <sqlite3.Cursor object at 0x7fb483551180>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:59.329474', '2023-03-24 19:04:59.329478', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb48cca47b8>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: sitelicense_ip_address.organization_no

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    @pytest.fixture()
    def site_license(db):
        license=dict()
        result = SiteLicenseInfo(
            organization_id=0,
            organization_name="test data",
            receive_mail_flag="T",
            mail_address="test@mail.com",
            domain_name="test_domain",
        )
        db.session.add(result)
        addr1 = SiteLicenseIpAddress(
            organization_id=0,
            start_ip_address="123.456.789.012",
            finish_ip_address="987.654.321.098"
        )
        #addr2 = SiteLicenseIpAddress(
        #    organization_id=0,
        #    start_ip_address="567.890.123.456",
        #    finish_ip_address="543.210.987.654"
        #)
        db.session.add(addr1)
        #db.session.add(addr2)
        license["Info"]=result
        #license["address"] = [addr1,addr2]
        license["address"] = [addr1]
>       db.session.commit()

tests/conftest.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/scoping.py:162: in do
    return getattr(self.registry(), name)(*args, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1023: in commit
    self.transaction.commit()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:487: in commit
    self._prepare_impl()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:466: in _prepare_impl
    self.session.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1116: in _emit_insert_statements
    statement, params
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb493af2d30>
cursor = <sqlite3.Cursor object at 0x7fb483551180>
statement = 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'
parameters = ('2023-03-24 19:04:59.329474', '2023-03-24 19:04:59.329478', 0, '123.456.789.012', '987.654.321.098')
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb48cca47b8>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: sitelicense_ip_address.organization_no [SQL: 'INSERT INTO sitelicense_ip_address (created, updated, organization_id, start_ip_address, finish_ip_address) VALUES (?, ?, ?, ?, ?)'] [parameters: ('2023-03-24 19:04:59.329474', '2023-03-24 19:04:59.329478', 0, '123.456.789.012', '987.654.321.098')] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
=================================== FAILURES ===================================
__________________ TestFacetSearchSettingView.test_edit_view ___________________

self = <tests.test_admin.TestFacetSearchSettingView object at 0x7fb4a88d9438>
setup_view_facetsearch = (<Flask 'tests.conftest'>, <SQLAlchemy engine=sqlite:////code/modules/weko-admin/tests/test.db>, <flask_admin.base.Admin object at 0x7fb4a88ddd68>, <User 1>, <weko_admin.admin.FacetSearchSettingView object at 0x7fb4a89fca58>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fb4a89f3d68>

    def test_edit_view(self, setup_view_facetsearch, mocker):
        app, db, admin, user, view = setup_view_facetsearch
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/test_admin.py:1447: TypeError
_________________ TestFacetSearchSettingView.test_details_view _________________

self = <tests.test_admin.TestFacetSearchSettingView object at 0x7fb4a89f5cc0>
setup_view_facetsearch = (<Flask 'tests.conftest'>, <SQLAlchemy engine=sqlite:////code/modules/weko-admin/tests/test.db>, <flask_admin.base.Admin object at 0x7fb4a8a16278>, <User 1>, <weko_admin.admin.FacetSearchSettingView object at 0x7fb4a8ad57f0>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fb4a8b4ef28>

    def test_details_view(self, setup_view_facetsearch, mocker):
        app, db, admin, user, view = setup_view_facetsearch
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/test_admin.py:1489: TypeError
____________________ TestFacetSearchSettingView.test_delete ____________________

self = <tests.test_admin.TestFacetSearchSettingView object at 0x7fb4a8a1a780>
setup_view_facetsearch = (<Flask 'tests.conftest'>, <SQLAlchemy engine=sqlite:////code/modules/weko-admin/tests/test.db>, <flask_admin.base.Admin object at 0x7fb4a925bc50>, <User 1>, <weko_admin.admin.FacetSearchSettingView object at 0x7fb4a916f7f0>)
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fb4a92d3a20>

    def test_delete(self, setup_view_facetsearch, mocker):
    
        app, db, admin, user, view = setup_view_facetsearch
        language = FacetSearchSetting(
            name_en="Data Language",
            name_jp="データの言語",
            mapping="language",
            aggregations=[],
>           active=True
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/test_admin.py:1532: TypeError
____________________ TestFacetSearchSetting.test_null_data _____________________

self = <tests.test_models.TestFacetSearchSetting object at 0x7fb496a1b438>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    def test_null_data(self, db):
        fss = FacetSearchSetting(
            name_en="test_setting",
            mapping="test_mapping",
            aggregations=None,
            name_jp=None,
>           active=None
        )
E       TypeError: __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'

tests/test_models.py:1020: TypeError
______________________ TestFacetSearchSetting.test_create ______________________

self = <tests.test_models.TestFacetSearchSetting object at 0x7fb4961755c0>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-admin/test.db>

    def test_create(self,db):
        data = {
            "name_en":"test setting",
            "name_jp":"テスト設定",
            "mapping":"test_mapping",
            "aggregations":[],
            "active":True
        }
        result = FacetSearchSetting.create(data)
>       assert result.name_en == "test setting"
E       AttributeError: 'NoneType' object has no attribute 'name_en'

tests/test_models.py:1054: AttributeError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:models.py:1860 __init__() missing 3 required positional arguments: 'ui_type', 'display_number', and 'is_open'
=============================== warnings summary ===============================
.tox/c1/lib/python3.6/site-packages/invenio_indexer/cli.py:96
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/invenio_indexer/cli.py:96: DeprecationWarning: 'resultcallback' has been renamed to 'result_callback'. The old name will be removed in Click 8.1.
    @queue.resultcallback()

.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3: DeprecationWarning: 'werkzeug.contrib.cache' is deprecated as of version 0.15 and will be removed in version 1.0. It has moved to https://github.com/pallets/cachelib.
    from werkzeug.contrib.cache import NullCache, SimpleCache, FileSystemCache

.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

tests/test_api.py:101
  /code/modules/weko-admin/tests/test_api.py:101: DeprecationWarning: invalid escape sequence \+
    mock_res._content = b"API[\+\s]scraper\n^java\/\d{1,2}.\d"

tests/test_admin.py: 1508 warnings
tests/test_api.py: 260 warnings
tests/test_cli.py: 312 warnings
tests/test_models.py: 1378 warnings
tests/test_permissions.py: 26 warnings
tests/test_tasks.py: 286 warnings
tests/test_utils.py: 1430 warnings
tests/test_views.py: 2938 warnings
tests/test_weko_admin.py: 130 warnings
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/invenio_admin/ext.py:73: PendingDeprecationWarning: Usage of model and modelview kwargs are deprecated in favor of view_class, args and kwargs.
    PendingDeprecationWarning

tests/test_admin.py: 63 warnings
tests/test_api.py: 10 warnings
tests/test_cli.py: 12 warnings
tests/test_models.py: 53 warnings
tests/test_permissions.py: 1 warning
tests/test_tasks.py: 11 warnings
tests/test_utils.py: 55 warnings
tests/test_views.py: 113 warnings
tests/test_weko_admin.py: 5 warnings
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/flask_admin/model/base.py:1416: UserWarning: Fields missing from ruleset: created_userId,created_date,updated_userId,updated_date
    warnings.warn(text)

tests/test_admin.py: 58 warnings
tests/test_api.py: 10 warnings
tests/test_cli.py: 12 warnings
tests/test_models.py: 53 warnings
tests/test_permissions.py: 1 warning
tests/test_tasks.py: 11 warnings
tests/test_utils.py: 55 warnings
tests/test_views.py: 113 warnings
tests/test_weko_admin.py: 5 warnings
  /code/modules/invenio-oaiserver/invenio_oaiserver/ext.py:135: UserWarning: Please specify the OAISERVER_ID_PREFIX configuration.default value is: oai:d1e8c2e8926a:recid/
    app.config.get('OAISERVER_ID_PREFIX')))

tests/test_admin.py: 21 warnings
tests/test_views.py: 95 warnings
tests/test_weko_admin.py: 4 warnings
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/flask/sessions.py:208: UserWarning: "test_server" is not a valid cookie domain, it must contain a ".". Add an entry to your hosts file, for example "test_server.localdomain", and use that instead.
    ' "{rv}.localdomain", and use that instead.'.format(rv=rv)

tests/test_admin.py::test_SiteLicenseSettingsView_index
tests/test_utils.py::test_get_response_json
tests/test_views.py::test_manual_send_site_license_mail_acl[0-True]
tests/test_views.py::test_manual_send_site_license_mail_acl[1-True]
tests/test_views.py::test_manual_send_site_license_mail_acl[2-False]
tests/test_views.py::test_manual_send_site_license_mail_acl[3-False]
tests/test_views.py::test_manual_send_site_license_mail_acl[4-False]
tests/test_views.py::test_manual_send_site_license_mail_guest
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/crud.py:793: SAWarning: Column 'sitelicense_ip_address.organization_no' is marked as a member of the primary key for table 'sitelicense_ip_address', but has no Python-side or server-side default generator indicated, nor does it indicate 'autoincrement=True' or 'nullable=True', and no explicit value is passed.  Primary key columns typically may not store NULL. Note that as of SQLAlchemy 1.1, 'autoincrement=True' must be indicated explicitly for composite (e.g. multicolumn) primary keys if AUTO_INCREMENT/SERIAL/IDENTITY behavior is expected for one of the columns in the primary key. CREATE TABLE statements are impacted by this change as well on most backends.
    util.warn(msg)

tests/test_admin.py: 10 warnings
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:794: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
    'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '

tests/test_admin.py::TestIdentifierSettingView::test_validator_halfwidth_input
tests/test_admin.py::TestIdentifierSettingView::test_validate_form
tests/test_admin.py::TestIdentifierSettingView::test_validate_form
tests/test_admin.py::TestIdentifierSettingView::test_validate_form
tests/test_admin.py::TestIdentifierSettingView::test_on_model_change
tests/test_admin.py::TestIdentifierSettingView::test_get_comunity_list
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/flask_admin/model/base.py:1332: FlaskWTFDeprecationWarning: "flask_wtf.Form" has been renamed to "FlaskForm" and will be removed in 1.0.
    return self._create_form_class(get_form_data(), obj=obj)

tests/test_admin.py::TestIdentifierSettingView::test_on_model_change
tests/test_admin.py::TestIdentifierSettingView::test_on_form_prefill
tests/test_admin.py::TestIdentifierSettingView::test_get_comunity_list
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/flask_admin/model/base.py:1416: UserWarning: Fields missing from ruleset: csrf_token
    warnings.warn(text)

tests/test_admin.py::TestIdentifierSettingView::test_on_model_change
tests/test_admin.py::TestIdentifierSettingView::test_on_form_prefill
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/flask_admin/model/base.py:1340: FlaskWTFDeprecationWarning: "flask_wtf.Form" has been renamed to "FlaskForm" and will be removed in 1.0.
    return self._edit_form_class(get_form_data(), obj=obj)

tests/test_models.py::TestApiCertificate::test_insert_new_api_cert
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/crud.py:793: SAWarning: Column 'api_certificate.api_code' is marked as a member of the primary key for table 'api_certificate', but has no Python-side or server-side default generator indicated, nor does it indicate 'autoincrement=True' or 'nullable=True', and no explicit value is passed.  Primary key columns typically may not store NULL.
    util.warn(msg)

tests/test_tasks.py::test_is_reindex_running_not_running
  /code/modules/weko-admin/.tox/c1/lib/python3.6/site-packages/kombu/utils/compat.py:93: DeprecationWarning: SelectableGroups dict interface is deprecated. Use select.
    for ep in importlib_metadata.entry_points().get(namespace, [])

tests/test_utils.py::test_reset_redis_cache
  /code/modules/weko-admin/tests/test_utils.py:507: PytestMockWarning: Mocks returned by pytest-mock do not need to be used as context managers. The mocker fixture automatically undoes mocking at the end of a test. This warning can be ignored if it was triggered by mocking a context manager. https://github.com/pytest-dev/pytest-mock#note-about-usage-as-context-manager
    with mocker.patch("weko_admin.utils.RedisConnection.connection",side_effect=Exception("test_error")):

tests/test_utils.py: 5816 warnings
  /code/modules/invenio-oaiserver/invenio_oaiserver/receivers.py:28: DeprecationWarning: generator 'get_record_sets' raised StopIteration
    new_sets = set(get_record_sets(record=record))

-- Docs: https://docs.pytest.org/en/stable/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                        Stmts   Miss Branch BrPart  Cover
-------------------------------------------------------------
weko_admin/__init__.py          4      0      0      0   100%
weko_admin/admin.py           662    246    186      0    63%
weko_admin/api.py             108      0     38      0   100%
weko_admin/bundles.py          25      0      0      0   100%
weko_admin/cli.py             139      0      8      0   100%
weko_admin/config.py           70      0      0      0   100%
weko_admin/ext.py              93      1     32      1    98%
weko_admin/models.py          860     79    174      3    91%
weko_admin/permissions.py      16      0      0      0   100%
weko_admin/tasks.py           111     22     34      4    78%
weko_admin/utils.py          1177    271    437      2    78%
weko_admin/version.py           2      0      0      0   100%
weko_admin/views.py           363      0     70      0   100%
-------------------------------------------------------------
TOTAL                        3630    619    979     10    83%
Coverage HTML written to dir htmlcov

=========================== short test summary info ============================
FAILED tests/test_admin.py::TestFacetSearchSettingView::test_edit_view - Type...
FAILED tests/test_admin.py::TestFacetSearchSettingView::test_details_view - T...
FAILED tests/test_admin.py::TestFacetSearchSettingView::test_delete - TypeErr...
FAILED tests/test_models.py::TestFacetSearchSetting::test_null_data - TypeErr...
FAILED tests/test_models.py::TestFacetSearchSetting::test_create - AttributeE...
ERROR tests/test_admin.py::TestReportView::test_index - sqlalchemy.exc.Integr...
ERROR tests/test_admin.py::test_StatsSettingsView_index - sqlalchemy.exc.Inte...
ERROR tests/test_admin.py::test_SearchSettingsView_index - sqlalchemy.exc.Int...
ERROR tests/test_admin.py::test_SiteLicenseSettingsView_index - sqlalchemy.ex...
ERROR tests/test_admin.py::test_SiteLicenseSendMailSettingsView_index - sqlal...
ERROR tests/test_admin.py::test_FilePreviewSettingsView_index - sqlalchemy.ex...
ERROR tests/test_admin.py::TestItemExportSettingsView::test_index - sqlalchem...
ERROR tests/test_admin.py::TestItemExportSettingsView::test_get_current_settings
ERROR tests/test_admin.py::test_RestrictedAccessSettingView_index - sqlalchem...
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[0-False-200]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[1-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[2-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[3-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_acl[4-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_guest
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_index_raise
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[0-False-200]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[1-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[2-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[3-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_acl[4-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_guest
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_param1
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_param2
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_param3
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_param4
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_chk_executing
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_chk_err
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_return
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_reindex_return2
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[0-False-200]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[1-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[2-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[3-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_acl[4-False-403]
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_running
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_iserror
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_guest
ERROR tests/test_admin.py::TestsReindexElasticSearchView::test_ReindexElasticSearchView_check_reindex_is_running_err
ERROR tests/test_models.py::TestAdminSettings::test_get - sqlalchemy.exc.Inte...
ERROR tests/test_models.py::TestAdminSettings::test_update - sqlalchemy.exc.I...
ERROR tests/test_models.py::TestAdminSettings::test_delete - sqlalchemy.exc.I...
ERROR tests/test_models.py::TestFacetSearchSetting::test_get_all - TypeError:...
ERROR tests/test_models.py::TestFacetSearchSetting::test_delete - TypeError: ...
ERROR tests/test_models.py::TestFacetSearchSetting::test_update_by_id - TypeE...
ERROR tests/test_models.py::TestFacetSearchSetting::test_get_activated_facets_mapping
ERROR tests/test_tasks.py::test_check_send_all_reports - sqlalchemy.exc.Integ...
ERROR tests/test_tasks.py::test_check_send_site_access_report - sqlalchemy.ex...
ERROR tests/test_tasks.py::test_reindex_EStoES - sqlalchemy.exc.IntegrityErro...
ERROR tests/test_tasks.py::test_reindex_DBtoES - sqlalchemy.exc.IntegrityErro...
ERROR tests/test_tasks.py::test_reindex_raise - sqlalchemy.exc.IntegrityError...
ERROR tests/test_utils.py::test_get_response_json - sqlalchemy.exc.IntegrityE...
ERROR tests/test_utils.py::test_get_restricted_access - sqlalchemy.exc.Integr...
ERROR tests/test_utils.py::test_update_restricted_access - sqlalchemy.exc.Int...
ERROR tests/test_utils.py::test_get_facet_search - TypeError: __init__() miss...
ERROR tests/test_utils.py::test_get_item_mapping_list - TypeError: __init__()...
ERROR tests/test_utils.py::test_create_facet_search_query - TypeError: __init...
ERROR tests/test_utils.py::test_is_exits_facet - TypeError: __init__() missin...
ERROR tests/test_utils.py::test_get_title_facets
ERROR tests/test_views.py::test_manual_send_site_license_mail_acl[0-True] - s...
ERROR tests/test_views.py::test_manual_send_site_license_mail_acl[1-True] - s...
ERROR tests/test_views.py::test_manual_send_site_license_mail_acl[2-False] - ...
ERROR tests/test_views.py::test_manual_send_site_license_mail_acl[3-False] - ...
ERROR tests/test_views.py::test_manual_send_site_license_mail_acl[4-False] - ...
ERROR tests/test_views.py::test_manual_send_site_license_mail_guest - sqlalch...
==== 5 failed, 288 passed, 14881 warnings, 65 errors in 1559.39s (0:25:59) =====
ERROR: InvocationError for command /code/modules/weko-admin/.tox/c1/bin/pytest --cov=weko_admin tests -v -vv -s --cov-branch --cov-report=term --cov-report=html --basetemp=/code/modules/weko-admin/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
